"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
    return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.VulnerabilityService = void 0;
var logger_1 = require("../../utils/logger");
var child_process_1 = require("child_process");
var VulnerabilityService = /** @class */ (function () {
    function VulnerabilityService() {
        this.vulnerabilityCache = new Map();
        this.detailsCache = new Map();
        this.cacheDuration = 1000 * 60 * 60; // 1 hour
        this.logger = logger_1.Logger.getInstance();
    }
    VulnerabilityService.prototype.checkNpmVulnerabilities = function (packageName, version) {
        return __awaiter(this, void 0, void 0, function () {
            var cacheKey, cached, result, vulns;
            var _this = this;
            return __generator(this, function (_a) {
                try {
                    cacheKey = "npm:".concat(packageName, "@").concat(version);
                    cached = this.getCachedVulnerabilities(cacheKey);
                    if (cached) {
                        return [2 /*return*/, cached];
                    }
                    result = (0, child_process_1.execSync)("npm audit --json ".concat(packageName, "@").concat(version), { encoding: 'utf8' });
                    vulns = this.parseNpmAuditResult(JSON.parse(result));
                    this.cacheVulnerabilities(cacheKey, vulns);
                    // Also cache individual vulnerabilities for later lookup
                    vulns.forEach(function (vuln) {
                        _this.detailsCache.set(vuln.id, vuln);
                    });
                    return [2 /*return*/, vulns];
                }
                catch (error) {
                    this.logger.error('Error checking npm vulnerabilities', error);
                    return [2 /*return*/, []];
                }
                return [2 /*return*/];
            });
        });
    };
    VulnerabilityService.prototype.checkPythonVulnerabilities = function (packageName, version) {
        return __awaiter(this, void 0, void 0, function () {
            var cacheKey, cached, result, vulns;
            var _this = this;
            return __generator(this, function (_a) {
                try {
                    cacheKey = "python:".concat(packageName, "@").concat(version);
                    cached = this.getCachedVulnerabilities(cacheKey);
                    if (cached) {
                        return [2 /*return*/, cached];
                    }
                    result = (0, child_process_1.execSync)("safety check ".concat(packageName, "==").concat(version, " --json"), { encoding: 'utf8' });
                    vulns = this.parseSafetyCheckResult(JSON.parse(result));
                    this.cacheVulnerabilities(cacheKey, vulns);
                    // Also cache individual vulnerabilities for later lookup
                    vulns.forEach(function (vuln) {
                        _this.detailsCache.set(vuln.id, vuln);
                    });
                    return [2 /*return*/, vulns];
                }
                catch (error) {
                    this.logger.error('Error checking Python vulnerabilities', error);
                    return [2 /*return*/, []];
                }
                return [2 /*return*/];
            });
        });
    };
    /**
     * Get detailed information about a specific vulnerability
     * @param vulnId The ID of the vulnerability to retrieve details for
     * @returns Detailed vulnerability information, or undefined if not found
     */
    VulnerabilityService.prototype.getVulnerabilityDetails = function (vulnId) {
        return __awaiter(this, void 0, void 0, function () {
            var externalDetails, error_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        // Check in our cache first
                        if (this.detailsCache.has(vulnId)) {
                            return [2 /*return*/, this.detailsCache.get(vulnId)];
                        }
                        return [4 /*yield*/, this.fetchVulnerabilityDetails(vulnId)];
                    case 1:
                        externalDetails = _a.sent();
                        if (externalDetails) {
                            this.detailsCache.set(vulnId, externalDetails);
                            return [2 /*return*/, externalDetails];
                        }
                        return [2 /*return*/, undefined];
                    case 2:
                        error_1 = _a.sent();
                        this.logger.error("Error getting vulnerability details for ".concat(vulnId), error_1);
                        return [2 /*return*/, undefined];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    VulnerabilityService.prototype.fetchVulnerabilityDetails = function (vulnId) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                // In a real implementation, this would fetch from NVD or similar service
                // For now, return a placeholder
                if (vulnId) {
                    return [2 /*return*/, {
                            id: vulnId,
                            title: "Vulnerability ".concat(vulnId),
                            description: 'Detailed information would be fetched from a vulnerability database.',
                            severity: 'medium',
                            fixedIn: 'latest',
                            references: ["https://nvd.nist.gov/vuln/detail/".concat(vulnId)],
                            timestamp: new Date()
                        }];
                }
                return [2 /*return*/, undefined];
            });
        });
    };
    VulnerabilityService.prototype.getCachedVulnerabilities = function (key) {
        var cached = this.vulnerabilityCache.get(key);
        if (!cached || Date.now() - cached[0].timestamp > this.cacheDuration) {
            return undefined;
        }
        return cached;
    };
    VulnerabilityService.prototype.cacheVulnerabilities = function (key, vulnerabilities) {
        this.vulnerabilityCache.set(key, vulnerabilities.map(function (v) { return (__assign(__assign({}, v), { timestamp: new Date() })); }));
    };
    VulnerabilityService.prototype.parseNpmAuditResult = function (result) {
        var vulns = [];
        for (var _i = 0, _a = Object.entries(result.advisories || {}); _i < _a.length; _i++) {
            var _b = _a[_i], id = _b[0], advisory = _b[1];
            vulns.push({
                id: id,
                title: advisory.title,
                description: advisory.overview,
                severity: advisory.severity,
                fixedIn: advisory.patched_versions,
                references: advisory.references,
                timestamp: new Date()
            });
        }
        return vulns;
    };
    VulnerabilityService.prototype.parseSafetyCheckResult = function (result) {
        var _this = this;
        return result.map(function (vuln) { return ({
            id: vuln.vulnerability_id,
            title: vuln.advisory,
            description: vuln.details,
            severity: _this.mapPythonSeverity(vuln.severity),
            fixedIn: vuln.fixed_version,
            references: [vuln.more_info_url],
            timestamp: new Date()
        }); });
    };
    VulnerabilityService.prototype.mapPythonSeverity = function (severity) {
        switch (severity.toLowerCase()) {
            case 'critical': return 'critical';
            case 'high': return 'high';
            case 'moderate':
            case 'medium': return 'medium';
            default: return 'low';
        }
    };
    return VulnerabilityService;
}());
exports.VulnerabilityService = VulnerabilityService;
