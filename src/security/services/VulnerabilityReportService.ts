import * as vscode from 'vscode';
import { DependencyScanResult } from '../types';
import { Logger } from '../../utils/logger';
import { SecurityReportHtmlProvider } from '../providers/SecurityReportHtmlProvider';

export class VulnerabilityReportService {
    private readonly logger: Logger;
    private readonly statusBarItem: vscode.StatusBarItem;

    constructor(context: vscode.ExtensionContext) {
        this.logger = Logger.getInstance();
        this.statusBarItem = vscode.window.createStatusBarItem(vscode.StatusBarAlignment.Right, 100);
        context.subscriptions.push(this.statusBarItem);
    }

    public updateStatusBar(hasVulnerabilities: boolean, count: number): void {
        if (hasVulnerabilities) {
            this.statusBarItem.text = `$(alert) ${count} Security Vulnerabilities`;
            this.statusBarItem.backgroundColor = new vscode.ThemeColor('statusBarItem.warningBackground');
            this.statusBarItem.show();
        } else {
            this.statusBarItem.text = '$(shield) Dependencies Secure';
            this.statusBarItem.backgroundColor = undefined;
            this.statusBarItem.show();
        }
    }

    public async showReport(result: DependencyScanResult): Promise<void> {
        try {
            const panel = vscode.window.createWebviewPanel(
                'vulnerabilityReport',
                'Dependency Vulnerabilities',
                vscode.ViewColumn.One,
                { enableScripts: true }
            );

            panel.webview.html = await SecurityReportHtmlProvider.generateDependencyReport(result);

            panel.webview.onDidReceiveMessage(async message => {
                try {
                    switch (message.command) {
                        case 'openPackage':
                            await vscode.env.openExternal(vscode.Uri.parse(message.url));
                            break;
                    }
                } catch (error) {
                    this.logger.error('Error handling webview message', error);
                }
            });

        } catch (error) {
            this.logger.error('Error showing vulnerability report', error);
            throw error;
        }
    }

    public dispose(): void {
        this.statusBarItem.dispose();
    }
}
