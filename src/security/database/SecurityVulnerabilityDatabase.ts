import * as vscode from 'vscode';
import { VulnerabilityInfo } from '../types';
import fetch from 'node-fetch';
import * as fs from 'fs';
import * as path from 'path';

/**
 * Database for caching and managing security vulnerability information
 */
export class SecurityVulnerabilityDatabase {
    private readonly dbPath: string;
    private readonly cache: Map<string, VulnerabilityInfo[]> = new Map();
    private readonly updateInterval = 1000 * 60 * 60 * 24; // 24 hours
    private lastUpdate: number = 0;

    constructor(private readonly context: vscode.ExtensionContext) {
        this.dbPath = path.join(context.globalStoragePath, 'vulnerability-db.json');
        this.loadDatabase();
    }

    /**
     * Check a package for known vulnerabilities
     */
    public async checkPackage(name: string, version: string): Promise<VulnerabilityInfo[]> {
        await this.ensureUpdated();
        const key = `${name}@${version}`;
        return this.cache.get(key) || [];
    }

    /**
     * Get detailed information about a specific vulnerability
     */
    public async getVulnerabilityDetails(vulnId: string): Promise<VulnerabilityInfo | undefined> {
        await this.ensureUpdated();
        for (const vulns of this.cache.values()) {
            const found = vulns.find(v => v.id === vulnId);
            if (found) {return found;}
        }
        return undefined;
    }

    /**
     * Ensure the database is up to date
     */
    private async ensureUpdated(): Promise<void> {
        const now = Date.now();
        if (now - this.lastUpdate > this.updateInterval) {
            await this.updateDatabase();
        }
    }

    /**
     * Load the vulnerability database from disk
     */
    private loadDatabase(): void {
        try {
            if (fs.existsSync(this.dbPath)) {
                const data = JSON.parse(fs.readFileSync(this.dbPath, 'utf8'));
                this.lastUpdate = data.lastUpdate;
                for (const [key, vulns] of Object.entries<VulnerabilityInfo[]>(data.vulnerabilities)) {
                    this.cache.set(key, vulns);
                }
            }
        } catch (error) {
            console.error('Error loading vulnerability database:', error);
        }
    }

    /**
     * Update the vulnerability database from online sources
     */
    private async updateDatabase(): Promise<void> {
        try {
            // Fetch from multiple sources
            const [npmVulns, githubVulns] = await Promise.all([
                this.fetchNpmVulnerabilities(),
                this.fetchGithubSecurityAdvisories()
            ]);

            // Merge vulnerabilities
            for (const vuln of [...npmVulns, ...githubVulns]) {
                const key = `${vuln.packageName}@${vuln.version}`;
                const existing = this.cache.get(key) || [];
                existing.push(vuln);
                this.cache.set(key, existing);
            }

            // Save to disk
            await this.saveDatabase();
            this.lastUpdate = Date.now();
        } catch (error) {
            console.error('Error updating vulnerability database:', error);
        }
    }

    /**
     * Fetch vulnerabilities from npm security advisory
     */
    private async fetchNpmVulnerabilities(): Promise<VulnerabilityInfo[]> {
        try {
            const response = await fetch('https://registry.npmjs.org/-/npm/v1/security/advisories');
            const data = await response.json();
            return this.parseNpmVulnerabilities(data);
        } catch {
            return [];
        }
    }

    /**
     * Fetch vulnerabilities from GitHub Security Advisory
     */
    private async fetchGithubSecurityAdvisories(): Promise<VulnerabilityInfo[]> {
        try {
            const response = await fetch('https://api.github.com/repos/github/advisory-database/contents/advisories/github-reviewed');
            const data = await response.json();
            return this.parseGithubAdvisories(data);
        } catch {
            return [];
        }
    }

    /**
     * Parse npm vulnerability data
     */
    private parseNpmVulnerabilities(data: any): VulnerabilityInfo[] {
        const vulns: VulnerabilityInfo[] = [];
        for (const adv of data.objects || []) {
            vulns.push({
                id: adv.id,
                title: adv.title,
                description: adv.description,
                severity: this.mapSeverity(adv.severity),
                vulnerableVersions: adv.vulnerable_versions,
                patchedVersions: adv.patched_versions,
                packageName: adv.module_name,
                version: adv.version,
                references: adv.references,
                recommendation: adv.recommendation,
                publishedDate: adv.created,
                cwe: adv.cwe,
                cvss: adv.cvss
            });
        }
        return vulns;
    }

    /**
     * Parse GitHub security advisory data
     */
    private parseGithubAdvisories(data: any): VulnerabilityInfo[] {
        const vulns: VulnerabilityInfo[] = [];
        for (const adv of data || []) {
            try {
                const content = JSON.parse(Buffer.from(adv.content, 'base64').toString());
                vulns.push({
                    id: content.id,
                    title: content.summary,
                    description: content.details,
                    severity: this.mapSeverity(content.severity),
                    vulnerableVersions: content.affected?.map((a: any) => a.range).join(', '),
                    patchedVersions: content.affected?.map((a: any) => a.fixed).filter(Boolean).join(', '),
                    packageName: content.affected?.map((a: any) => a.package).join(', '),
                    version: content.affected?.map((a: any) => a.range).join(', '),
                    references: content.references,
                    recommendation: content.solution,
                    publishedDate: content.published,
                    cwe: content.cwe,
                    cvss: content.cvss
                });
            } catch (error) {
                console.error('Error parsing GitHub advisory:', error);
            }
        }
        return vulns;
    }

    /**
     * Map severity strings to standard levels
     */
    private mapSeverity(severity: string): 'critical' | 'high' | 'medium' | 'low' {
        switch (severity?.toLowerCase()) {
            case 'critical': return 'critical';
            case 'high': return 'high';
            case 'moderate':
            case 'medium': return 'medium';
            default: return 'low';
        }
    }

    /**
     * Save the vulnerability database to disk
     */
    private async saveDatabase(): Promise<void> {
        try {
            const data = {
                lastUpdate: Date.now(),
                vulnerabilities: Object.fromEntries(this.cache)
            };

            // Ensure directory exists
            const dir = path.dirname(this.dbPath);
            if (!fs.existsSync(dir)) {
                fs.mkdirSync(dir, { recursive: true });
            }

            fs.writeFileSync(this.dbPath, JSON.stringify(data, null, 2));
        } catch (error) {
            console.error('Error saving vulnerability database:', error);
        }
    }
}