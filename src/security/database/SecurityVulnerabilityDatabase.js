"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
    return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SecurityVulnerabilityDatabase = void 0;
var node_fetch_1 = require("node-fetch");
var fs = require("fs");
var path = require("path");
/**
 * Database for caching and managing security vulnerability information
 */
var SecurityVulnerabilityDatabase = /** @class */ (function () {
    function SecurityVulnerabilityDatabase(context) {
        this.context = context;
        this.cache = new Map();
        this.updateInterval = 1000 * 60 * 60 * 24; // 24 hours
        this.lastUpdate = 0;
        this.dbPath = path.join(context.globalStoragePath, 'vulnerability-db.json');
        this.loadDatabase();
    }
    /**
     * Check a package for known vulnerabilities
     */
    SecurityVulnerabilityDatabase.prototype.checkPackage = function (name, version) {
        return __awaiter(this, void 0, void 0, function () {
            var key;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.ensureUpdated()];
                    case 1:
                        _a.sent();
                        key = "".concat(name, "@").concat(version);
                        return [2 /*return*/, this.cache.get(key) || []];
                }
            });
        });
    };
    /**
     * Get detailed information about a specific vulnerability
     */
    SecurityVulnerabilityDatabase.prototype.getVulnerabilityDetails = function (vulnId) {
        return __awaiter(this, void 0, void 0, function () {
            var _i, _a, vulns, found;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.ensureUpdated()];
                    case 1:
                        _b.sent();
                        for (_i = 0, _a = this.cache.values(); _i < _a.length; _i++) {
                            vulns = _a[_i];
                            found = vulns.find(function (v) { return v.id === vulnId; });
                            if (found) {
                                return [2 /*return*/, found];
                            }
                        }
                        return [2 /*return*/, undefined];
                }
            });
        });
    };
    /**
     * Ensure the database is up to date
     */
    SecurityVulnerabilityDatabase.prototype.ensureUpdated = function () {
        return __awaiter(this, void 0, void 0, function () {
            var now;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        now = Date.now();
                        if (!(now - this.lastUpdate > this.updateInterval)) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.updateDatabase()];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Load the vulnerability database from disk
     */
    SecurityVulnerabilityDatabase.prototype.loadDatabase = function () {
        try {
            if (fs.existsSync(this.dbPath)) {
                var data = JSON.parse(fs.readFileSync(this.dbPath, 'utf8'));
                this.lastUpdate = data.lastUpdate;
                for (var _i = 0, _a = Object.entries(data.vulnerabilities); _i < _a.length; _i++) {
                    var _b = _a[_i], key = _b[0], vulns = _b[1];
                    this.cache.set(key, vulns);
                }
            }
        }
        catch (error) {
            console.error('Error loading vulnerability database:', error);
        }
    };
    /**
     * Update the vulnerability database from online sources
     */
    SecurityVulnerabilityDatabase.prototype.updateDatabase = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a, npmVulns, githubVulns, _i, _b, vuln, key, existing, error_1;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        _c.trys.push([0, 3, , 4]);
                        return [4 /*yield*/, Promise.all([
                                this.fetchNpmVulnerabilities(),
                                this.fetchGithubSecurityAdvisories()
                            ])];
                    case 1:
                        _a = _c.sent(), npmVulns = _a[0], githubVulns = _a[1];
                        // Merge vulnerabilities
                        for (_i = 0, _b = __spreadArray(__spreadArray([], npmVulns, true), githubVulns, true); _i < _b.length; _i++) {
                            vuln = _b[_i];
                            key = "".concat(vuln.packageName, "@").concat(vuln.version);
                            existing = this.cache.get(key) || [];
                            existing.push(vuln);
                            this.cache.set(key, existing);
                        }
                        // Save to disk
                        return [4 /*yield*/, this.saveDatabase()];
                    case 2:
                        // Save to disk
                        _c.sent();
                        this.lastUpdate = Date.now();
                        return [3 /*break*/, 4];
                    case 3:
                        error_1 = _c.sent();
                        console.error('Error updating vulnerability database:', error_1);
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Fetch vulnerabilities from npm security advisory
     */
    SecurityVulnerabilityDatabase.prototype.fetchNpmVulnerabilities = function () {
        return __awaiter(this, void 0, void 0, function () {
            var response, data, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _b.trys.push([0, 3, , 4]);
                        return [4 /*yield*/, (0, node_fetch_1.default)('https://registry.npmjs.org/-/npm/v1/security/advisories')];
                    case 1:
                        response = _b.sent();
                        return [4 /*yield*/, response.json()];
                    case 2:
                        data = _b.sent();
                        return [2 /*return*/, this.parseNpmVulnerabilities(data)];
                    case 3:
                        _a = _b.sent();
                        return [2 /*return*/, []];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Fetch vulnerabilities from GitHub Security Advisory
     */
    SecurityVulnerabilityDatabase.prototype.fetchGithubSecurityAdvisories = function () {
        return __awaiter(this, void 0, void 0, function () {
            var response, data, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _b.trys.push([0, 3, , 4]);
                        return [4 /*yield*/, (0, node_fetch_1.default)('https://api.github.com/repos/github/advisory-database/contents/advisories/github-reviewed')];
                    case 1:
                        response = _b.sent();
                        return [4 /*yield*/, response.json()];
                    case 2:
                        data = _b.sent();
                        return [2 /*return*/, this.parseGithubAdvisories(data)];
                    case 3:
                        _a = _b.sent();
                        return [2 /*return*/, []];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Parse npm vulnerability data
     */
    SecurityVulnerabilityDatabase.prototype.parseNpmVulnerabilities = function (data) {
        var vulns = [];
        for (var _i = 0, _a = data.objects || []; _i < _a.length; _i++) {
            var adv = _a[_i];
            vulns.push({
                id: adv.id,
                title: adv.title,
                description: adv.description,
                severity: this.mapSeverity(adv.severity),
                vulnerableVersions: adv.vulnerable_versions,
                patchedVersions: adv.patched_versions,
                packageName: adv.module_name,
                version: adv.version,
                references: adv.references,
                recommendation: adv.recommendation,
                publishedDate: adv.created,
                cwe: adv.cwe,
                cvss: adv.cvss
            });
        }
        return vulns;
    };
    /**
     * Parse GitHub security advisory data
     */
    SecurityVulnerabilityDatabase.prototype.parseGithubAdvisories = function (data) {
        var _a, _b, _c, _d;
        var vulns = [];
        for (var _i = 0, _e = data || []; _i < _e.length; _i++) {
            var adv = _e[_i];
            try {
                var content = JSON.parse(Buffer.from(adv.content, 'base64').toString());
                vulns.push({
                    id: content.id,
                    title: content.summary,
                    description: content.details,
                    severity: this.mapSeverity(content.severity),
                    vulnerableVersions: (_a = content.affected) === null || _a === void 0 ? void 0 : _a.map(function (a) { return a.range; }).join(', '),
                    patchedVersions: (_b = content.affected) === null || _b === void 0 ? void 0 : _b.map(function (a) { return a.fixed; }).filter(Boolean).join(', '),
                    packageName: (_c = content.affected) === null || _c === void 0 ? void 0 : _c.map(function (a) { return a.package; }).join(', '),
                    version: (_d = content.affected) === null || _d === void 0 ? void 0 : _d.map(function (a) { return a.range; }).join(', '),
                    references: content.references,
                    recommendation: content.solution,
                    publishedDate: content.published,
                    cwe: content.cwe,
                    cvss: content.cvss
                });
            }
            catch (error) {
                console.error('Error parsing GitHub advisory:', error);
            }
        }
        return vulns;
    };
    /**
     * Map severity strings to standard levels
     */
    SecurityVulnerabilityDatabase.prototype.mapSeverity = function (severity) {
        switch (severity === null || severity === void 0 ? void 0 : severity.toLowerCase()) {
            case 'critical': return 'critical';
            case 'high': return 'high';
            case 'moderate':
            case 'medium': return 'medium';
            default: return 'low';
        }
    };
    /**
     * Save the vulnerability database to disk
     */
    SecurityVulnerabilityDatabase.prototype.saveDatabase = function () {
        return __awaiter(this, void 0, void 0, function () {
            var data, dir;
            return __generator(this, function (_a) {
                try {
                    data = {
                        lastUpdate: Date.now(),
                        vulnerabilities: Object.fromEntries(this.cache)
                    };
                    dir = path.dirname(this.dbPath);
                    if (!fs.existsSync(dir)) {
                        fs.mkdirSync(dir, { recursive: true });
                    }
                    fs.writeFileSync(this.dbPath, JSON.stringify(data, null, 2));
                }
                catch (error) {
                    console.error('Error saving vulnerability database:', error);
                }
                return [2 /*return*/];
            });
        });
    };
    return SecurityVulnerabilityDatabase;
}());
exports.SecurityVulnerabilityDatabase = SecurityVulnerabilityDatabase;
