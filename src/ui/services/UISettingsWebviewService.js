"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UISettingsWebviewService = void 0;
var logger_1 = require("../../utils/logger");
var UISettingsWebviewService = /** @class */ (function () {
    function UISettingsWebviewService() {
        this.logger = new logger_1.Logger();
    }
    UISettingsWebviewService.prototype.generateWebviewContent = function (tabs) {
        try {
            return "<!DOCTYPE html>\n            <html lang=\"en\">\n            <head>\n                <meta charset=\"UTF-8\">\n                <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n                <title>Settings</title>\n                <style>\n                    .tab-container {\n                        margin-bottom: 20px;\n                    }\n                    .tab {\n                        padding: 8px 16px;\n                        cursor: pointer;\n                        border: none;\n                        background: none;\n                        color: var(--vscode-foreground);\n                    }\n                    .tab.active {\n                        border-bottom: 2px solid var(--vscode-focusBorder);\n                    }\n                    .tab-content {\n                        display: none;\n                        padding: 16px;\n                        background-color: var(--vscode-editor-background);\n                        border: 1px solid var(--vscode-panel-border);\n                        border-radius: 4px;\n                    }\n                    .tab-content.active {\n                        display: block;\n                    }\n                    .setting-group {\n                        margin-bottom: 16px;\n                    }\n                    .setting-group label {\n                        display: block;\n                        margin-bottom: 8px;\n                        color: var(--vscode-foreground);\n                    }\n                    select, input[type=\"text\"], input[type=\"number\"] {\n                        width: 100%;\n                        padding: 8px;\n                        background-color: var(--vscode-input-background);\n                        color: var(--vscode-input-foreground);\n                        border: 1px solid var(--vscode-input-border);\n                        border-radius: 2px;\n                    }\n                    .error-message {\n                        color: var(--vscode-errorForeground);\n                        margin-top: 8px;\n                        display: none;\n                    }\n                    .error-message.visible {\n                        display: block;\n                    }\n                </style>\n            </head>\n            <body>\n                <div class=\"tab-container\">\n                    ".concat(tabs.map(function (tab, index) { return "\n                        <button class=\"tab".concat(index === 0 ? ' active' : '', "\" data-tab=\"").concat(tab.id, "\">\n                            ").concat(tab.label, "\n                        </button>\n                    "); }).join(''), "\n                </div>\n\n                ").concat(tabs.map(function (tab, index) { return "\n                    <div id=\"".concat(tab.id, "\" class=\"tab-content").concat(index === 0 ? ' active' : '', "\">\n                        ").concat(tab.content, "\n                    </div>\n                "); }).join(''), "\n\n                <div class=\"error-message\" id=\"errorMessage\"></div>\n\n                <script>\n                    (function() {\n                        const vscode = acquireVsCodeApi();\n                        const tabs = document.querySelectorAll('.tab');\n                        const tabContents = document.querySelectorAll('.tab-content');\n                        const errorMessage = document.getElementById('errorMessage');\n\n                        function showError(message) {\n                            errorMessage.textContent = message;\n                            errorMessage.classList.add('visible');\n                            setTimeout(() => {\n                                errorMessage.classList.remove('visible');\n                            }, 3000);\n                        }\n\n                        tabs.forEach(tab => {\n                            tab.addEventListener('click', () => {\n                                tabs.forEach(t => t.classList.remove('active'));\n                                tabContents.forEach(c => c.classList.remove('active'));\n\n                                tab.classList.add('active');\n                                const tabName = tab.getAttribute('data-tab');\n                                document.getElementById(tabName).classList.add('active');\n\n                                vscode.postMessage({\n                                    command: 'tabChanged',\n                                    tab: tabName\n                                });\n                            });\n                        });\n\n                        window.addEventListener('message', event => {\n                            const message = event.data;\n                            switch (message.command) {\n                                case 'showError':\n                                    showError(message.message);\n                                    break;\n                                case 'selectTab':\n                                    const tabToSelect = message.tab;\n                                    if (tabToSelect) {\n                                        const tabEl = document.querySelector(`[data-tab=\"${tabToSelect}\"]`);\n                                        if (tabEl) {\n                                            tabEl.click();\n                                        }\n                                    }\n                                    break;\n                            }\n                        });\n                    }())\n                </script>\n            </body>\n            </html>");
        }
        catch (error) {
            this.logger.error('Error generating UI settings webview content', error);
            throw error;
        }
    };
    return UISettingsWebviewService;
}());
exports.UISettingsWebviewService = UISettingsWebviewService;
