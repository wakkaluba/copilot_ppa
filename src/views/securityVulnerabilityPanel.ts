import * as vscode from 'vscode';
import { VulnerabilityWebviewService } from '../services/security/VulnerabilityWebviewService';
import { VulnerabilityManagerService } from '../services/security/VulnerabilityManagerService';
import { VulnerabilityHtmlService } from '../services/security/VulnerabilityHtmlService';

/**
 * Interface for vulnerability data
 */
export interface IVulnerability {
    id: string;
    name: string;
    description: string;
    severity: 'low' | 'medium' | 'high' | 'critical';
    cve?: string;
    affected?: string[];
    remediation?: string;
    url?: string;
    type?: string;
    [key: string]: unknown;
}

/**
 * Interface for webview messages
 */
interface IVulnerabilityMessage {
    command: 'openUrl' | string;
    url?: string;
    [key: string]: unknown;
}

export class SecurityVulnerabilityPanel {
    public static currentPanel: SecurityVulnerabilityPanel | undefined;
    private readonly webviewService: VulnerabilityWebviewService;
    private readonly managerService: VulnerabilityManagerService;
    private readonly htmlService: VulnerabilityHtmlService;
    private _disposables: vscode.Disposable[] = [];

    public static createOrShow(extensionUri: vscode.Uri, vulnerabilities: IVulnerability[], title: string = 'Security Vulnerabilities') {
        const column = vscode.window.activeTextEditor?.viewColumn;

        if (SecurityVulnerabilityPanel.currentPanel) {
            SecurityVulnerabilityPanel.currentPanel.show(column);
            SecurityVulnerabilityPanel.currentPanel.update(vulnerabilities, title);
            return;
        }

        SecurityVulnerabilityPanel.currentPanel = new SecurityVulnerabilityPanel(extensionUri, vulnerabilities, title, column);
    }

    private constructor(
        extensionUri: vscode.Uri,
        vulnerabilities: IVulnerability[],
        title: string,
        column?: vscode.ViewColumn
    ) {
        this.webviewService = new VulnerabilityWebviewService(extensionUri, column);
        this.managerService = new VulnerabilityManagerService();
        this.htmlService = new VulnerabilityHtmlService();

        this.setupWebview(vulnerabilities, title);
        this.registerEventHandlers();
    }

    private setupWebview(vulnerabilities: IVulnerability[], title: string): void {
        const html = this.htmlService.generateHtml(
            this.managerService.categorizeVulnerabilities(vulnerabilities)
        );
        this.webviewService.setContent(title, html);
    }

    private registerEventHandlers(): void {
        this._disposables.push(
            this.webviewService.onDispose(() => this.dispose()),
            this.webviewService.onDidChangeViewState(() => this.update()),
            this.webviewService.onDidReceiveMessage(message => this.handleMessage(message))
        );
    }

    private show(column?: vscode.ViewColumn): void {
        this.webviewService.show(column);
    }

    public update(vulnerabilities?: IVulnerability[], title?: string): void {
        if (vulnerabilities && title) {
            this.setupWebview(vulnerabilities, title);
        }
    }

    private handleMessage(message: IVulnerabilityMessage): void {
        switch (message.command) {
            case 'openUrl':
                if (message.url) {
                    vscode.env.openExternal(vscode.Uri.parse(message.url));
                }
                break;
        }
    }

    public dispose(): void {
        SecurityVulnerabilityPanel.currentPanel = undefined;
        this.webviewService.dispose();
        this._disposables.forEach(d => d.dispose());
        this._disposables = [];
    }
}
