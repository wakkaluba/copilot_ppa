import * as vscode from 'vscode';

/**
 * Panel that shows detailed information about security vulnerabilities
 */
export class SecurityVulnerabilityPanel {
    public static currentPanel: SecurityVulnerabilityPanel | undefined;

    private readonly _panel: vscode.WebviewPanel;
    private readonly _extensionUri: vscode.Uri;
    private _disposables: vscode.Disposable[] = [];

    /**
     * Create or show a security vulnerability panel
     */
    public static createOrShow(extensionUri: vscode.Uri, vulnerabilities: any[], title: string = 'Security Vulnerabilities') {
        const column = vscode.window.activeTextEditor
            ? vscode.window.activeTextEditor.viewColumn
            : undefined;

        // If we already have a panel, show it
        if (SecurityVulnerabilityPanel.currentPanel) {
            SecurityVulnerabilityPanel.currentPanel._panel.reveal(column);
            SecurityVulnerabilityPanel.currentPanel.update(vulnerabilities, title);
            return;
        }

        // Otherwise, create a new panel
        const panel = vscode.window.createWebviewPanel(
            'securityVulnerabilities',
            title,
            column || vscode.ViewColumn.One,
            {
                enableScripts: true,
                retainContextWhenHidden: true,
            }
        );

        SecurityVulnerabilityPanel.currentPanel = new SecurityVulnerabilityPanel(panel, extensionUri, vulnerabilities, title);
    }

    /**
     * Create a new security vulnerability panel
     */
    private constructor(panel: vscode.WebviewPanel, extensionUri: vscode.Uri, vulnerabilities: any[], title: string) {
        this._panel = panel;
        this._extensionUri = extensionUri;

        // Set the webview's initial html content
        this.update(vulnerabilities, title);

        // Listen for when the panel is disposed
        // This happens when the user closes the panel or when the panel is closed programmatically
        this._panel.onDidDispose(() => this.dispose(), null, this._disposables);

        // Update the content based on view changes
        this._panel.onDidChangeViewState(
            e => {
                if (this._panel.visible) {
                    this.update(vulnerabilities, title);
                }
            },
            null,
            this._disposables
        );

        // Handle messages from the webview
        this._panel.webview.onDidReceiveMessage(
            message => {
                switch (message.command) {
                    case 'openUrl':
                        vscode.env.openExternal(vscode.Uri.parse(message.url));
                        return;
                }
            },
            null,
            this._disposables
        );
    }

    /**
     * Update the panel with new vulnerabilities
     */
    public update(vulnerabilities: any[], title: string) {
        this._panel.title = title;
        this._panel.webview.html = this._getHtmlForWebview(vulnerabilities);
    }

    /**
     * Clean up resources
     */
    public dispose() {
        SecurityVulnerabilityPanel.currentPanel = undefined;

        this._panel.dispose();

        while (this._disposables.length) {
            const x = this._disposables.pop();
            if (x) {
                x.dispose();
            }
        }
    }

    /**
     * Get the HTML for the webview panel
     */
    private _getHtmlForWebview(vulnerabilities: any[]): string {
        // Group vulnerabilities by severity
        const criticalVulns = vulnerabilities.filter(v => v.severity === 'critical');
        const highVulns = vulnerabilities.filter(v => v.severity === 'high');
        const mediumVulns = vulnerabilities.filter(v => v.severity === 'medium');
        const lowVulns = vulnerabilities.filter(v => v.severity === 'low');
        const infoVulns = vulnerabilities.filter(v => v.severity === 'info');

        return `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Security Vulnerabilities</title>
    <style>
        body {
            font-family: var(--vscode-font-family);
            padding: 20px;
            color: var(--vscode-foreground);
            background-color: var(--vscode-editor-background);
        }
        .vulnerability {
            margin-bottom: 20px;
            padding: 15px;
            border-radius: 5px;
        }
        .critical {
            background-color: rgba(255, 0, 0, 0.1);
            border-left: 5px solid #f00;
        }
        .high {
            background-color: rgba(255, 165, 0, 0.1);
            border-left: 5px solid #ff8c00;
        }
        .medium {
            background-color: rgba(255, 255, 0, 0.1);
            border-left: 5px solid #ffcc00;
        }
        .low {
            background-color: rgba(0, 0, 255, 0.1);
            border-left: 5px solid #00f;
        }
        .info {
            background-color: rgba(0, 255, 0, 0.1);
            border-left: 5px solid #0f0;
        }
        .vuln-title {
            font-weight: bold;
            margin-bottom: 10px;
        }
        .vuln-description {
            margin-bottom: 10px;
        }
        .vuln-details {
            margin-top: 10px;
            font-size: 0.9em;
        }
        .vuln-recommendation {
            margin-top: 15px;
            font-style: italic;
        }
        .vuln-link {
            margin-top: 10px;
        }
        .vuln-link a {
            color: var(--vscode-textLink-foreground);
            text-decoration: none;
        }
        .vuln-link a:hover {
            text-decoration: underline;
        }
        .section {
            margin-bottom: 30px;
        }
        .section-title {
            font-size: 1.2em;
            font-weight: bold;
            margin-bottom: 15px;
        }
        .no-vulns {
            font-style: italic;
            color: #888;
        }
        summary {
            cursor: pointer;
            padding: 8px 0;
            font-weight: bold;
        }
    </style>
</head>
<body>
    <h1>Security Vulnerabilities Report</h1>
    
    <div class="section">
        <div class="section-title">Critical Vulnerabilities (${criticalVulns.length})</div>
        ${criticalVulns.length === 0 ? '<div class="no-vulns">No critical vulnerabilities found</div>' : ''}
        ${criticalVulns.map(vuln => this._getVulnerabilityHtml(vuln, 'critical')).join('')}
    </div>
    
    <div class="section">
        <div class="section-title">High Vulnerabilities (${highVulns.length})</div>
        ${highVulns.length === 0 ? '<div class="no-vulns">No high vulnerabilities found</div>' : ''}
        ${highVulns.map(vuln => this._getVulnerabilityHtml(vuln, 'high')).join('')}
    </div>
    
    <div class="section">
        <div class="section-title">Medium Vulnerabilities (${mediumVulns.length})</div>
        ${mediumVulns.length === 0 ? '<div class="no-vulns">No medium vulnerabilities found</div>' : ''}
        ${mediumVulns.map(vuln => this._getVulnerabilityHtml(vuln, 'medium')).join('')}
    </div>
    
    <div class="section">
        <div class="section-title">Low Vulnerabilities (${lowVulns.length})</div>
        ${lowVulns.length === 0 ? '<div class="no-vulns">No low vulnerabilities found</div>' : ''}
        ${lowVulns.map(vuln => this._getVulnerabilityHtml(vuln, 'low')).join('')}
    </div>
    
    <div class="section">
        <div class="section-title">Info Vulnerabilities (${infoVulns.length})</div>
        ${infoVulns.length === 0 ? '<div class="no-vulns">No info vulnerabilities found</div>' : ''}
        ${infoVulns.map(vuln => this._getVulnerabilityHtml(vuln, 'info')).join('')}
    </div>
    
    <script>
        const vscode = acquireVsCodeApi();
        
        // Add event listeners to all links
        document.querySelectorAll('.vuln-link a').forEach(link => {
            link.addEventListener('click', (e) => {
                e.preventDefault();
                vscode.postMessage({
                    command: 'openUrl',
                    url: e.target.href
                });
            });
        });
    </script>
</body>
</html>`;
    }

    /**
     * Get HTML for a single vulnerability
     */
    private _getVulnerabilityHtml(vuln: any, severity: string): string {
        const packageInfo = vuln.package ? `in <b>${vuln.package}</b>${vuln.version ? ` (${vuln.version})` : ''}` : '';
        const cvssInfo = vuln.cvssScore ? `CVSS: ${vuln.cvssScore}` : '';
        
        return `
        <details class="vulnerability ${severity}">
            <summary>${this._escapeHtml(vuln.id)}: ${this._escapeHtml(vuln.description)} ${packageInfo}</summary>
            <div class="vuln-details">
                ${cvssInfo ? `<div><b>${cvssInfo}</b></div>` : ''}
                ${vuln.recommendation ? `<div class="vuln-recommendation">ðŸ’¡ ${this._escapeHtml(vuln.recommendation)}</div>` : ''}
                ${vuln.url ? `<div class="vuln-link"><a href="${this._escapeHtml(vuln.url)}" target="_blank">More information</a></div>` : ''}
            </div>
        </details>`;
    }

    /**
     * Escape HTML to prevent XSS
     */
    private _escapeHtml(text: string): string {
        return text
            .replace(/&/g, "&amp;")
            .replace(/</g, "&lt;")
            .replace(/>/g, "&gt;")
            .replace(/"/g, "&quot;")
            .replace(/'/g, "&#039;");
    }
}
