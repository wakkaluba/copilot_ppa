"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SecurityVulnerabilityPanel = void 0;
var vscode = require("vscode");
var VulnerabilityWebviewService_1 = require("../services/security/VulnerabilityWebviewService");
var VulnerabilityManagerService_1 = require("../services/security/VulnerabilityManagerService");
var VulnerabilityHtmlService_1 = require("../services/security/VulnerabilityHtmlService");
var SecurityVulnerabilityPanel = /** @class */ (function () {
    function SecurityVulnerabilityPanel(extensionUri, vulnerabilities, title, column) {
        this._disposables = [];
        this.webviewService = new VulnerabilityWebviewService_1.VulnerabilityWebviewService(extensionUri, column);
        this.managerService = new VulnerabilityManagerService_1.VulnerabilityManagerService();
        this.htmlService = new VulnerabilityHtmlService_1.VulnerabilityHtmlService();
        this.setupWebview(vulnerabilities, title);
        this.registerEventHandlers();
    }
    SecurityVulnerabilityPanel.createOrShow = function (extensionUri, vulnerabilities, title) {
        var _a;
        if (title === void 0) { title = 'Security Vulnerabilities'; }
        var column = (_a = vscode.window.activeTextEditor) === null || _a === void 0 ? void 0 : _a.viewColumn;
        if (SecurityVulnerabilityPanel.currentPanel) {
            SecurityVulnerabilityPanel.currentPanel.show(column);
            SecurityVulnerabilityPanel.currentPanel.update(vulnerabilities, title);
            return;
        }
        SecurityVulnerabilityPanel.currentPanel = new SecurityVulnerabilityPanel(extensionUri, vulnerabilities, title, column);
    };
    SecurityVulnerabilityPanel.prototype.setupWebview = function (vulnerabilities, title) {
        var html = this.htmlService.generateHtml(this.managerService.categorizeVulnerabilities(vulnerabilities));
        this.webviewService.setContent(title, html);
    };
    SecurityVulnerabilityPanel.prototype.registerEventHandlers = function () {
        var _this = this;
        this._disposables.push(this.webviewService.onDispose(function () { return _this.dispose(); }), this.webviewService.onDidChangeViewState(function () { return _this.update(); }), this.webviewService.onDidReceiveMessage(function (message) { return _this.handleMessage(message); }));
    };
    SecurityVulnerabilityPanel.prototype.show = function (column) {
        this.webviewService.show(column);
    };
    SecurityVulnerabilityPanel.prototype.update = function (vulnerabilities, title) {
        if (vulnerabilities && title) {
            this.setupWebview(vulnerabilities, title);
        }
    };
    SecurityVulnerabilityPanel.prototype.handleMessage = function (message) {
        switch (message.command) {
            case 'openUrl':
                if (message.url) {
                    vscode.env.openExternal(vscode.Uri.parse(message.url));
                }
                break;
        }
    };
    SecurityVulnerabilityPanel.prototype.dispose = function () {
        SecurityVulnerabilityPanel.currentPanel = undefined;
        this.webviewService.dispose();
        this._disposables.forEach(function (d) { return d.dispose(); });
        this._disposables = [];
    };
    return SecurityVulnerabilityPanel;
}());
exports.SecurityVulnerabilityPanel = SecurityVulnerabilityPanel;
