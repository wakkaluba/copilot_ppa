import { ILogger } from '../logging/ILogger';
import { EventEmitter } from 'vscode';
import { LLMModelInfo, ModelValidationResult, ModelMetrics, ModelConfig, HardwareSpecs, ModelRecommendation } from './types';
import { ModelDiscoveryService } from './services/ModelDiscoveryService';
import { ModelMetricsService } from './services/ModelMetricsService';
import { ModelValidationService } from './services/ModelValidationService';
import { TelemetryService } from '../services/TelemetryService';
export { LLMModelInfo, HardwareSpecs, ModelRecommendation };
export declare class ModelService extends EventEmitter {
    private readonly logger;
    private readonly discoveryService;
    private readonly metricsService;
    private readonly validationService;
    private readonly telemetryService;
    private static instance;
    private readonly models;
    private activeModelId?;
    constructor(logger: ILogger, discoveryService: ModelDiscoveryService, metricsService: ModelMetricsService, validationService: ModelValidationService, telemetryService: TelemetryService);
    static getInstance(logger: ILogger, discoveryService: ModelDiscoveryService, metricsService: ModelMetricsService, validationService: ModelValidationService, telemetryService: TelemetryService): ModelService;
    private setupEventListeners;
    initialize(): Promise<void>;
    getModelInfo(modelId: string): Promise<LLMModelInfo>;
    validateModel(modelId: string): Promise<ModelValidationResult>;
    getModelMetrics(modelId: string): Promise<ModelMetrics>;
    setActiveModel(modelId: string): Promise<void>;
    getActiveModelId(): string | undefined;
    updateModelConfig(modelId: string, config: Partial<ModelConfig>): Promise<void>;
    getAvailableModels(): LLMModelInfo[];
    private handleModelFound;
    private handleMetricsUpdated;
    private handleValidationComplete;
    private handleError;
    dispose(): void;
}
