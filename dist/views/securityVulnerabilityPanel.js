"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.SecurityVulnerabilityPanel = void 0;
const vscode = __importStar(require("vscode"));
const VulnerabilityWebviewService_1 = require("../services/security/VulnerabilityWebviewService");
const VulnerabilityManagerService_1 = require("../services/security/VulnerabilityManagerService");
const VulnerabilityHtmlService_1 = require("../services/security/VulnerabilityHtmlService");
class SecurityVulnerabilityPanel {
    static createOrShow(extensionUri, vulnerabilities, title = 'Security Vulnerabilities') {
        const column = vscode.window.activeTextEditor?.viewColumn;
        if (SecurityVulnerabilityPanel.currentPanel) {
            SecurityVulnerabilityPanel.currentPanel.show(column);
            SecurityVulnerabilityPanel.currentPanel.update(vulnerabilities, title);
            return;
        }
        SecurityVulnerabilityPanel.currentPanel = new SecurityVulnerabilityPanel(extensionUri, vulnerabilities, title, column);
    }
    constructor(extensionUri, vulnerabilities, title, column) {
        this._disposables = [];
        this.webviewService = new VulnerabilityWebviewService_1.VulnerabilityWebviewService(extensionUri, column);
        this.managerService = new VulnerabilityManagerService_1.VulnerabilityManagerService();
        this.htmlService = new VulnerabilityHtmlService_1.VulnerabilityHtmlService();
        this.setupWebview(vulnerabilities, title);
        this.registerEventHandlers();
    }
    setupWebview(vulnerabilities, title) {
        const html = this.htmlService.generateHtml(this.managerService.categorizeVulnerabilities(vulnerabilities));
        this.webviewService.setContent(title, html);
    }
    registerEventHandlers() {
        this._disposables.push(this.webviewService.onDispose(() => this.dispose()), this.webviewService.onDidChangeViewState(() => this.update()), this.webviewService.onDidReceiveMessage(message => this.handleMessage(message)));
    }
    show(column) {
        this.webviewService.show(column);
    }
    update(vulnerabilities, title) {
        if (vulnerabilities && title) {
            this.setupWebview(vulnerabilities, title);
        }
    }
    handleMessage(message) {
        switch (message.command) {
            case 'openUrl':
                if (message.url) {
                    vscode.env.openExternal(vscode.Uri.parse(message.url));
                }
                break;
        }
    }
    dispose() {
        SecurityVulnerabilityPanel.currentPanel = undefined;
        this.webviewService.dispose();
        this._disposables.forEach(d => d.dispose());
        this._disposables = [];
    }
}
exports.SecurityVulnerabilityPanel = SecurityVulnerabilityPanel;
//# sourceMappingURL=securityVulnerabilityPanel.js.map