"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.VulnerabilityReportService = void 0;
const vscode = __importStar(require("vscode"));
const logger_1 = require("../../utils/logger");
const SecurityReportHtmlProvider_1 = require("../providers/SecurityReportHtmlProvider");
class VulnerabilityReportService {
    constructor(context) {
        this.logger = logger_1.Logger.getInstance();
        this.statusBarItem = vscode.window.createStatusBarItem(vscode.StatusBarAlignment.Right, 100);
        context.subscriptions.push(this.statusBarItem);
    }
    updateStatusBar(hasVulnerabilities, count) {
        if (hasVulnerabilities) {
            this.statusBarItem.text = `$(alert) ${count} Security Vulnerabilities`;
            this.statusBarItem.backgroundColor = new vscode.ThemeColor('statusBarItem.warningBackground');
            this.statusBarItem.show();
        }
        else {
            this.statusBarItem.text = '$(shield) Dependencies Secure';
            this.statusBarItem.backgroundColor = undefined;
            this.statusBarItem.show();
        }
    }
    async showReport(result) {
        try {
            const panel = vscode.window.createWebviewPanel('vulnerabilityReport', 'Dependency Vulnerabilities', vscode.ViewColumn.One, { enableScripts: true });
            panel.webview.html = await SecurityReportHtmlProvider_1.SecurityReportHtmlProvider.generateDependencyReport(result);
            panel.webview.onDidReceiveMessage(async (message) => {
                try {
                    switch (message.command) {
                        case 'openPackage':
                            await vscode.env.openExternal(vscode.Uri.parse(message.url));
                            break;
                    }
                }
                catch (error) {
                    this.logger.error('Error handling webview message', error);
                }
            });
        }
        catch (error) {
            this.logger.error('Error showing vulnerability report', error);
            throw error;
        }
    }
    dispose() {
        this.statusBarItem.dispose();
    }
}
exports.VulnerabilityReportService = VulnerabilityReportService;
//# sourceMappingURL=VulnerabilityReportService.js.map