"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SecurityVulnerabilityDatabase = void 0;
const node_fetch_1 = __importDefault(require("node-fetch"));
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
/**
 * Database for caching and managing security vulnerability information
 */
class SecurityVulnerabilityDatabase {
    constructor(context) {
        this.context = context;
        this.cache = new Map();
        this.updateInterval = 1000 * 60 * 60 * 24; // 24 hours
        this.lastUpdate = 0;
        this.dbPath = path.join(context.globalStoragePath, 'vulnerability-db.json');
        this.loadDatabase();
    }
    /**
     * Check a package for known vulnerabilities
     */
    async checkPackage(name, version) {
        await this.ensureUpdated();
        const key = `${name}@${version}`;
        return this.cache.get(key) || [];
    }
    /**
     * Get detailed information about a specific vulnerability
     */
    async getVulnerabilityDetails(vulnId) {
        await this.ensureUpdated();
        for (const vulns of this.cache.values()) {
            const found = vulns.find(v => v.id === vulnId);
            if (found) {
                return found;
            }
        }
        return undefined;
    }
    /**
     * Ensure the database is up to date
     */
    async ensureUpdated() {
        const now = Date.now();
        if (now - this.lastUpdate > this.updateInterval) {
            await this.updateDatabase();
        }
    }
    /**
     * Load the vulnerability database from disk
     */
    loadDatabase() {
        try {
            if (fs.existsSync(this.dbPath)) {
                const data = JSON.parse(fs.readFileSync(this.dbPath, 'utf8'));
                this.lastUpdate = data.lastUpdate;
                for (const [key, vulns] of Object.entries(data.vulnerabilities)) {
                    this.cache.set(key, vulns);
                }
            }
        }
        catch (error) {
            console.error('Error loading vulnerability database:', error);
        }
    }
    /**
     * Update the vulnerability database from online sources
     */
    async updateDatabase() {
        try {
            // Fetch from multiple sources
            const [npmVulns, githubVulns] = await Promise.all([
                this.fetchNpmVulnerabilities(),
                this.fetchGithubSecurityAdvisories()
            ]);
            // Merge vulnerabilities
            for (const vuln of [...npmVulns, ...githubVulns]) {
                const key = `${vuln.packageName}@${vuln.version}`;
                const existing = this.cache.get(key) || [];
                existing.push(vuln);
                this.cache.set(key, existing);
            }
            // Save to disk
            await this.saveDatabase();
            this.lastUpdate = Date.now();
        }
        catch (error) {
            console.error('Error updating vulnerability database:', error);
        }
    }
    /**
     * Fetch vulnerabilities from npm security advisory
     */
    async fetchNpmVulnerabilities() {
        try {
            const response = await (0, node_fetch_1.default)('https://registry.npmjs.org/-/npm/v1/security/advisories');
            const data = await response.json();
            return this.parseNpmVulnerabilities(data);
        }
        catch {
            return [];
        }
    }
    /**
     * Fetch vulnerabilities from GitHub Security Advisory
     */
    async fetchGithubSecurityAdvisories() {
        try {
            const response = await (0, node_fetch_1.default)('https://api.github.com/repos/github/advisory-database/contents/advisories/github-reviewed');
            const data = await response.json();
            return this.parseGithubAdvisories(data);
        }
        catch {
            return [];
        }
    }
    /**
     * Parse npm vulnerability data
     */
    parseNpmVulnerabilities(data) {
        const vulns = [];
        for (const adv of data.objects || []) {
            vulns.push({
                id: adv.id,
                title: adv.title,
                description: adv.description,
                severity: this.mapSeverity(adv.severity),
                vulnerableVersions: adv.vulnerable_versions,
                patchedVersions: adv.patched_versions,
                packageName: adv.module_name,
                version: adv.version,
                references: adv.references,
                recommendation: adv.recommendation,
                publishedDate: adv.created,
                cwe: adv.cwe,
                cvss: adv.cvss
            });
        }
        return vulns;
    }
    /**
     * Parse GitHub security advisory data
     */
    parseGithubAdvisories(data) {
        const vulns = [];
        for (const adv of data || []) {
            try {
                const content = JSON.parse(Buffer.from(adv.content, 'base64').toString());
                vulns.push({
                    id: content.id,
                    title: content.summary,
                    description: content.details,
                    severity: this.mapSeverity(content.severity),
                    vulnerableVersions: content.affected?.map((a) => a.range).join(', '),
                    patchedVersions: content.affected?.map((a) => a.fixed).filter(Boolean).join(', '),
                    packageName: content.affected?.map((a) => a.package).join(', '),
                    version: content.affected?.map((a) => a.range).join(', '),
                    references: content.references,
                    recommendation: content.solution,
                    publishedDate: content.published,
                    cwe: content.cwe,
                    cvss: content.cvss
                });
            }
            catch (error) {
                console.error('Error parsing GitHub advisory:', error);
            }
        }
        return vulns;
    }
    /**
     * Map severity strings to standard levels
     */
    mapSeverity(severity) {
        switch (severity?.toLowerCase()) {
            case 'critical': return 'critical';
            case 'high': return 'high';
            case 'moderate':
            case 'medium': return 'medium';
            default: return 'low';
        }
    }
    /**
     * Save the vulnerability database to disk
     */
    async saveDatabase() {
        try {
            const data = {
                lastUpdate: Date.now(),
                vulnerabilities: Object.fromEntries(this.cache)
            };
            // Ensure directory exists
            const dir = path.dirname(this.dbPath);
            if (!fs.existsSync(dir)) {
                fs.mkdirSync(dir, { recursive: true });
            }
            fs.writeFileSync(this.dbPath, JSON.stringify(data, null, 2));
        }
        catch (error) {
            console.error('Error saving vulnerability database:', error);
        }
    }
}
exports.SecurityVulnerabilityDatabase = SecurityVulnerabilityDatabase;
//# sourceMappingURL=SecurityVulnerabilityDatabase.js.map