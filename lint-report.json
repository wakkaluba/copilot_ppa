
> copilot-ppa@0.1.4 lint
> eslint . --ext .js,.ts,.tsx --format json

[{"filePath":"D:\\___coding\\tools\\copilot_ppa\\src\\buildTools\\optimization\\types.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":18,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[374,377],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[374,377],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export interface IBuildScriptInfo {\n  name: string;\n  command: string;\n}\n\nexport interface IBuildScriptOptimization {\n  title: string;\n  description: string;\n  benefit: string;\n  before: string;\n  after: string;\n  complexity: 'low' | 'medium' | 'high';\n  requiredPackages?: string[];\n}\n\nexport interface IOptimizationContext {\n  scriptInfo: IBuildScriptInfo;\n  packageJson: any;\n  analysis: {\n    hasTypeScript: boolean;\n    hasWebpack: boolean;\n    hasRollup: boolean;\n    hasVite: boolean;\n    isParallel: boolean;\n    hasEnvironmentVars: boolean;\n    hasCleaning: boolean;\n    hasCache: boolean;\n  };\n}\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/semi","replacedBy":["@stylistic/ts/semi"]}]},{"filePath":"D:\\___coding\\tools\\copilot_ppa\\src\\buildTools\\optimization\\types\\index.ts","messages":[{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Interface name `BuildScriptInfo` must match the RegExp: /^I[A-Z]/u","line":1,"column":18,"nodeType":"Identifier","messageId":"satisfyCustom","endLine":1,"endColumn":33},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Interface name `BuildScriptOptimization` must match the RegExp: /^I[A-Z]/u","line":6,"column":18,"nodeType":"Identifier","messageId":"satisfyCustom","endLine":6,"endColumn":41},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Interface name `OptimizationContext` must match the RegExp: /^I[A-Z]/u","line":16,"column":18,"nodeType":"Identifier","messageId":"satisfyCustom","endLine":16,"endColumn":37},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":18,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[370,373],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[370,373],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export interface BuildScriptInfo {\n  name: string;\n  command: string;\n}\n\nexport interface BuildScriptOptimization {\n  title: string;\n  description: string;\n  benefit: string;\n  before: string;\n  after: string;\n  complexity: 'low' | 'medium' | 'high';\n  requiredPackages?: string[];\n}\n\nexport interface OptimizationContext {\n  scriptInfo: BuildScriptInfo;\n  packageJson: any;\n  analysis: {\n    hasTypeScript: boolean;\n    hasWebpack: boolean;\n    hasRollup: boolean;\n    hasVite: boolean;\n    isParallel: boolean;\n    hasEnvironmentVars: boolean;\n    hasCleaning: boolean;\n    hasCache: boolean;\n  };\n}\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/semi","replacedBy":["@stylistic/ts/semi"]}]},{"filePath":"D:\\___coding\\tools\\copilot_ppa\\src\\buildTools\\rollup\\types.ts","messages":[{"ruleId":"prettier/prettier","severity":2,"message":"Delete `··`","line":2,"column":3,"nodeType":null,"messageId":"delete","endLine":2,"endColumn":5,"fix":{"range":[16,18],"text":""}},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `··`","line":3,"column":3,"nodeType":null,"messageId":"delete","endLine":3,"endColumn":5,"fix":{"range":[67,69],"text":""}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `····` with `··`","line":4,"column":1,"nodeType":null,"messageId":"replace","endLine":4,"endColumn":5,"fix":{"range":[87,91],"text":"  "}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `··IValidationWarning` with `IValidationWarning,`","line":5,"column":3,"nodeType":null,"messageId":"replace","endLine":5,"endColumn":23,"fix":{"range":[112,132],"text":"IValidationWarning,"}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":31,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":31,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[594,597],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[594,597],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":70,"column":6,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":70,"endColumn":9,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1709,1712],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1709,1712],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":137,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":137,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3745,3748],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3745,3748],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":161,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":161,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4467,4470],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4467,4470],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Interface name `RollupOptions` must match the RegExp: /^I[A-Z]/u","line":186,"column":18,"nodeType":"Identifier","messageId":"satisfyCustom","endLine":186,"endColumn":31},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":188,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":188,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5152,5155],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5152,5155],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":189,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":189,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5169,5172],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5169,5172],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":190,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":190,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5193,5196],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5193,5196],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":12,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":4,"fixableWarningCount":0,"source":"export type {\n    IOptimizationSuggestion as ConfigOptimization,\n    IValidationError,\n    IValidationResult,\n    IValidationWarning\n} from '../types';\n\nexport interface IRollupInput {\n  name: string;\n  path: string;\n}\n\nexport interface IRollupOutput {\n  format: string;\n  file: string;\n  name?: string;\n  sourcemap?: boolean;\n}\n\nexport interface IRollupPlugin {\n  name: string;\n  description: string;\n}\n\nexport interface IRollupConfigAnalysis {\n  input: IRollupInput[];\n  output: IRollupOutput[];\n  plugins: IRollupPlugin[];\n  external: string[];\n  content: string;\n  optimizationSuggestions: any[]; // Adjusted to remove RollupOptimization\n}\n\n/**\n * Interface for the service that detects Rollup configuration files\n */\nexport interface IRollupConfigDetector {\n  /**\n   * Detects Rollup configuration files in the given directory\n   * @throws {ConfigValidationError} If workspace path is invalid\n   * @throws {Error} If detection fails\n   */\n  detectConfigs(workspacePath: string): Promise<string[]>;\n}\n\n/**\n * Interface for the service that analyzes Rollup configuration files\n */\nexport interface IRollupConfigAnalyzer {\n  /**\n   * Analyzes a Rollup configuration file\n   * @throws {ConfigValidationError} If the config is invalid\n   * @throws {Error} If analysis fails\n   */\n  analyze(configPath: string): Promise<IRollupConfigAnalysis>;\n}\n\n/**\n * Interface for the service that generates optimization suggestions for Rollup configurations\n */\nexport interface IRollupOptimizationService {\n  /**\n   * Generates optimization suggestions for a Rollup configuration\n   */\n  generateOptimizations(\n    content: string,\n    inputs: IRollupInput[],\n    outputFormats: string[],\n    pluginNames: string[],\n  ): any[]; // Adjusted to remove RollupOptimization\n}\n\n/**\n * Interface for the service that validates Rollup configuration files and paths\n */\nexport interface IRollupConfigValidationService {\n  /**\n   * Validates the configuration analysis results\n   * @throws {ConfigValidationError} If validation fails\n   */\n  validateConfig(analysis: IRollupConfigAnalysis): void;\n\n  /**\n   * Validates a workspace path\n   * @throws {ConfigValidationError} If the path is invalid\n   */\n  validateWorkspacePath(workspacePath: string): void;\n\n  /**\n   * Validates a config file path\n   * @throws {ConfigValidationError} If the path is invalid\n   */\n  validateConfigPath(configPath: string): void;\n\n  /**\n   * Validates if a config file exists\n   * @param configPath Path to check\n   */\n  validateFileExists(configPath: string): Promise<boolean>;\n\n  /**\n   * Validates if a config file is syntactically correct\n   * @param configPath Path to the rollup config file\n   */\n  validateSyntax(configPath: string): Promise<boolean>;\n\n  /**\n   * Performs a deep validation of rollup configuration\n   * @param config Rollup configuration object\n   */\n  validateConfig(config: RollupOptions): Promise<void>;\n}\n\n/**\n * Interface for the Rollup configuration manager\n */\nexport interface IRollupConfigManager {\n  /**\n   * Detects Rollup configuration files in the given directory\n   * @throws {ConfigValidationError} If workspace path is invalid\n   * @throws {Error} If detection fails\n   */\n  detectConfigs(workspacePath: string): Promise<string[]>;\n\n  /**\n   * Analyzes a Rollup configuration file and validates its structure\n   * @throws {ConfigValidationError} If the configuration is invalid\n   * @throws {Error} If analysis fails\n   */\n  analyzeConfig(configPath: string): Promise<IRollupConfigAnalysis>;\n\n  /**\n   * Generates optimization suggestions for a Rollup configuration\n   * @throws {ConfigValidationError} If the config path is invalid\n   * @throws {Error} If optimization generation fails\n   */\n  generateOptimizations(configPath: string): Promise<any[]>; // Adjusted to remove RollupOptimization\n\n  /**\n   * Validates a rollup configuration file\n   * @param configPath Path to the rollup config file\n   */\n  validateConfig(configPath: string): Promise<boolean>;\n\n  /**\n   * Detects rollup configuration files in a directory\n   * @param directory Directory to search in\n   */\n  detectConfigs(directory: string): Promise<string[]>;\n\n  /**\n   * Loads a rollup configuration\n   * @param configPath Path to the rollup config file\n   */\n  loadConfig(configPath: string): Promise<RollupOptions>;\n\n  /**\n   * Generates optimization suggestions for a rollup config\n   * @param configPath Path to the rollup config file\n   */\n  generateOptimizations(configPath: string): Promise<any[]>; // Adjusted to remove RollupOptimization\n}\n\n/**\n * Interface for the service that provides UI operations for Rollup configurations\n */\nexport interface IRollupConfigUIService {\n  /**\n   * Opens a rollup configuration file in the editor\n   */\n  openConfig(): Promise<void>;\n\n  /**\n   * Creates a new rollup configuration file\n   */\n  createNewConfig(): Promise<void>;\n\n  /**\n   * Suggests optimizations for a rollup config\n   * @param configPath Path to the rollup config file\n   */\n  suggestOptimizations(configPath: string): Promise<void>;\n}\n\n// Fallback RollupOptions type if 'rollup' is not installed\nexport interface RollupOptions {\n  input?: string | string[];\n  output?: any;\n  plugins?: any[];\n  [key: string]: any;\n}\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/semi","replacedBy":["@stylistic/ts/semi"]}]},{"filePath":"D:\\___coding\\tools\\copilot_ppa\\src\\buildTools\\rollup\\types\\index.ts","messages":[{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Interface name `RollupInput` must match the RegExp: /^I[A-Z]/u","line":4,"column":18,"nodeType":"Identifier","messageId":"satisfyCustom","endLine":4,"endColumn":29},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Interface name `RollupOutput` must match the RegExp: /^I[A-Z]/u","line":16,"column":18,"nodeType":"Identifier","messageId":"satisfyCustom","endLine":16,"endColumn":30},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Interface name `RollupPlugin` must match the RegExp: /^I[A-Z]/u","line":32,"column":18,"nodeType":"Identifier","messageId":"satisfyCustom","endLine":32,"endColumn":30},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Interface name `RollupOptimization` must match the RegExp: /^I[A-Z]/u","line":42,"column":18,"nodeType":"Identifier","messageId":"satisfyCustom","endLine":42,"endColumn":36},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Interface name `RollupConfigAnalysis` must match the RegExp: /^I[A-Z]/u","line":54,"column":18,"nodeType":"Identifier","messageId":"satisfyCustom","endLine":54,"endColumn":38}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Represents an input configuration in a rollup configuration\n */\nexport interface RollupInput {\n  /** The name of the input entry point */\n  name: string;\n  /** The path to the input file */\n  path: string;\n  /** External dependencies */\n  external?: string[];\n}\n\n/**\n * Represents an output configuration in a rollup configuration\n */\nexport interface RollupOutput {\n  /** The output file path */\n  file?: string;\n  /** The output directory path */\n  dir?: string;\n  /** The output format (e.g., 'es', 'cjs', 'umd', etc.) */\n  format: string;\n  /** The name for UMD bundles */\n  name?: string;\n  /** Source map generation options */\n  sourcemap?: boolean | 'inline' | 'hidden';\n}\n\n/**\n * Represents a plugin in a rollup configuration\n */\nexport interface RollupPlugin {\n  /** The name of the plugin */\n  name: string;\n  /** A description of what the plugin does */\n  description: string;\n}\n\n/**\n * Represents an optimization suggestion for a rollup configuration\n */\nexport interface RollupOptimization {\n  /** The title of the optimization */\n  title: string;\n  /** A description of what the optimization does and why it's beneficial */\n  description: string;\n  /** The code snippet to implement the optimization */\n  code: string;\n}\n\n/**\n * Represents the complete analysis of a rollup configuration file\n */\nexport interface RollupConfigAnalysis {\n  /** The input configurations */\n  input: RollupInput[];\n  /** The output configurations */\n  output: RollupOutput[];\n  /** The plugins being used */\n  plugins: RollupPlugin[];\n  /** The raw content of the config file */\n  content: string;\n  /** Generated optimization suggestions */\n  optimizationSuggestions: string[];\n}\n\n/**\n * Interface for the rollup configuration manager\n */\nexport interface IRollupConfigManager {\n  detectConfigs(workspacePath: string): Promise<string[]>;\n  analyzeConfig(configPath: string): Promise<RollupConfigAnalysis>;\n  validateConfig(configPath: string): Promise<boolean>;\n  generateOptimizations(configPath: string): Promise<string[]>;\n}\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/semi","replacedBy":["@stylistic/ts/semi"]}]},{"filePath":"D:\\___coding\\tools\\copilot_ppa\\src\\buildTools\\types.ts","messages":[{"ruleId":"prettier/prettier","severity":2,"message":"Delete `⏎`","line":1,"column":1,"nodeType":null,"messageId":"delete","endLine":2,"endColumn":1,"fix":{"range":[0,1],"text":""}}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"\n/**\n * Supported build tool types\n */\nexport enum BuildToolType {\n  Webpack = 'webpack',\n  Rollup = 'rollup',\n  Vite = 'vite',\n}\n\n/**\n * Base interface for any build configuration analysis\n */\nexport interface IBuildConfigAnalysis {\n  configPath: string;\n  optimizationSuggestions: IOptimizationSuggestion[];\n}\n\n/**\n * Optimization suggestion for build config\n */\nexport interface IOptimizationSuggestion {\n  title: string;\n  description: string;\n  code: string;\n  benefit?: string;\n  complexity: 'low' | 'medium' | 'high';\n  beforeAfter?: {\n    before: string;\n    after: string;\n  };\n}\n\n/**\n * Interface for build script optimization\n */\nexport interface IBuildScriptOptimization {\n  title: string;\n  description: string;\n  benefit: string;\n  before: string;\n  after: string;\n}\n\n/**\n * Interface for bundle analysis results\n */\nexport interface IBundleAnalysisResult {\n  totalSize: number;\n  jsSize: number;\n  cssSize: number;\n  imageSize: number;\n  otherSize: number;\n  files: IBundleFile[];\n  recommendations: IBundleRecommendation[];\n}\n\n/**\n * Interface for individual file in a bundle analysis\n */\nexport interface IBundleFile {\n  path: string;\n  size: number;\n  type: 'js' | 'css' | 'image' | 'other';\n}\n\n/**\n * Interface for bundle optimization recommendation\n */\nexport interface IBundleRecommendation {\n  title: string;\n  description: string;\n  potentialSavings?: number;\n}\n\n/**\n * Interface to be implemented by all build tool config managers\n */\nexport interface IBuildToolConfigManager {\n  detectConfigs(workspacePath: string): Promise<string[]>;\n  analyzeConfig(configPath: string): Promise<IBuildConfigAnalysis>;\n  generateOptimizations(configPath: string): Promise<IOptimizationSuggestion[]>;\n  validateConfig?(configPath: string): Promise<IValidationResult>;\n}\n\n/**\n * Interface for configuration validation results\n */\nexport interface IValidationResult {\n  isValid: boolean;\n  errors: IValidationError[];\n  warnings: IValidationWarning[];\n}\n\n/**\n * Interface for validation errors\n */\nexport interface IValidationError {\n  message: string;\n  line?: number;\n  column?: number;\n  severity: 'error';\n}\n\n/**\n * Interface for validation warnings\n */\nexport interface IValidationWarning {\n  message: string;\n  line?: number;\n  column?: number;\n  severity: 'warning';\n}\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/semi","replacedBy":["@stylistic/ts/semi"]}]},{"filePath":"D:\\___coding\\tools\\copilot_ppa\\src\\buildTools\\vite\\types\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/semi","replacedBy":["@stylistic/ts/semi"]}]},{"filePath":"D:\\___coding\\tools\\copilot_ppa\\src\\buildTools\\webpack\\services\\WebpackConfigAnalyzer.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/semi","replacedBy":["@stylistic/ts/semi"]}]},{"filePath":"D:\\___coding\\tools\\copilot_ppa\\src\\buildTools\\webpack\\services\\WebpackConfigDetector.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/semi","replacedBy":["@stylistic/ts/semi"]}]},{"filePath":"D:\\___coding\\tools\\copilot_ppa\\src\\buildTools\\webpack\\services\\WebpackOptimizationService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/semi","replacedBy":["@stylistic/ts/semi"]}]},{"filePath":"D:\\___coding\\tools\\copilot_ppa\\src\\buildTools\\webpack\\services\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/semi","replacedBy":["@stylistic/ts/semi"]}]},{"filePath":"D:\\___coding\\tools\\copilot_ppa\\src\\buildTools\\webpack\\types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/semi","replacedBy":["@stylistic/ts/semi"]}]},{"filePath":"D:\\___coding\\tools\\copilot_ppa\\src\\buildTools\\webpack\\types\\index.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":77,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":77,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1959,1962],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1959,1962],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":78,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":78,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1976,1979],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1976,1979],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":79,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":79,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1992,1995],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1992,1995],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":80,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":80,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2010,2013],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2010,2013],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Represents an entry point in a webpack configuration\n */\nexport interface IWebpackEntry {\n  /** The name of the entry point */\n  name: string;\n  /** The path to the entry point file */\n  path: string;\n}\n\n/**\n * Represents the output configuration in a webpack configuration\n */\nexport interface IWebpackOutput {\n  /** The output directory path */\n  path: string;\n  /** The output filename pattern */\n  filename: string;\n  /** Optional public path for assets */\n  publicPath?: string;\n}\n\n/**\n * Represents a loader configuration in a webpack configuration\n */\nexport interface IWebpackLoader {\n  /** The name of the loader */\n  name: string;\n  /** The file pattern test for the loader */\n  test: string;\n  /** Loader-specific options */\n  options: Record<string, unknown>;\n}\n\n/**\n * Represents a plugin in a webpack configuration\n */\nexport interface IWebpackPlugin {\n  /** The name of the plugin */\n  name: string;\n  /** A description of what the plugin does */\n  description: string;\n}\n\n/**\n * Represents an optimization suggestion for a webpack configuration\n */\nexport interface IWebpackOptimization {\n  /** The title of the optimization */\n  title: string;\n  /** A description of what the optimization does and why it's beneficial */\n  description: string;\n  /** The code snippet to implement the optimization */\n  code: string;\n}\n\n/**\n * Represents the complete analysis of a webpack configuration file\n */\nexport interface IWebpackConfigAnalysis {\n  /** The entry points defined in the config */\n  entryPoints: IWebpackEntry[];\n  /** The output configuration */\n  output: IWebpackOutput;\n  /** The loaders configured */\n  loaders: IWebpackLoader[];\n  /** The plugins being used */\n  plugins: IWebpackPlugin[];\n  /** The raw content of the config file */\n  content: string;\n  /** Generated optimization suggestions */\n  optimizationSuggestions: IWebpackOptimization[];\n}\n\nexport interface IWebpackConfigContent {\n  content: string;\n  entryPoints: any[];\n  output: any;\n  loaders: any[];\n  plugins: any[];\n}\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/semi","replacedBy":["@stylistic/ts/semi"]}]},{"filePath":"D:\\___coding\\tools\\copilot_ppa\\src\\codeEditor\\types.ts","messages":[{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Interface name `CodeLink` must match the RegExp: /^I[A-Z]/u","line":15,"column":18,"nodeType":"Identifier","messageId":"satisfyCustom","endLine":15,"endColumn":26}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export interface ICodeExecutor {\n  executeSelectedCode(): Promise<void>;\n}\n\nexport interface ICodeNavigator {\n  showCodeOverview(): Promise<void>;\n  findReferences(): Promise<void>;\n}\n\nexport interface ICodeLinker {\n  createCodeLink(): Promise<void>;\n  navigateCodeLink(): Promise<void>;\n}\n\nexport interface CodeLink {\n  source: {\n    uri: string;\n    position: {\n      line: number;\n      character: number;\n    };\n    text: string;\n  };\n  target: {\n    uri: string;\n    position?: {\n      line: number;\n      character: number;\n    };\n  };\n}\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/semi","replacedBy":["@stylistic/ts/semi"]}]},{"filePath":"D:\\___coding\\tools\\copilot_ppa\\src\\commands\\index.ts","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":2,"message":"Missing return type on function.","line":2,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":2,"endColumn":33}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Minimal stub for missing file to fix import errors\nexport function registerCommands() {}\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/semi","replacedBy":["@stylistic/ts/semi"]}]},{"filePath":"D:\\___coding\\tools\\copilot_ppa\\src\\commands\\types.ts","messages":[{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Interface name `CommandHandler` must match the RegExp: /^I[A-Z]/u","line":1,"column":18,"nodeType":"Identifier","messageId":"satisfyCustom","endLine":1,"endColumn":32},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":2,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":2,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[53,56],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[53,56],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Interface name `CommandRegistry` must match the RegExp: /^I[A-Z]/u","line":5,"column":18,"nodeType":"Identifier","messageId":"satisfyCustom","endLine":5,"endColumn":33},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Interface name `AgentCommands` must match the RegExp: /^I[A-Z]/u","line":10,"column":18,"nodeType":"Identifier","messageId":"satisfyCustom","endLine":10,"endColumn":31},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Interface name `ConfigurationCommands` must match the RegExp: /^I[A-Z]/u","line":16,"column":18,"nodeType":"Identifier","messageId":"satisfyCustom","endLine":16,"endColumn":39},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Interface name `VisualizationCommands` must match the RegExp: /^I[A-Z]/u","line":21,"column":18,"nodeType":"Identifier","messageId":"satisfyCustom","endLine":21,"endColumn":39},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Interface name `MenuCommands` must match the RegExp: /^I[A-Z]/u","line":27,"column":18,"nodeType":"Identifier","messageId":"satisfyCustom","endLine":27,"endColumn":30}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export interface CommandHandler {\n  execute(...args: any[]): Promise<void>;\n}\n\nexport interface CommandRegistry {\n  registerCommand(command: string, handler: CommandHandler): void;\n  registerCommands(): Promise<void>;\n}\n\nexport interface AgentCommands {\n  startAgent(): Promise<void>;\n  stopAgent(): Promise<void>;\n  restartAgent(): Promise<void>;\n}\n\nexport interface ConfigurationCommands {\n  configureModel(): Promise<void>;\n  clearConversation(): Promise<void>;\n}\n\nexport interface VisualizationCommands {\n  showMemoryVisualization(): Promise<void>;\n  showPerformanceMetrics(): Promise<void>;\n  exportMetrics(): Promise<void>;\n}\n\nexport interface MenuCommands {\n  openMenu(): Promise<void>;\n  showMetrics(): Promise<void>;\n}\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/semi","replacedBy":["@stylistic/ts/semi"]}]},{"filePath":"D:\\___coding\\tools\\copilot_ppa\\src\\common\\logging\\index.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":2,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":2,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[61,64],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[61,64],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":3,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":3,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[108,111],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[108,111],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":4,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":4,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[155,158],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[155,158],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":5,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":5,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[203,206],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[203,206],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export interface ILogger {\n  debug(message: string, ...args: any[]): void;\n  info(message: string, ...args: any[]): void;\n  warn(message: string, ...args: any[]): void;\n  error(message: string, ...args: any[]): void;\n}\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/semi","replacedBy":["@stylistic/ts/semi"]}]},{"filePath":"D:\\___coding\\tools\\copilot_ppa\\src\\extension.ts","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":2,"message":"Missing return type on function.","line":11,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":11,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":13,"column":3,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":13,"endColumn":37},{"ruleId":"@typescript-eslint/await-thenable","severity":2,"message":"Unexpected `await` of a non-Promise (non-\"Thenable\") value.","line":16,"column":3,"nodeType":"AwaitExpression","messageId":"await","endLine":16,"endColumn":36,"suggestions":[{"messageId":"removeAwait","fix":{"range":[717,722],"text":""},"desc":"Remove unnecessary `await`."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":17,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":17,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":17,"column":20,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":17,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `ServiceRegistry`.","line":21,"column":26,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":21,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `ServiceRegistry`.","line":22,"column":27,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":22,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":25,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":25,"endColumn":72},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":25,"column":29,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":25,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .get on an `any` value.","line":25,"column":38,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":25,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":26,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":26,"endColumn":60},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'hostManager' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":26,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":26,"endColumn":20},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":26,"column":23,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":26,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .get on an `any` value.","line":26,"column":32,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":26,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":27,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":27,"endColumn":66},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'sessionManager' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":27,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":27,"endColumn":23},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":27,"column":26,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":27,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .get on an `any` value.","line":27,"column":35,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":27,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":32,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":32,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":32,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":32,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .connectToLLM on an `any` value.","line":32,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":32,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .catch on an `any` value.","line":32,"column":38,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":32,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":41,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":45,"endColumn":5},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'agent' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":41,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":41,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe construction of an any type value.","line":41,"column":17,"nodeType":"NewExpression","messageId":"unsafeNew","endLine":45,"endColumn":5},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":49,"column":5,"nodeType":"Property","messageId":"anyAssignment","endLine":49,"endColumn":30},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":2,"message":"Missing return type on function.","line":53,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":53,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":54,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":54,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":54,"column":20,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":54,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":55,"column":3,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":55,"endColumn":19},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .dispose on an `any` value.","line":55,"column":12,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":55,"endColumn":19}],"suppressedMessages":[],"errorCount":31,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as vscode from 'vscode';\nimport { Agent } from './agents/Agent';\nimport { registerCommands } from './commands';\nimport { AgentResponseEnhancer } from './services/AgentResponseEnhancer';\nimport { ConversationHistory } from './services/ConversationHistory';\nimport { initializeServices, ServiceRegistry, Services } from './services/ServiceRegistry';\nimport { UserConfirmationService } from './services/UserConfirmationService';\nimport { setupStatusBar } from './statusBar';\nimport { setupWebviews } from './webview';\n\nexport async function activate(context: vscode.ExtensionContext) {\n  // Initialize user confirmation service\n  UserConfirmationService.initialize(context);\n\n  // Initialize service registry\n  await initializeServices(context);\n  const registry = ServiceRegistry.getInstance();\n\n  // Setup core extension components\n  registerCommands(context, registry);\n  setupWebviews(context, registry);\n  setupStatusBar(context, registry);\n\n  // Get LLM services\n  const connectionManager = registry.get(Services.LLMConnectionManager);\n  const hostManager = registry.get(Services.LLMHostManager);\n  const sessionManager = registry.get(Services.LLMSessionManager);\n\n  // Auto-connect if configured\n  const config = vscode.workspace.getConfiguration('copilot-ppa');\n  if (config.get<boolean>('autoConnect', false)) {\n    connectionManager.connectToLLM().catch((error) => {\n      console.error('Auto-connect failed:', error);\n    });\n  }\n\n  const conversationHistory = new ConversationHistory(context);\n  const responseEnhancer = new AgentResponseEnhancer(conversationHistory);\n  context.subscriptions.push(responseEnhancer);\n\n  const agent = new Agent(context, {\n    // ...existing code...\n    responseEnhancer,\n    // ...existing code...\n  });\n  // ...existing code...\n\n  return {\n    serviceRegistry: registry,\n  };\n}\n\nexport function deactivate() {\n  const registry = ServiceRegistry.getInstance();\n  registry.dispose();\n}\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/semi","replacedBy":["@stylistic/ts/semi"]}]},{"filePath":"D:\\___coding\\tools\\copilot_ppa\\src\\i18n\\index.ts","messages":[{"ruleId":"@typescript-eslint/no-redundant-type-constituents","severity":2,"message":"'any' overrides all other types in this union type.","line":8,"column":26,"nodeType":"TSTypeReference","messageId":"overrides","endLine":8,"endColumn":45},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type cast is required.","line":16,"column":8,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":16,"endColumn":27,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[512,531],"text":"(Boolean(localizationService))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":17,"column":5,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":17,"endColumn":59},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe construction of an any type value.","line":17,"column":27,"nodeType":"NewExpression","messageId":"unsafeNew","endLine":17,"endColumn":59},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type cast is required.","line":34,"column":8,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":34,"endColumn":27,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[985,1004],"text":"(Boolean(localizationService))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of an `any` typed value.","line":37,"column":3,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":37,"endColumn":67},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":37,"column":10,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":37,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .getString on an `any` value.","line":37,"column":30,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":37,"endColumn":39},{"ruleId":"@typescript-eslint/no-redundant-type-constituents","severity":2,"message":"'any' overrides all other types in this union type.","line":83,"column":47,"nodeType":"TSTypeReference","messageId":"overrides","endLine":83,"endColumn":64},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type cast is required.","line":84,"column":8,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":84,"endColumn":27,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1848,1867],"text":"(Boolean(localizationService))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":87,"column":10,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":87,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .detectLanguage on an `any` value.","line":87,"column":30,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":87,"endColumn":44}],"suppressedMessages":[],"errorCount":12,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as vscode from 'vscode';\nimport { LocalizationService, SupportedLanguage } from './localization';\n\n// Export types and classes\nexport * from './localization';\n\n// Global instance of the localization service\nlet localizationService: LocalizationService | null = null;\n\n/**\n * Initialize the localization module\n * @param context The extension context\n * @returns The localization service instance\n */\nexport function initializeLocalization(context: vscode.ExtensionContext): LocalizationService {\n  if (!localizationService) {\n    localizationService = new LocalizationService(context);\n  }\n  return localizationService;\n}\n\n/**\n * Get localized string by key\n * @param key The key of the string to get\n * @param defaultValue Default value if the key is not found\n * @param params Optional parameters to format the string\n * @returns The localized string\n */\nexport function localize(\n  key: string,\n  defaultValue: string,\n  params?: Record<string, string>,\n): string {\n  if (!localizationService) {\n    return defaultValue;\n  }\n  return localizationService.getString(key, defaultValue, params);\n}\n\n/**\n * Supported languages in the application\n */\nexport type SupportedLanguage =\n  | 'en'\n  | 'es'\n  | 'de'\n  | 'fr'\n  | 'it'\n  | 'pt'\n  | 'ja'\n  | 'ko'\n  | 'zh'\n  | 'ru'\n  | 'ar'\n  | 'tr'\n  | 'pl'\n  | 'nl'\n  | 'sv'\n  | 'no'\n  | 'fi'\n  | 'da'\n  | 'cs'\n  | 'uk'\n  | 'hu'\n  | 'th'\n  | 'el';\n\n/**\n * Gets the current UI language\n * @returns Current language code\n */\nexport function getCurrentLanguage(): SupportedLanguage {\n  // In a real implementation, this would get the language from VSCode settings\n  // or from the user's OS settings\n  return 'en';\n}\n\n/**\n * Detect language of text\n * @param text Text to analyze\n * @returns Detected language or null\n */\nexport function detectLanguage(text: string): SupportedLanguage | null {\n  if (!localizationService) {\n    return null;\n  }\n  return localizationService.detectLanguage(text);\n}\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/semi","replacedBy":["@stylistic/ts/semi"]}]},{"filePath":"D:\\___coding\\tools\\copilot_ppa\\src\\llm\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/semi","replacedBy":["@stylistic/ts/semi"]}]},{"filePath":"D:\\___coding\\tools\\copilot_ppa\\src\\llm\\services\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/semi","replacedBy":["@stylistic/ts/semi"]}]},{"filePath":"D:\\___coding\\tools\\copilot_ppa\\src\\llm\\types.ts","messages":[{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Interface name `LLMRequest` must match the RegExp: /^I[A-Z]/u","line":3,"column":18,"nodeType":"Identifier","messageId":"satisfyCustom","endLine":3,"endColumn":28},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Interface name `LLMRequestOptions` must match the RegExp: /^I[A-Z]/u","line":14,"column":18,"nodeType":"Identifier","messageId":"satisfyCustom","endLine":14,"endColumn":35},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Interface name `LLMRequestError` must match the RegExp: /^I[A-Z]/u","line":39,"column":18,"nodeType":"Identifier","messageId":"satisfyCustom","endLine":39,"endColumn":33},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Interface name `LLMResponse` must match the RegExp: /^I[A-Z]/u","line":45,"column":18,"nodeType":"Identifier","messageId":"satisfyCustom","endLine":45,"endColumn":29},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Interface name `LLMResponseOptions` must match the RegExp: /^I[A-Z]/u","line":59,"column":18,"nodeType":"Identifier","messageId":"satisfyCustom","endLine":59,"endColumn":36},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Interface name `LLMResponseError` must match the RegExp: /^I[A-Z]/u","line":65,"column":18,"nodeType":"Identifier","messageId":"satisfyCustom","endLine":65,"endColumn":34},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Interface name `TokenUsage` must match the RegExp: /^I[A-Z]/u","line":71,"column":18,"nodeType":"Identifier","messageId":"satisfyCustom","endLine":71,"endColumn":28},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Interface name `LLMRequestEvent` must match the RegExp: /^I[A-Z]/u","line":77,"column":18,"nodeType":"Identifier","messageId":"satisfyCustom","endLine":77,"endColumn":33},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Interface name `LLMStreamEvent` must match the RegExp: /^I[A-Z]/u","line":84,"column":18,"nodeType":"Identifier","messageId":"satisfyCustom","endLine":84,"endColumn":32},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Interface name `LLMMessage` must match the RegExp: /^I[A-Z]/u","line":93,"column":18,"nodeType":"Identifier","messageId":"satisfyCustom","endLine":93,"endColumn":28},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Interface name `LLMSessionConfig` must match the RegExp: /^I[A-Z]/u","line":133,"column":18,"nodeType":"Identifier","messageId":"satisfyCustom","endLine":133,"endColumn":34},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Interface name `SessionState` must match the RegExp: /^I[A-Z]/u","line":142,"column":18,"nodeType":"Identifier","messageId":"satisfyCustom","endLine":142,"endColumn":30},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Interface name `SessionStats` must match the RegExp: /^I[A-Z]/u","line":153,"column":18,"nodeType":"Identifier","messageId":"satisfyCustom","endLine":153,"endColumn":30},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Interface name `ProviderCapabilities` must match the RegExp: /^I[A-Z]/u","line":161,"column":18,"nodeType":"Identifier","messageId":"satisfyCustom","endLine":161,"endColumn":38},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Interface name `LLMProvider` must match the RegExp: /^I[A-Z]/u","line":175,"column":18,"nodeType":"Identifier","messageId":"satisfyCustom","endLine":175,"endColumn":29},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Interface name `LLMPromptOptions` must match the RegExp: /^I[A-Z]/u","line":219,"column":18,"nodeType":"Identifier","messageId":"satisfyCustom","endLine":219,"endColumn":34},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Interface name `LLMModelInfo` must match the RegExp: /^I[A-Z]/u","line":231,"column":18,"nodeType":"Identifier","messageId":"satisfyCustom","endLine":231,"endColumn":30},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":237,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":237,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5641,5644],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5641,5644],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Interface name `ModelRequirements` must match the RegExp: /^I[A-Z]/u","line":248,"column":18,"nodeType":"Identifier","messageId":"satisfyCustom","endLine":248,"endColumn":35},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Interface name `SystemInfo` must match the RegExp: /^I[A-Z]/u","line":258,"column":18,"nodeType":"Identifier","messageId":"satisfyCustom","endLine":258,"endColumn":28},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Interface name `Logger` must match the RegExp: /^I[A-Z]/u","line":271,"column":18,"nodeType":"Identifier","messageId":"satisfyCustom","endLine":271,"endColumn":24},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":272,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":272,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6331,6334],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6331,6334],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":273,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":273,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6378,6381],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6378,6381],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":274,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":274,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6425,6428],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6425,6428],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":275,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":275,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6481,6484],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6481,6484],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":25,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Basic LLM types for the VS Code extension\n\nexport interface LLMRequest {\n  id: string;\n  prompt: string;\n  model: string;\n  options?: LLMRequestOptions;\n  priority: LLMRequestPriority;\n  timestamp: number;\n  status: LLMRequestStatus;\n  error?: LLMRequestError;\n}\n\nexport interface LLMRequestOptions {\n  temperature?: number;\n  maxTokens?: number;\n  topK?: number;\n  presenceBonus?: number;\n  frequencyBonus?: number;\n  stopSequences?: string[];\n  timeout?: number;\n  stream?: boolean;\n}\n\nexport enum LLMRequestPriority {\n  Low = 'low',\n  Normal = 'normal',\n  High = 'high',\n}\n\nexport enum LLMRequestStatus {\n  Pending = 'pending',\n  InProgress = 'in-progress',\n  Completed = 'completed',\n  Failed = 'failed',\n  Cancelled = 'cancelled',\n}\n\nexport interface LLMRequestError {\n  code: string;\n  message: string;\n  details?: unknown;\n}\n\nexport interface LLMResponse {\n  id: string;\n  requestId: string;\n  content: string;\n  model: string;\n  prompt: string;\n  timestamp: number;\n  tokenUsage?: TokenUsage;\n  format?: LLMResponseFormat;\n  error?: LLMResponseError;\n}\n\nexport type LLMResponseFormat = 'text' | 'json' | 'markdown' | 'code';\n\nexport interface LLMResponseOptions {\n  format?: LLMResponseFormat;\n  includePrompt?: boolean;\n  includeTokenUsage?: boolean;\n}\n\nexport interface LLMResponseError {\n  code: string;\n  message: string;\n  details?: unknown;\n}\n\nexport interface TokenUsage {\n  promptTokens: number;\n  completionTokens: number;\n  totalTokens: number;\n}\n\nexport interface LLMRequestEvent {\n  type: 'created' | 'started' | 'progress' | 'completed' | 'failed' | 'cancelled';\n  request: LLMRequest;\n  timestamp: number;\n  details?: unknown;\n}\n\nexport interface LLMStreamEvent {\n  content: string;\n  done: boolean;\n  error?: LLMResponseError;\n  timestamp?: number;\n  tokenCount?: number;\n}\n\n// Add ILLMMessage interface to match the one in services/llm/types.ts\nexport interface LLMMessage {\n  role: 'system' | 'user' | 'assistant';\n  content: string;\n}\n\n// Model-related types\nexport enum ModelEvents {\n  // Evaluation events\n  EvaluationStarted = 'evaluation:started',\n  EvaluationCompleted = 'evaluation:completed',\n\n  // Optimization events\n  OptimizationStarted = 'optimization:started',\n  OptimizationCompleted = 'optimization:completed',\n  OptimizationProgress = 'optimization:progress',\n\n  // Scheduling events\n  SchedulingStarted = 'scheduling:started',\n  SchedulingCompleted = 'scheduling:completed',\n\n  // Execution events\n  ExecutionStarted = 'execution:started',\n  ExecutionCompleted = 'execution:completed',\n\n  // Task events\n  TaskStarted = 'task:started',\n  TaskCompleted = 'task:completed',\n  TaskFailed = 'task:failed',\n\n  // Tuning events\n  TuningStarted = 'tuning:started',\n  TuningCompleted = 'tuning:completed',\n  TuningProgress = 'tuning:progress',\n\n  // Metrics events\n  MetricsUpdated = 'metrics:updated',\n  MetricsExpired = 'metrics:expired',\n  MetricsAggregated = 'metrics:aggregated',\n}\n\nexport interface LLMSessionConfig {\n  model: string;\n  provider: string;\n  parameters: LLMRequestOptions;\n  contextSize: number;\n  historySize: number;\n  systemPrompt?: string;\n}\n\nexport interface SessionState {\n  id: string;\n  active: boolean;\n  startTime: number;\n  lastActivity: number;\n  requestCount: number;\n  tokenCount: number;\n  model: string;\n  provider: string;\n}\n\nexport interface SessionStats {\n  totalRequests: number;\n  totalTokens: number;\n  averageResponseTime: number;\n  errorRate: number;\n}\n\n// Provider capability types\nexport interface ProviderCapabilities {\n  maxContextLength: number;\n  supportsChatCompletion: boolean;\n  supportsStreaming: boolean;\n  supportsSystemPrompts: boolean;\n  supportedFormats: LLMResponseFormat[];\n  multimodalSupport: boolean;\n  supportsTemperature: boolean;\n  supportsTopP: boolean;\n  supportsPenalties: boolean;\n  supportsRetries: boolean;\n}\n\n// Basic interface for LLM providers\nexport interface LLMProvider {\n  id: string; // Added id property to match what LLMProviderManager expects\n  getName(): string;\n  getCapabilities(): ProviderCapabilities;\n  isAvailable(): Promise<boolean>;\n  getStatus(): 'active' | 'inactive' | 'error';\n  completePrompt(request: LLMRequest): Promise<LLMResponse>;\n  streamPrompt?(request: LLMRequest): AsyncIterable<LLMResponse>;\n  cancelRequest(requestId: string): Promise<boolean>;\n  connect(): Promise<void>;\n  disconnect(): Promise<void>;\n  generateCompletion(\n    model: string,\n    prompt: string,\n    systemPrompt?: string,\n    options?: LLMRequestOptions,\n  ): Promise<LLMResponse>;\n  streamCompletion(\n    model: string,\n    prompt: string,\n    systemPrompt?: string,\n    options?: LLMRequestOptions,\n    callback?: (event: LLMStreamEvent) => void,\n  ): Promise<void>;\n\n  // Add missing methods that the LLMProviderManager expects\n  generateChatCompletion(\n    model: string,\n    messages: LLMMessage[],\n    options?: LLMRequestOptions,\n  ): Promise<LLMResponse>;\n  streamChatCompletion(\n    model: string,\n    messages: LLMMessage[],\n    options?: LLMRequestOptions,\n    callback?: (event: LLMStreamEvent) => void,\n  ): Promise<void>;\n\n  setOfflineMode(enabled: boolean): void;\n  cacheResponse?(prompt: string, response: LLMResponse): Promise<void>;\n  useCachedResponse?(prompt: string): Promise<LLMResponse | null>;\n  isConnected(): boolean;\n}\n\nexport interface LLMPromptOptions {\n  temperature?: number;\n  maxTokens?: number;\n  language?: string;\n  context?: string;\n  formatOptions?: {\n    style?: string;\n    format?: string;\n    language?: string;\n  };\n}\n\nexport interface LLMModelInfo {\n  id: string;\n  name: string;\n  provider: string;\n  description?: string;\n  contextSize?: number;\n  parameters?: Record<string, any>;\n  tags?: string[];\n  version?: string;\n  capabilities?: string[];\n  quantization?: string;\n  license?: string;\n  minMemoryGB?: number;\n  recommendedMemoryGB?: number;\n  cudaSupport?: boolean;\n}\n\nexport interface ModelRequirements {\n  minRAM: number; // in MB\n  minCPU: number; // in MHz\n  minDisk: number; // in MB\n  gpu?: {\n    required: boolean;\n    minVRAM?: number;\n  };\n}\n\nexport interface SystemInfo {\n  totalRAM: number; // in MB\n  availableRAM: number;\n  cpuSpeed: number; // in MHz\n  cpuCores: number;\n  totalDisk: number; // in MB\n  freeDisk: number;\n  gpu?: {\n    name: string;\n    vram: number; // in MB\n  };\n}\n\nexport interface Logger {\n  debug(message: string, ...args: any[]): void;\n  info(message: string, ...args: any[]): void;\n  warn(message: string, ...args: any[]): void;\n  error(message: string | Error, ...args: any[]): void;\n}\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/semi","replacedBy":["@stylistic/ts/semi"]}]},{"filePath":"D:\\___coding\\tools\\copilot_ppa\\src\\models\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/semi","replacedBy":["@stylistic/ts/semi"]}]},{"filePath":"D:\\___coding\\tools\\copilot_ppa\\src\\performance\\analyzers\\analyzerFactory.ts","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":2,"message":"Missing return type on function.","line":2,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":2,"endColumn":21},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":2,"message":"Missing return type on function.","line":5,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":5,"endColumn":14},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":2,"message":"Missing return type on function.","line":6,"column":14,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":6,"endColumn":23},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":6,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":6,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[147,150],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[147,150],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":6,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":6,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[156,159],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[156,159],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":2,"message":"Missing return type on function.","line":8,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":8,"endColumn":14},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":2,"message":"Missing return type on function.","line":11,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":11,"endColumn":25},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":2,"message":"Missing return type on function.","line":18,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":18,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'exts' is defined but never used. Allowed unused args must match /^_/u.","line":18,"column":20,"nodeType":"Identifier","messageId":"unusedVar","endLine":18,"endColumn":34},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'analyzer' is defined but never used. Allowed unused args must match /^_/u.","line":18,"column":36,"nodeType":"Identifier","messageId":"unusedVar","endLine":18,"endColumn":49},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":18,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[490,493],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[490,493],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":2,"message":"Missing return type on function.","line":26,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":26,"endColumn":35}],"suppressedMessages":[],"errorCount":12,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export class AnalyzerFactory {\n  static getInstance() {\n    return new AnalyzerFactory();\n  }\n  getAnalyzer(_: string) {\n    return { analyze: (_: any, __: any) => ({ filePath: '', issues: [], skipped: false }) };\n  }\n  hasAnalyzer(_: string) {\n    return true;\n  }\n  getSupportedExtensions() {\n    return ['.ts', '.js'];\n  }\n  /**\n   * Registers a new analyzer for the given extension(s).\n   * (No-op in stub, but included for coverage.)\n   */\n  registerAnalyzer(exts: string[], analyzer: any) {\n    // No-op for stub, but should be callable\n    return void 0;\n  }\n\n  /**\n   * Registers default analyzers (no-op in stub).\n   */\n  private registerDefaultAnalyzers() {\n    // No-op for stub, but should be callable\n    return void 0;\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/semi","replacedBy":["@stylistic/ts/semi"]}]},{"filePath":"D:\\___coding\\tools\\copilot_ppa\\src\\performance\\analyzers\\baseAnalyzer.ts","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":2,"message":"Missing return type on function.","line":2,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":2,"endColumn":10},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":2,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":2,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[52,55],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[52,55],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":2,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":2,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[61,64],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[61,64],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export class BasePerformanceAnalyzer {\n  analyze(_: any, __: any) {\n    return { filePath: '', issues: [], skipped: false };\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/semi","replacedBy":["@stylistic/ts/semi"]}]},{"filePath":"D:\\___coding\\tools\\copilot_ppa\\src\\performance\\analyzers\\javaAnalyzer.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":2,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":2,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[45,48],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[45,48],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":2,"message":"Missing return type on function.","line":3,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":3,"endColumn":10},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":3,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":3,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[66,69],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[66,69],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":3,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":3,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[75,78],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[75,78],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export class JavaAnalyzer {\n  constructor(_: any) {}\n  analyze(_: any, __: any) {\n    return { filePath: '', issues: [], skipped: false };\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/semi","replacedBy":["@stylistic/ts/semi"]}]},{"filePath":"D:\\___coding\\tools\\copilot_ppa\\src\\performance\\analyzers\\pythonAnalyzer.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":2,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":2,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[47,50],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[47,50],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":2,"message":"Missing return type on function.","line":3,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":3,"endColumn":10},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":3,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":3,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[68,71],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[68,71],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":3,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":3,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[77,80],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[77,80],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export class PythonAnalyzer {\n  constructor(_: any) {}\n  analyze(_: any, __: any) {\n    return { filePath: '', issues: [], skipped: false };\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/semi","replacedBy":["@stylistic/ts/semi"]}]},{"filePath":"D:\\___coding\\tools\\copilot_ppa\\src\\performance\\analyzers\\typescriptAnalyzer.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":2,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":2,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[51,54],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[51,54],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":2,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":2,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[60,63],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[60,63],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":2,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":2,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[70,73],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[70,73],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":2,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":2,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[81,84],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[81,84],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":2,"message":"Missing return type on function.","line":3,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":3,"endColumn":10},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":3,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":3,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[102,105],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[102,105],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":3,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":3,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[111,114],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[111,114],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export class TypeScriptAnalyzer {\n  constructor(_: any, __: any, ___: any, ____: any) {}\n  analyze(_: any, __: any) {\n    return { filePath: '', issues: [], skipped: false };\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/semi","replacedBy":["@stylistic/ts/semi"]}]},{"filePath":"D:\\___coding\\tools\\copilot_ppa\\src\\performance\\analyzers\\typescript\\metricsCalculator.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/semi","replacedBy":["@stylistic/ts/semi"]}]},{"filePath":"D:\\___coding\\tools\\copilot_ppa\\src\\performance\\analyzers\\typescript\\patternAnalyzer.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":2,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":2,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[58,61],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[58,61],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export class TypeScriptPatternAnalyzer {\n  constructor(_: any) {}\n}\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/semi","replacedBy":["@stylistic/ts/semi"]}]},{"filePath":"D:\\___coding\\tools\\copilot_ppa\\src\\performance\\asyncOptimizer.ts","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":2,"message":"Missing return type on function.","line":2,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":2,"endColumn":21},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":2,"message":"Missing return type on function.","line":5,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":5,"endColumn":12},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":5,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":5,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[107,110],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[107,110],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":2,"message":"Missing return type on function.","line":6,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":6,"endColumn":11},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":2,"message":"Missing return type on function.","line":9,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":9,"endColumn":10}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export class AsyncOptimizer {\n  static getInstance() {\n    return new AsyncOptimizer();\n  }\n  setConfig(_: any) {}\n  getStats() {\n    return { optimizedCount: 0 };\n  }\n  dispose() {}\n}\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/semi","replacedBy":["@stylistic/ts/semi"]}]},{"filePath":"D:\\___coding\\tools\\copilot_ppa\\src\\performance\\bottleneckDetector.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":4,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":4,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[159,162],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[159,162],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":2,"message":"Missing return type on function.","line":5,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":5,"endColumn":21},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":6,"column":10,"nodeType":"MemberExpression","messageId":"conditionErrorObject","endLine":6,"endColumn":37},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":2,"message":"Missing return type on function.","line":11,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":11,"endColumn":19},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":11,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":11,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[382,385],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[382,385],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of an `any` typed value.","line":15,"column":5,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":15,"endColumn":32},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":2,"message":"Missing return type on function.","line":17,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":17,"endColumn":13},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":2,"message":"Missing return type on function.","line":20,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":20,"endColumn":13},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":2,"message":"Missing return type on function.","line":21,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":21,"endColumn":13}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Minimal implementation for test coverage\nexport class BottleneckDetector {\n  private static instance: BottleneckDetector;\n  private cache = new Map<string, any>();\n  static getInstance() {\n    if (!BottleneckDetector.instance) {\n      BottleneckDetector.instance = new BottleneckDetector();\n    }\n    return BottleneckDetector.instance;\n  }\n  analyzeOperation(key: string, data: any) {\n    if (!this.cache.has(key)) {\n      this.cache.set(key, { ...data });\n    }\n    return this.cache.get(key);\n  }\n  clearCache() {\n    this.cache.clear();\n  }\n  setEnabled(_enabled: boolean) {}\n  analyzeAll() {\n    return { critical: [], warnings: [] };\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/semi","replacedBy":["@stylistic/ts/semi"]}]},{"filePath":"D:\\___coding\\tools\\copilot_ppa\\src\\performance\\cachingService.ts","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":2,"message":"Missing return type on function.","line":2,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":2,"endColumn":21},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":2,"message":"Missing return type on function.","line":5,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":5,"endColumn":18},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":2,"message":"Missing return type on function.","line":6,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":6,"endColumn":16},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":2,"message":"Missing return type on function.","line":9,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":9,"endColumn":10}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export class CachingService {\n  static getInstance() {\n    return new CachingService();\n  }\n  setMaxCacheSize(_: number) {}\n  getCacheStats() {\n    return { hits: 0, misses: 0, evictions: 0 };\n  }\n  dispose() {}\n}\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/semi","replacedBy":["@stylistic/ts/semi"]}]},{"filePath":"D:\\___coding\\tools\\copilot_ppa\\src\\performance\\performanceManager.ts","messages":[{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":48,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":48,"endColumn":83,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[2560,2560],"text":"void "},"desc":"Add void operator to ignore."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":56,"column":10,"nodeType":"MemberExpression","messageId":"conditionErrorObject","endLine":56,"endColumn":37},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":76,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":76,"endColumn":83,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[3729,3729],"text":"void "},"desc":"Add void operator to ignore."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable boolean value in conditional. Please handle the nullish case explicitly.","line":92,"column":20,"nodeType":"MemberExpression","messageId":"conditionErrorNullableBoolean","endLine":92,"endColumn":34,"suggestions":[{"messageId":"conditionFixDefaultFalse","fix":{"range":[4367,4381],"text":"(result.skipped ?? false)"},"desc":"Explicitly treat nullish value the same as false (`value ?? false`)"},{"messageId":"conditionFixCompareFalse","fix":{"range":[4366,4381],"text":"(result.skipped === false)"},"desc":"Change condition to check if false (`value === false`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":94,"column":11,"nodeType":"Identifier","messageId":"conditionErrorObject","endLine":94,"endColumn":27},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":105,"column":11,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":105,"endColumn":78,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[5093,5093],"text":"void "},"desc":"Add void operator to ignore."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":118,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":118,"endColumn":74,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[5614,5614],"text":"void "},"desc":"Add void operator to ignore."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":178,"column":11,"nodeType":"Identifier","messageId":"conditionErrorObject","endLine":178,"endColumn":17},{"ruleId":"@typescript-eslint/require-await","severity":2,"message":"Async method 'updateFileMetrics' has no 'await' expression.","line":186,"column":3,"nodeType":"FunctionExpression","messageId":"missingAwait","endLine":186,"endColumn":34},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":193,"column":11,"nodeType":"Identifier","messageId":"conditionErrorObject","endLine":193,"endColumn":16},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":255,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":255,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10150,10153],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10150,10153],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":11,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { EventEmitter } from 'events';\nimport * as vscode from 'vscode';\nimport { AsyncOptimizer } from './asyncOptimizer';\nimport { BottleneckDetector } from './bottleneckDetector';\nimport { CachingService } from './cachingService';\nimport { PerformanceProfiler } from './performanceProfiler';\nimport { PerformanceAnalyzerService } from './services/PerformanceAnalyzerService';\nimport { PerformanceConfigService } from './services/performanceConfigService';\nimport { PerformanceDiagnosticsService } from './services/performanceDiagnosticsService';\nimport { PerformanceFileMonitorService } from './services/performanceFileMonitorService';\nimport { PerformanceStatusService } from './services/performanceStatusService';\nimport { Logger } from './utils/logger';\n\nexport class PerformanceManager implements vscode.Disposable {\n  private static instance: PerformanceManager;\n  private readonly analyzerService: PerformanceAnalyzerService;\n  private readonly statusService: PerformanceStatusService;\n  private readonly diagnosticsService: PerformanceDiagnosticsService;\n  private readonly fileMonitorService: PerformanceFileMonitorService;\n  private readonly configService: PerformanceConfigService;\n  private readonly profiler: PerformanceProfiler;\n  private readonly bottleneckDetector: BottleneckDetector;\n  private readonly cachingService: CachingService;\n  private readonly asyncOptimizer: AsyncOptimizer;\n  private readonly eventEmitter: EventEmitter;\n  private readonly logger: Logger;\n  private analysisCache: Map<string, PerformanceAnalysisResult> = new Map();\n  private disposed = false;\n\n  private constructor(\n    extensionContext: vscode.ExtensionContext,\n    analyzerService?: PerformanceAnalyzerService,\n  ) {\n    this.eventEmitter = new EventEmitter();\n    this.configService = new PerformanceConfigService();\n    this.analyzerService = analyzerService ?? new PerformanceAnalyzerService(extensionContext);\n    this.statusService = new PerformanceStatusService();\n    this.diagnosticsService = new PerformanceDiagnosticsService();\n    this.fileMonitorService = new PerformanceFileMonitorService();\n    this.profiler = PerformanceProfiler.getInstance(extensionContext);\n    this.bottleneckDetector = BottleneckDetector.getInstance();\n    this.cachingService = CachingService.getInstance();\n    this.asyncOptimizer = AsyncOptimizer.getInstance();\n    this.logger = Logger.getInstance();\n    this.setupEventListeners();\n    this.initializeServices().catch((error) => {\n      this.logger.error('Failed to initialize performance services:', error);\n      vscode.window.showErrorMessage('Failed to initialize performance services');\n    });\n  }\n\n  public static getInstance(\n    context?: vscode.ExtensionContext,\n    analyzerService?: PerformanceAnalyzerService,\n  ): PerformanceManager {\n    if (!PerformanceManager.instance) {\n      if (!context) {\n        throw new Error('Context required for PerformanceManager initialization');\n      }\n      PerformanceManager.instance = new PerformanceManager(context, analyzerService);\n    }\n    return PerformanceManager.instance;\n  }\n\n  private async initializeServices(): Promise<void> {\n    try {\n      await this.configService.initialize();\n      this.profiler.setEnabled(this.configService.isProfilingEnabled());\n      this.bottleneckDetector.setEnabled(this.configService.isBottleneckDetectionEnabled());\n      const cachingOptions = this.configService.getCachingOptions();\n      this.cachingService.setMaxCacheSize(cachingOptions.maxSize);\n      this.asyncOptimizer.setConfig(this.configService.getAsyncOptions());\n      this.eventEmitter.emit('servicesInitialized');\n    } catch (error) {\n      this.logger.error('Failed to initialize performance services:', error);\n      vscode.window.showErrorMessage('Failed to initialize performance services');\n      throw error;\n    }\n  }\n\n  public async analyzeFile(document: vscode.TextDocument): Promise<PerformanceAnalysisResult> {\n    const fileKey = document.uri.toString();\n    if (this.analysisCache.has(fileKey)) {\n      return this.analysisCache.get(fileKey)!;\n    }\n    const operationId = `file-analysis-${document.uri.fsPath}`;\n    this.profiler.startOperation(operationId);\n    try {\n      const result = await this.analyzerService.analyzeDocument(document);\n      const normalizedResult: PerformanceAnalysisResult = {\n        ...result,\n        skipped: !!result.skipped,\n      };\n      if (normalizedResult) {\n        try {\n          this.statusService.updateStatusBar(normalizedResult);\n          this.diagnosticsService.updateDiagnostics(document, normalizedResult);\n          this.bottleneckDetector.analyzeOperation(operationId, { result: normalizedResult });\n          this.eventEmitter.emit('fileAnalysisComplete', normalizedResult);\n          await this.updateFileMetrics(document.uri, normalizedResult);\n          this.analysisCache.set(fileKey, normalizedResult);\n        } catch (error) {\n          this.logger.error(`File analysis failed for ${document.uri.fsPath}:`, error);\n          const message = error instanceof Error ? error.message : 'Unknown error';\n          vscode.window.showErrorMessage(`File analysis failed: ${message}`);\n          this.eventEmitter.emit('fileAnalysisComplete', {\n            filePath: '',\n            issues: [],\n            skipped: true,\n          });\n          return { filePath: '', issues: [], skipped: true };\n        }\n      }\n      return normalizedResult;\n    } catch (error) {\n      this.logger.error(`File analysis failed for ${document.uri.fsPath}:`, error);\n      const message = error instanceof Error ? error.message : 'Unknown error';\n      vscode.window.showErrorMessage(`File analysis failed: ${message}`);\n      this.eventEmitter.emit('fileAnalysisComplete', { filePath: '', issues: [], skipped: true });\n      return { filePath: '', issues: [], skipped: true };\n    } finally {\n      this.profiler.endOperation(operationId);\n    }\n  }\n\n  public async analyzeCurrentFile(): Promise<PerformanceAnalysisResult | null> {\n    const editor = vscode.window.activeTextEditor;\n    if (!editor) {\n      return null;\n    }\n    return this.analyzeFile(editor.document);\n  }\n\n  public generatePerformanceReport(): void {\n    const operationStats = this.profiler.getStats('all');\n    const bottleneckAnalysis = this.bottleneckDetector.analyzeAll();\n    const cacheStats = this.cachingService.getCacheStats();\n    const asyncStats = this.asyncOptimizer.getStats();\n    this.logger.info('Performance Report:');\n    this.logger.info(`Operations analyzed: ${operationStats?.length || 0}`);\n    this.logger.info(`Critical bottlenecks detected: ${bottleneckAnalysis.critical.length}`);\n    this.logger.info(`Performance warnings detected: ${bottleneckAnalysis.warnings.length}`);\n    this.logger.info(\n      `Cache hits: ${cacheStats.hits}, misses: ${cacheStats.misses}, evictions: ${cacheStats.evictions}`,\n    );\n    this.logger.info(`Async operations optimized: ${asyncStats.optimizedCount}`);\n    this.eventEmitter.emit('performanceReport', {\n      operationStats,\n      bottleneckAnalysis,\n      cacheStats,\n      asyncStats,\n    });\n  }\n\n  private setupEventListeners(): void {\n    this.fileMonitorService.onDocumentSaved((document: vscode.TextDocument) =>\n      this.handleDocumentChange(document),\n    );\n    this.fileMonitorService.onActiveEditorChanged((editor?: vscode.TextEditor) => {\n      if (editor) {\n        this.analyzeFile(editor.document).catch((error) => {\n          this.logger.error('Failed to analyze active editor:', error);\n        });\n      }\n    });\n    vscode.workspace.onDidChangeConfiguration((e) => {\n      if (e.affectsConfiguration('copilot-ppa.performance')) {\n        this.initializeServices().catch((error) => {\n          this.logger.error('Failed to reinitialize services:', error);\n        });\n      }\n    });\n  }\n\n  private handleDocumentChange(document: vscode.TextDocument): void {\n    this.fileMonitorService.throttleDocumentChange(document, async () => {\n      const result = await this.analyzeFile(document);\n      if (result) {\n        this.statusService.updateStatusBar(result);\n        this.diagnosticsService.updateDiagnostics(document, result);\n        await this.updateFileMetrics(document.uri, result);\n      }\n    });\n  }\n\n  private async updateFileMetrics(\n    uri: vscode.Uri,\n    result: PerformanceAnalysisResult,\n  ): Promise<void> {\n    try {\n      const operationId = `file-analysis-${uri.fsPath}`;\n      const stats = this.profiler.getStats(operationId);\n      if (stats) {\n        stats.metadata = {\n          issues: result.issues.length,\n          ...result.metrics,\n        };\n      }\n      this.bottleneckDetector.analyzeOperation(`file-${uri.fsPath}`, {\n        stats: this.profiler.getStats(operationId),\n        issues: result.issues.length,\n        metrics: result.metrics,\n      });\n      this.eventEmitter.emit('fileMetricsUpdated', { uri, metrics: result.metrics });\n    } catch (error) {\n      this.logger.error(`Failed to update metrics for ${uri.fsPath}:`, error);\n      this.eventEmitter.emit('fileMetricsUpdated', { uri, metrics: undefined, error });\n    }\n  }\n\n  public clearCaches(): void {\n    this.analysisCache.clear();\n  }\n\n  public getProfiler(): PerformanceProfiler {\n    return this.profiler;\n  }\n\n  public getBottleneckDetector(): BottleneckDetector {\n    return this.bottleneckDetector;\n  }\n\n  public getCachingService(): CachingService {\n    return this.cachingService;\n  }\n\n  public getAsyncOptimizer(): AsyncOptimizer {\n    return this.asyncOptimizer;\n  }\n\n  public on(event: string, listener: (...args: unknown[]) => void): void {\n    this.eventEmitter.on(event, listener);\n  }\n\n  public off(event: string, listener: (...args: unknown[]) => void): void {\n    this.eventEmitter.off(event, listener);\n  }\n\n  public dispose(): void {\n    if (this.disposed) {\n      return;\n    }\n    this.disposed = true;\n    this.statusService.dispose();\n    this.diagnosticsService.dispose();\n    this.fileMonitorService.dispose();\n    this.cachingService.dispose();\n    this.asyncOptimizer.dispose();\n    this.eventEmitter.removeAllListeners();\n  }\n}\n\ntype PerformanceAnalysisResult = {\n  filePath: string;\n  issues: any[];\n  skipped: boolean;\n  metrics?: Record<string, number>;\n};\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/semi","replacedBy":["@stylistic/ts/semi"]}]},{"filePath":"D:\\___coding\\tools\\copilot_ppa\\src\\performance\\performanceProfiler.ts","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":2,"message":"Missing return type on function.","line":2,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":2,"endColumn":21},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":2,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":2,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[59,62],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[59,62],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":2,"message":"Missing return type on function.","line":5,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":5,"endColumn":13},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":2,"message":"Missing return type on function.","line":6,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":6,"endColumn":17},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":2,"message":"Missing return type on function.","line":7,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":7,"endColumn":15},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":2,"message":"Missing return type on function.","line":8,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":8,"endColumn":11}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export class PerformanceProfiler {\n  static getInstance(_: any) {\n    return new PerformanceProfiler();\n  }\n  setEnabled(_: boolean) {}\n  startOperation(_: string) {}\n  endOperation(_: string) {}\n  getStats(_: string) {\n    return { length: 0, metadata: {} };\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/semi","replacedBy":["@stylistic/ts/semi"]}]},{"filePath":"D:\\___coding\\tools\\copilot_ppa\\src\\performance\\services\\PerformanceAnalyzerService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":6,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":6,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[171,174],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[171,174],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":62,"column":8,"nodeType":"Identifier","messageId":"conditionErrorObject","endLine":62,"endColumn":16},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type cast is required.","line":64,"column":31,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":64,"endColumn":52,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1825,1846],"text":"(Boolean((document as any).uri))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":64,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":64,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1838,1841],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1838,1841],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .uri on an `any` value.","line":64,"column":49,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":64,"endColumn":52},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":67,"column":41,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":67,"endColumn":73},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":67,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":67,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1924,1927],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1924,1927],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .uri on an `any` value.","line":67,"column":60,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":67,"endColumn":63},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":75,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":75,"endColumn":77},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":75,"column":21,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":75,"endColumn":52},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":75,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":75,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2189,2192],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2189,2192],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .uri on an `any` value.","line":75,"column":39,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":75,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":76,"column":32,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":76,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":77,"column":37,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":77,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":90,"column":32,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":90,"endColumn":39},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":95,"column":12,"nodeType":"Identifier","messageId":"conditionErrorObject","endLine":95,"endColumn":20},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":102,"column":32,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":102,"endColumn":39},{"ruleId":"eqeqeq","severity":2,"message":"Expected '===' and instead saw '=='.","line":109,"column":18,"nodeType":"BinaryExpression","messageId":"unexpected","endLine":109,"endColumn":20},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":121,"column":30,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":121,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .type on an `any` value.","line":150,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":150,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .type on an `any` value.","line":160,"column":38,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":160,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .type on an `any` value.","line":169,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":169,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":177,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":177,"endColumn":39},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type cast is required.","line":177,"column":23,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":177,"endColumn":33,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[5627,5637],"text":"(Boolean(issue.code))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .code on an `any` value.","line":177,"column":29,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":177,"endColumn":33}],"suppressedMessages":[],"errorCount":25,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as vscode from 'vscode';\nimport { AnalyzerFactory } from '../analyzers/analyzerFactory';\n\nexport type PerformanceAnalysisResult = {\n  filePath: string;\n  issues: any[];\n  skipped?: boolean;\n  metrics?: Record<string, number>;\n  skipReason?: string;\n};\nexport type AnalyzerConfiguration = {\n  minSeverity: 'error' | 'critical' | 'warning' | 'info';\n  maxFileSizeKB: number;\n};\nexport type PerformanceMetrics = {\n  lastAnalysisTime: number;\n  totalIssuesFound: number;\n  issuesByType: {\n    performance: number;\n    'memory-leak': number;\n    'cpu-intensive': number;\n    'memory-management': number;\n  };\n};\n\nexport class PerformanceAnalyzerService {\n  private readonly analyzerFactory: AnalyzerFactory;\n  private metrics: PerformanceMetrics = {\n    lastAnalysisTime: 0,\n    totalIssuesFound: 0,\n    issuesByType: {\n      performance: 0,\n      'memory-leak': 0,\n      'cpu-intensive': 0,\n      'memory-management': 0,\n    },\n  };\n  private configuration: AnalyzerConfiguration = {\n    minSeverity: 'info',\n    maxFileSizeKB: 1000,\n  };\n  private analysisCache: Map<string, PerformanceAnalysisResult> = new Map();\n\n  constructor(\n    private readonly context: vscode.ExtensionContext,\n    analyzerFactory?: AnalyzerFactory,\n  ) {\n    this.analyzerFactory = analyzerFactory ?? AnalyzerFactory.getInstance();\n  }\n\n  public hasAnalyzer(language: string): boolean {\n    return this.analyzerFactory.hasAnalyzer(language);\n  }\n\n  public canAnalyze(fileExtension: string): boolean {\n    return this.analyzerFactory.getSupportedExtensions().includes(fileExtension);\n  }\n\n  public async analyzeDocument(document: vscode.TextDocument): Promise<PerformanceAnalysisResult> {\n    // Defensive: check for fileName and getText\n    if (\n      !document ||\n      typeof document.getText !== 'function' ||\n      (!document.fileName && !(document as any).uri)\n    ) {\n      return {\n        filePath: document?.fileName ?? (document as any)?.uri?.toString?.() ?? '',\n        issues: [],\n        skipped: true,\n        skipReason: 'Missing fileName or getText on document',\n      };\n    }\n\n    // Use uri.toString() as cache key if available, else fallback to fileName\n    const fileKey = (document as any).uri?.toString?.() ?? document.fileName;\n    if (this.analysisCache.has(fileKey)) {\n      return this.analysisCache.get(fileKey)!;\n    }\n    const startTime = Date.now();\n    try {\n      // Check file size\n      const fileSize = Buffer.from(document.getText()).length / 1024;\n      if (fileSize > this.configuration.maxFileSizeKB) {\n        const result: PerformanceAnalysisResult = {\n          filePath: document.fileName,\n          issues: [],\n          skipped: true,\n          skipReason: `File size (${fileSize}KB) exceeds limit (${this.configuration.maxFileSizeKB}KB)`,\n        };\n        this.analysisCache.set(fileKey, result);\n        return result;\n      }\n\n      const analyzer = this.analyzerFactory.getAnalyzer(document.fileName);\n      if (!analyzer) {\n        const result: PerformanceAnalysisResult = {\n          filePath: document.fileName,\n          issues: [],\n          skipped: true,\n          skipReason: 'No analyzer available for this file type',\n        };\n        this.analysisCache.set(fileKey, result);\n        return result;\n      }\n\n      // analyzer.analyze expects (fileContent, filePath)\n      const fileContent = document.getText();\n      const result = await Promise.resolve(analyzer.analyze(fileContent, document.fileName));\n      if (result == null) {\n        return {\n          filePath: document.fileName,\n          issues: [],\n          skipped: true,\n          skipReason: 'Analyzer returned null or undefined',\n        };\n      }\n      // Ensure 'skipped' is always boolean\n      if (typeof result.skipped === 'undefined') {\n        result.skipped = false;\n      }\n      this.analysisCache.set(fileKey, result);\n      return result;\n    } catch (error) {\n      // Ensure error path returns a consistent result\n      return {\n        filePath: document.fileName,\n        issues: [],\n        skipped: true,\n        skipReason: error instanceof Error ? error.message : 'Unknown error',\n      };\n    } finally {\n      this.metrics.lastAnalysisTime = Date.now() - startTime;\n    }\n  }\n\n  public clearCache(): void {\n    this.analysisCache.clear();\n  }\n\n  public getMetrics(): PerformanceMetrics {\n    return { ...this.metrics };\n  }\n\n  public setConfiguration(config: Partial<AnalyzerConfiguration>): void {\n    this.configuration = { ...this.configuration, ...config };\n  }\n\n  public generateRecommendations(result: PerformanceAnalysisResult): string[] {\n    return result.issues.map((issue) => {\n      switch (issue.type) {\n        case 'performance':\n          return `Consider using a Set for faster lookups`;\n        case 'memory-leak':\n          return `Consider implementing proper cleanup in intervals/timeouts`;\n        case 'cpu-intensive':\n          return `Consider memoization or dynamic programming approach`;\n        case 'memory-management':\n          return `Consider implementing a cache eviction policy`;\n        default:\n          return `Review the ${issue.type} issue`;\n      }\n    });\n  }\n\n  public getOptimizationExamples(\n    result: PerformanceAnalysisResult,\n  ): Array<{ original: string; optimized: string }> {\n    return result.issues.map((issue) => {\n      switch (issue.type) {\n        case 'performance':\n          return {\n            original: 'const items = []; for(let i = 0; i < 1000; i++) { items.push(i); }',\n            optimized: 'const items = Array(1000).fill().map((_, i) => i);',\n          };\n        default:\n          return {\n            original: issue.code || '',\n            optimized: 'Optimization example not available',\n          };\n      }\n    });\n  }\n\n  private getSeverityLevel(severity: string): number {\n    const levels: Record<string, number> = {\n      error: 4,\n      critical: 3,\n      warning: 2,\n      info: 1,\n    };\n    return levels[severity] ?? 0;\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/semi","replacedBy":["@stylistic/ts/semi"]}]},{"filePath":"D:\\___coding\\tools\\copilot_ppa\\src\\performance\\services\\PerformanceMetricsService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":3,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":3,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[119,122],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[119,122],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":2,"message":"Missing return type on function.","line":4,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":4,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of an `any` typed value.","line":8,"column":5,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":8,"endColumn":33},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":2,"message":"Missing return type on function.","line":10,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":10,"endColumn":23},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":2,"message":"Missing return type on function.","line":13,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":13,"endColumn":10}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Minimal implementation for test coverage\nexport class PerformanceMetricsService {\n  private cache = new Map<string, any>();\n  analyzeFile(file: string) {\n    if (!this.cache.has(file)) {\n      this.cache.set(file, this.expensiveCalculation(file));\n    }\n    return this.cache.get(file);\n  }\n  expensiveCalculation(file: string) {\n    return { file, metrics: { a: 1 } };\n  }\n  dispose() {\n    this.cache.clear();\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/semi","replacedBy":["@stylistic/ts/semi"]}]},{"filePath":"D:\\___coding\\tools\\copilot_ppa\\src\\performance\\services\\performanceConfigService.ts","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":2,"message":"Missing return type on function.","line":2,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":2,"endColumn":19},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":2,"message":"Missing return type on function.","line":3,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":3,"endColumn":21},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":2,"message":"Missing return type on function.","line":6,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":6,"endColumn":31},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":2,"message":"Missing return type on function.","line":9,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":9,"endColumn":20},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":2,"message":"Missing return type on function.","line":12,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":12,"endColumn":18}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export class PerformanceConfigService {\n  async initialize() {}\n  isProfilingEnabled() {\n    return false;\n  }\n  isBottleneckDetectionEnabled() {\n    return false;\n  }\n  getCachingOptions() {\n    return { maxSize: 100 };\n  }\n  getAsyncOptions() {\n    return {};\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/semi","replacedBy":["@stylistic/ts/semi"]}]},{"filePath":"D:\\___coding\\tools\\copilot_ppa\\src\\performance\\services\\performanceDiagnosticsService.ts","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":2,"message":"Missing return type on function.","line":2,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":2,"endColumn":20},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":2,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":2,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[68,71],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[68,71],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":2,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":2,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[77,80],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[77,80],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":2,"message":"Missing return type on function.","line":3,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":3,"endColumn":10}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export class PerformanceDiagnosticsService {\n  updateDiagnostics(_: any, __: any) {}\n  dispose() {}\n}\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/semi","replacedBy":["@stylistic/ts/semi"]}]},{"filePath":"D:\\___coding\\tools\\copilot_ppa\\src\\performance\\services\\performanceFileMonitorService.ts","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":2,"message":"Missing return type on function.","line":2,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":2,"endColumn":18},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":2,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":2,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[66,69],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[66,69],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":2,"message":"Missing return type on function.","line":3,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":3,"endColumn":24},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":3,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":3,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[101,104],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[101,104],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":2,"message":"Missing return type on function.","line":4,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":4,"endColumn":25},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":4,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":4,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[137,140],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[137,140],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":4,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":4,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[146,149],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[146,149],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":2,"message":"Missing return type on function.","line":5,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":5,"endColumn":10}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export class PerformanceFileMonitorService {\n  onDocumentSaved(_: any) {}\n  onActiveEditorChanged(_: any) {}\n  throttleDocumentChange(_: any, __: any) {}\n  dispose() {}\n}\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/semi","replacedBy":["@stylistic/ts/semi"]}]},{"filePath":"D:\\___coding\\tools\\copilot_ppa\\src\\performance\\services\\performanceStatusService.ts","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":2,"message":"Missing return type on function.","line":2,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":2,"endColumn":18},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":2,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":2,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[61,64],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[61,64],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":2,"message":"Missing return type on function.","line":3,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":3,"endColumn":10}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export class PerformanceStatusService {\n  updateStatusBar(_: any) {}\n  dispose() {}\n}\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/semi","replacedBy":["@stylistic/ts/semi"]}]},{"filePath":"D:\\___coding\\tools\\copilot_ppa\\src\\performance\\types.ts","messages":[{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Interface name `PerformanceIssue` must match the RegExp: /^I[A-Z]/u","line":10,"column":18,"nodeType":"Identifier","messageId":"satisfyCustom","endLine":10,"endColumn":34},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Interface name `BaseMetrics` must match the RegExp: /^I[A-Z]/u","line":25,"column":18,"nodeType":"Identifier","messageId":"satisfyCustom","endLine":25,"endColumn":29},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Interface name `JavaScriptMetrics` must match the RegExp: /^I[A-Z]/u","line":35,"column":18,"nodeType":"Identifier","messageId":"satisfyCustom","endLine":35,"endColumn":35},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Interface name `JavaMetrics` must match the RegExp: /^I[A-Z]/u","line":47,"column":18,"nodeType":"Identifier","messageId":"satisfyCustom","endLine":47,"endColumn":29},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Interface name `CSharpMetrics` must match the RegExp: /^I[A-Z]/u","line":63,"column":18,"nodeType":"Identifier","messageId":"satisfyCustom","endLine":63,"endColumn":31},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Interface name `PerformanceAnalysisResult` must match the RegExp: /^I[A-Z]/u","line":76,"column":18,"nodeType":"Identifier","messageId":"satisfyCustom","endLine":76,"endColumn":43},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Interface name `WorkspacePerformanceResult` must match the RegExp: /^I[A-Z]/u","line":89,"column":18,"nodeType":"Identifier","messageId":"satisfyCustom","endLine":89,"endColumn":44},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Interface name `PerformanceThresholds` must match the RegExp: /^I[A-Z]/u","line":104,"column":18,"nodeType":"Identifier","messageId":"satisfyCustom","endLine":104,"endColumn":39},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Interface name `PerformanceAnalyzerConfig` must match the RegExp: /^I[A-Z]/u","line":116,"column":18,"nodeType":"Identifier","messageId":"satisfyCustom","endLine":116,"endColumn":43},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Interface name `LanguageAnalyzer` must match the RegExp: /^I[A-Z]/u","line":127,"column":18,"nodeType":"Identifier","messageId":"satisfyCustom","endLine":127,"endColumn":34},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Interface name `CodeMetrics` must match the RegExp: /^I[A-Z]/u","line":137,"column":18,"nodeType":"Identifier","messageId":"satisfyCustom","endLine":137,"endColumn":29},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Interface name `LanguageMetricThresholds` must match the RegExp: /^I[A-Z]/u","line":148,"column":18,"nodeType":"Identifier","messageId":"satisfyCustom","endLine":148,"endColumn":42},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Interface name `AnalyzerOptions` must match the RegExp: /^I[A-Z]/u","line":157,"column":18,"nodeType":"Identifier","messageId":"satisfyCustom","endLine":157,"endColumn":33},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Interface name `FileAnalysisContext` must match the RegExp: /^I[A-Z]/u","line":164,"column":18,"nodeType":"Identifier","messageId":"satisfyCustom","endLine":164,"endColumn":37},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Interface name `PerformanceMetrics` must match the RegExp: /^I[A-Z]/u","line":171,"column":18,"nodeType":"Identifier","messageId":"satisfyCustom","endLine":171,"endColumn":36},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Interface name `AnalyzerConfiguration` must match the RegExp: /^I[A-Z]/u","line":182,"column":18,"nodeType":"Identifier","messageId":"satisfyCustom","endLine":182,"endColumn":39},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Interface name `TypeScriptPatternAnalyzer` must match the RegExp: /^I[A-Z]/u","line":187,"column":18,"nodeType":"Identifier","messageId":"satisfyCustom","endLine":187,"endColumn":43}],"suppressedMessages":[],"errorCount":17,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as vscode from 'vscode';\n\n/**\n * Common types for the performance analyzer\n */\n\n/**\n * Interface for a performance issue found in code\n */\nexport interface PerformanceIssue {\n  title: string;\n  description: string;\n  severity: 'critical' | 'high' | 'medium' | 'low' | 'info';\n  line: number;\n  column?: number;\n  code: string | null;\n  solution: string;\n  solutionCode?: string;\n  type: 'performance' | 'memory-leak' | 'cpu-intensive' | 'memory-management';\n}\n\n/**\n * Common metrics tracked across all languages\n */\nexport interface BaseMetrics {\n  linesOfCode: number;\n  commentRatio?: number;\n  nestingDepth?: number;\n  averageMethodLength?: number;\n}\n\n/**\n * JavaScript/TypeScript specific metrics\n */\nexport interface JavaScriptMetrics extends BaseMetrics {\n  asyncFunctionCount?: number;\n  promiseUsageCount?: number;\n  domOperationsCount?: number;\n  eventListenerCount?: number;\n  loopCount?: number;\n  recursiveCallCount?: number;\n}\n\n/**\n * Java specific metrics\n */\nexport interface JavaMetrics extends BaseMetrics {\n  classCount?: number;\n  methodCount?: number;\n  importCount?: number;\n  streamApiUsage?: number;\n  finalFieldCount?: number;\n  genericTypeCount?: number;\n  parallelStreamCount?: number;\n  stringBuilderUsage?: number;\n  synchronizedBlockCount?: number;\n  concurrentUtilsCount?: number;\n}\n\n/**\n * C# specific metrics\n */\nexport interface CSharpMetrics extends BaseMetrics {\n  classCount?: number;\n  methodCount?: number;\n  usingCount?: number;\n  linqOperationsCount?: number;\n  stringBuilderUsage?: number;\n  lockStatementCount?: number;\n  disposableUsageCount?: number;\n}\n\n/**\n * Interface for the result of a performance analysis\n */\nexport interface PerformanceAnalysisResult {\n  filePath: string;\n  fileSize?: number;\n  issues: PerformanceIssue[];\n  metrics?: Record<string, number>;\n  skipped?: boolean;\n  skipReason?: string;\n  error?: string;\n}\n\n/**\n * Interface for the result of a workspace-wide performance analysis\n */\nexport interface WorkspacePerformanceResult {\n  fileResults: PerformanceAnalysisResult[];\n  summary: {\n    filesAnalyzed: number;\n    totalIssues: number;\n    criticalIssues: number;\n    highIssues: number;\n    mediumIssues: number;\n    lowIssues: number;\n  };\n}\n\n/**\n * Interface defining performance thresholds for different metrics\n */\nexport interface PerformanceThresholds {\n  cyclomaticComplexity: [number, number]; // [warning, critical]\n  nestedBlockDepth: [number, number];\n  functionLength: [number, number];\n  parameterCount: [number, number];\n  maintainabilityIndex: [number, number]; // Higher is better\n  commentRatio: [number, number]; // Higher is better\n}\n\n/**\n * Configuration options for performance analysis\n */\nexport interface PerformanceAnalyzerConfig {\n  thresholds: PerformanceThresholds;\n  excludePatterns: string[];\n  maxFileSize: number; // in bytes\n  analyzeOnSave: boolean;\n  showInlineMarkers: boolean;\n}\n\n/**\n * Definition of a language analyzer\n */\nexport interface LanguageAnalyzer {\n  /**\n   * Analyze code for performance issues\n   * @param fileContent The content of the file to analyze\n   * @param filePath The path to the file being analyzed\n   * @returns Analysis results\n   */\n  analyze(fileContent: string, filePath: string): PerformanceAnalysisResult;\n}\n\nexport interface CodeMetrics {\n  cyclomaticComplexity: number;\n  linesOfCode: number;\n  commentRatio: number;\n  functionCount: number;\n  maintainabilityIndex: number;\n  functionLength: number;\n  nestedBlockDepth: number;\n  parameterCount: number;\n}\n\nexport interface LanguageMetricThresholds {\n  cyclomaticComplexity: [number, number]; // [warning, error]\n  nestedBlockDepth: [number, number];\n  functionLength: [number, number];\n  parameterCount: [number, number];\n  maintainabilityIndex: [number, number];\n  commentRatio: [number, number];\n}\n\nexport interface AnalyzerOptions {\n  maxFileSize: number;\n  excludePatterns: string[];\n  includeTests: boolean;\n  thresholds: LanguageMetricThresholds;\n}\n\nexport interface FileAnalysisContext {\n  content: string;\n  uri: vscode.Uri;\n  languageId: string;\n  version: number;\n}\n\nexport interface PerformanceMetrics {\n  lastAnalysisTime: number;\n  totalIssuesFound: number;\n  issuesByType: {\n    performance: number;\n    'memory-leak': number;\n    'cpu-intensive': number;\n    'memory-management': number;\n  };\n}\n\nexport interface AnalyzerConfiguration {\n  minSeverity: 'error' | 'critical' | 'warning' | 'info';\n  maxFileSizeKB: number;\n}\n\nexport interface TypeScriptPatternAnalyzer {\n  analyzeTypeScriptPatterns(fileContent: string, lines: string[]): PerformanceIssue[];\n}\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/semi","replacedBy":["@stylistic/ts/semi"]}]},{"filePath":"D:\\___coding\\tools\\copilot_ppa\\src\\performance\\utils\\logger.ts","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":2,"message":"Missing return type on function.","line":2,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":2,"endColumn":21},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":2,"message":"Missing return type on function.","line":5,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":5,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'args' is defined but never used. Allowed unused args must match /^_/u.","line":5,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":15},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":5,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":5,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[92,95],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[92,95],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":2,"message":"Missing return type on function.","line":6,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":6,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'args' is defined but never used. Allowed unused args must match /^_/u.","line":6,"column":12,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":16},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":6,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":6,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[119,122],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[119,122],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export class Logger {\n  static getInstance() {\n    return new Logger();\n  }\n  info(...args: any[]) {}\n  error(...args: any[]) {}\n}\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/semi","replacedBy":["@stylistic/ts/semi"]}]},{"filePath":"D:\\___coding\\tools\\copilot_ppa\\src\\refactoring\\index.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":9,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":9,"endColumn":61},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe construction of an any type value.","line":9,"column":30,"nodeType":"NewExpression","messageId":"unsafeNew","endLine":9,"endColumn":61},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise returned in function argument where a void return was expected.","line":15,"column":7,"nodeType":"ArrowFunctionExpression","messageId":"voidReturnArgument","endLine":31,"endColumn":8},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":17,"column":17,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":17,"endColumn":80},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":17,"column":37,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":17,"endColumn":72},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .detectUnusedCode on an `any` value.","line":17,"column":56,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":17,"endColumn":72},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .length on an `any` value.","line":19,"column":27,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":19,"endColumn":33},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":20,"column":13,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":22,"endColumn":15,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[696,696],"text":"void "},"desc":"Add void operator to ignore."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":24,"column":13,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":26,"endColumn":15,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[854,854],"text":"void "},"desc":"Add void operator to ignore."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .length on an `any` value.","line":25,"column":36,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":25,"endColumn":42},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":29,"column":11,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":29,"endColumn":83,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[1101,1101],"text":"void "},"desc":"Add void operator to ignore."}]},{"ruleId":"@typescript-eslint/restrict-template-expressions","severity":2,"message":"Invalid type \"unknown\" of template literal expression.","line":29,"column":74,"nodeType":"Identifier","messageId":"invalidType","endLine":29,"endColumn":79},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise returned in function argument where a void return was expected.","line":39,"column":7,"nodeType":"ArrowFunctionExpression","messageId":"voidReturnArgument","endLine":45,"endColumn":8},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":41,"column":17,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":41,"endColumn":52},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .removeUnusedCode on an `any` value.","line":41,"column":36,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":41,"endColumn":52},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":43,"column":11,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":43,"endColumn":82,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[1513,1513],"text":"void "},"desc":"Add void operator to ignore."}]},{"ruleId":"@typescript-eslint/restrict-template-expressions","severity":2,"message":"Invalid type \"unknown\" of template literal expression.","line":43,"column":73,"nodeType":"Identifier","messageId":"invalidType","endLine":43,"endColumn":78}],"suppressedMessages":[],"errorCount":17,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as vscode from 'vscode';\nimport { CodeSimplifier } from './codeSimplifier';\nimport { UnusedCodeDetector } from './unusedCodeDetector';\n\n// Export refactoring tools\nexport { CodeSimplifier };\n\nexport function registerRefactoringCommands(context: vscode.ExtensionContext): void {\n  const unusedCodeDetector = new UnusedCodeDetector(context);\n\n  // Register detect unused code command\n  context.subscriptions.push(\n    vscode.commands.registerTextEditorCommand(\n      'localLLMAgent.refactoring.detectUnusedCode',\n      async (editor) => {\n        try {\n          const diagnostics = await unusedCodeDetector.detectUnusedCode(editor);\n\n          if (diagnostics.length === 0) {\n            vscode.window.showInformationMessage(\n              'No unused code detected in the current selection or file',\n            );\n          } else {\n            vscode.window.showInformationMessage(\n              `Found ${diagnostics.length} unused code elements. Use the Problems panel to review them or run 'Remove Unused Code' to clean up.`,\n            );\n          }\n        } catch (error) {\n          vscode.window.showErrorMessage(`Error detecting unused code: ${error}`);\n        }\n      },\n    ),\n  );\n\n  // Register remove unused code command\n  context.subscriptions.push(\n    vscode.commands.registerTextEditorCommand(\n      'localLLMAgent.refactoring.removeUnusedCode',\n      async (editor) => {\n        try {\n          await unusedCodeDetector.removeUnusedCode(editor);\n        } catch (error) {\n          vscode.window.showErrorMessage(`Error removing unused code: ${error}`);\n        }\n      },\n    ),\n  );\n}\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/semi","replacedBy":["@stylistic/ts/semi"]}]},{"filePath":"D:\\___coding\\tools\\copilot_ppa\\src\\security\\types.ts","messages":[{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Interface name `SecurityIssue` must match the RegExp: /^I[A-Z]/u","line":11,"column":18,"nodeType":"Identifier","messageId":"satisfyCustom","endLine":11,"endColumn":31},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Interface name `SecurityAnalysisResult` must match the RegExp: /^I[A-Z]/u","line":37,"column":18,"nodeType":"Identifier","messageId":"satisfyCustom","endLine":37,"endColumn":40},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Interface name `SecurityScanOptions` must match the RegExp: /^I[A-Z]/u","line":51,"column":18,"nodeType":"Identifier","messageId":"satisfyCustom","endLine":51,"endColumn":37},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Interface name `SecurityReportOptions` must match the RegExp: /^I[A-Z]/u","line":59,"column":18,"nodeType":"Identifier","messageId":"satisfyCustom","endLine":59,"endColumn":39},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Interface name `SecurityViewOptions` must match the RegExp: /^I[A-Z]/u","line":66,"column":18,"nodeType":"Identifier","messageId":"satisfyCustom","endLine":66,"endColumn":37},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Interface name `SecurityProvider` must match the RegExp: /^I[A-Z]/u","line":73,"column":18,"nodeType":"Identifier","messageId":"satisfyCustom","endLine":73,"endColumn":34},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Interface name `SecurityCodeActionProvider` must match the RegExp: /^I[A-Z]/u","line":82,"column":18,"nodeType":"Identifier","messageId":"satisfyCustom","endLine":82,"endColumn":44},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Interface name `SecurityDiagnosticProvider` must match the RegExp: /^I[A-Z]/u","line":87,"column":18,"nodeType":"Identifier","messageId":"satisfyCustom","endLine":87,"endColumn":44},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Interface name `SecurityHoverProvider` must match the RegExp: /^I[A-Z]/u","line":92,"column":18,"nodeType":"Identifier","messageId":"satisfyCustom","endLine":92,"endColumn":39},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Interface name `SecurityPattern` must match the RegExp: /^I[A-Z]/u","line":97,"column":18,"nodeType":"Identifier","messageId":"satisfyCustom","endLine":97,"endColumn":33},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Interface name `CodeScanResult` must match the RegExp: /^I[A-Z]/u","line":105,"column":18,"nodeType":"Identifier","messageId":"satisfyCustom","endLine":105,"endColumn":32}],"suppressedMessages":[],"errorCount":11,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as vscode from 'vscode';\n\nexport enum SecuritySeverity {\n  Critical = 'critical',\n  High = 'high',\n  Medium = 'medium',\n  Low = 'low',\n  Info = 'info',\n}\n\nexport interface SecurityIssue {\n  id: string;\n  name: string;\n  description: string;\n  severity: SecuritySeverity;\n  filePath?: string;\n  lineNumber?: number;\n  columnNumber?: number;\n  hasFix: boolean;\n  recommendation: string;\n  category: SecurityCategory;\n  cwe?: string;\n}\n\nexport enum SecurityCategory {\n  Injection = 'injection',\n  XSS = 'xss',\n  PathTraversal = 'pathTraversal',\n  Authentication = 'authentication',\n  Authorization = 'authorization',\n  Encryption = 'encryption',\n  Configuration = 'configuration',\n  Validation = 'validation',\n  Other = 'other',\n}\n\nexport interface SecurityAnalysisResult {\n  issues: SecurityIssue[];\n  timestamp: Date;\n  summary: {\n    critical: number;\n    high: number;\n    medium: number;\n    low: number;\n    info: number;\n    total: number;\n  };\n  fixableCount: number;\n}\n\nexport interface SecurityScanOptions {\n  includeDependencies?: boolean;\n  includeNodeModules?: boolean;\n  severity?: SecuritySeverity;\n  fastScan?: boolean;\n  categories?: SecurityCategory[];\n}\n\nexport interface SecurityReportOptions {\n  includeRecommendations?: boolean;\n  includeFix?: boolean;\n  format?: 'json' | 'html' | 'markdown';\n  outputPath?: string;\n}\n\nexport interface SecurityViewOptions {\n  showInEditor?: boolean;\n  groupBySeverity?: boolean;\n  groupByCategory?: boolean;\n  sortByLocation?: boolean;\n}\n\nexport interface SecurityProvider {\n  id: string;\n  name: string;\n  description: string;\n  scanFiles(options: SecurityScanOptions): Promise<SecurityAnalysisResult>;\n  generateReport(result: SecurityAnalysisResult, options: SecurityReportOptions): Promise<string>;\n  applyFix?(issue: SecurityIssue): Promise<boolean>;\n}\n\nexport interface SecurityCodeActionProvider {\n  provideFixes(document: vscode.TextDocument, range: vscode.Range): vscode.CodeAction[];\n  registerCodeActionProvider(): vscode.Disposable;\n}\n\nexport interface SecurityDiagnosticProvider {\n  provideDiagnostics(document: vscode.TextDocument): vscode.Diagnostic[];\n  registerDiagnosticCollection(): vscode.DiagnosticCollection;\n}\n\nexport interface SecurityHoverProvider {\n  provideHover(document: vscode.TextDocument, position: vscode.Position): vscode.Hover | undefined;\n  registerHoverProvider(): vscode.Disposable;\n}\n\nexport interface SecurityPattern {\n  id: string;\n  regex: RegExp;\n  severity: 'critical' | 'high' | 'medium' | 'low';\n  description: string;\n  recommendation: string;\n}\n\nexport interface CodeScanResult {\n  issues: SecurityIssue[];\n  scannedFiles: number;\n}\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/semi","replacedBy":["@stylistic/ts/semi"]}]},{"filePath":"D:\\___coding\\tools\\copilot_ppa\\src\\security\\types\\index.ts","messages":[{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Interface name `SecurityIssue` must match the RegExp: /^I[A-Z]/u","line":9,"column":18,"nodeType":"Identifier","messageId":"satisfyCustom","endLine":9,"endColumn":31},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Interface name `SecurityPattern` must match the RegExp: /^I[A-Z]/u","line":25,"column":18,"nodeType":"Identifier","messageId":"satisfyCustom","endLine":25,"endColumn":33},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Interface name `SecurityScanResult` must match the RegExp: /^I[A-Z]/u","line":38,"column":18,"nodeType":"Identifier","messageId":"satisfyCustom","endLine":38,"endColumn":36},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Interface name `VulnerabilityInfo` must match the RegExp: /^I[A-Z]/u","line":47,"column":18,"nodeType":"Identifier","messageId":"satisfyCustom","endLine":47,"endColumn":35},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Interface name `DependencyVulnerability` must match the RegExp: /^I[A-Z]/u","line":69,"column":18,"nodeType":"Identifier","messageId":"satisfyCustom","endLine":69,"endColumn":41},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Interface name `DependencyScanResult` must match the RegExp: /^I[A-Z]/u","line":81,"column":18,"nodeType":"Identifier","messageId":"satisfyCustom","endLine":81,"endColumn":38},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Interface name `SecuritySummary` must match the RegExp: /^I[A-Z]/u","line":96,"column":18,"nodeType":"Identifier","messageId":"satisfyCustom","endLine":96,"endColumn":33},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Interface name `SecurityRecommendation` must match the RegExp: /^I[A-Z]/u","line":106,"column":18,"nodeType":"Identifier","messageId":"satisfyCustom","endLine":106,"endColumn":40},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":114,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":114,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2258,2261],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2258,2261],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":116,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":116,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2310,2313],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2310,2313],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Interface name `RecommendationResult` must match the RegExp: /^I[A-Z]/u","line":122,"column":18,"nodeType":"Identifier","messageId":"satisfyCustom","endLine":122,"endColumn":38},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Interface name `SecurityAnalysisResult` must match the RegExp: /^I[A-Z]/u","line":131,"column":18,"nodeType":"Identifier","messageId":"satisfyCustom","endLine":131,"endColumn":40}],"suppressedMessages":[],"errorCount":12,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Severity levels for security issues\n */\nexport type SecuritySeverity = 'critical' | 'high' | 'medium' | 'low';\n\n/**\n * Base security issue information\n */\nexport interface SecurityIssue {\n  id: string;\n  name: string;\n  description: string;\n  severity: SecuritySeverity;\n  file: string;\n  line: number;\n  column: number;\n  codeSnippet: string;\n  recommendation?: string;\n  hasFix?: boolean;\n}\n\n/**\n * Pattern for identifying security issues in code\n */\nexport interface SecurityPattern {\n  id: string;\n  name: string;\n  description: string;\n  pattern: RegExp;\n  severity: SecuritySeverity;\n  languages: string[];\n  fix?: string;\n}\n\n/**\n * Result of a code security scan\n */\nexport interface SecurityScanResult {\n  issues: SecurityIssue[];\n  scannedFiles: number;\n  timestamp: number;\n}\n\n/**\n * Information about a security vulnerability\n */\nexport interface VulnerabilityInfo {\n  id: string;\n  title: string;\n  description: string;\n  severity: SecuritySeverity;\n  vulnerableVersions?: string;\n  patchedVersions?: string[];\n  packageName?: string;\n  version?: string;\n  references?: string[];\n  recommendation?: string;\n  publishedDate?: string;\n  cwe?: string[];\n  cvss?: {\n    score: number;\n    vector: string;\n  };\n}\n\n/**\n * Dependency vulnerability information\n */\nexport interface DependencyVulnerability {\n  name: string;\n  version: string;\n  vulnerabilityInfo: VulnerabilityInfo[];\n  fixAvailable: boolean;\n  fixedVersion?: string;\n  timestamp: number;\n}\n\n/**\n * Result of a dependency scan\n */\nexport interface DependencyScanResult {\n  vulnerabilities: DependencyVulnerability[];\n  totalDependencies: number;\n  hasVulnerabilities: boolean;\n  timestamp: number;\n  packageJsonPath?: string;\n  packageName?: string;\n  packageVersion?: string;\n  nodeModulesSize?: number;\n  nodeModulesLastUpdated?: number;\n}\n\n/**\n * Security summary counts by severity\n */\nexport interface SecuritySummary {\n  critical: number;\n  high: number;\n  medium: number;\n  low: number;\n}\n\n/**\n * Security recommendation\n */\nexport interface SecurityRecommendation {\n  id: string;\n  title: string;\n  description: string;\n  severity: SecuritySeverity;\n  category: 'code' | 'dependencies' | 'general';\n  impact: string;\n  effort: 'low' | 'medium' | 'high';\n  relatedIssues?: any[];\n  recommendation: string;\n  additionalInfo?: any;\n}\n\n/**\n * Result of recommendation generation\n */\nexport interface RecommendationResult {\n  recommendations: SecurityRecommendation[];\n  analysisSummary: SecuritySummary;\n  timestamp: number;\n}\n\n/**\n * Complete security analysis result\n */\nexport interface SecurityAnalysisResult {\n  codeResult: SecurityScanResult;\n  dependencyResult: DependencyScanResult;\n  recommendationsResult: RecommendationResult;\n  overallRiskScore: number;\n  timestamp: number;\n}\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/semi","replacedBy":["@stylistic/ts/semi"]}]},{"filePath":"D:\\___coding\\tools\\copilot_ppa\\src\\services\\AgentResponseEnhancer.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/semi","replacedBy":["@stylistic/ts/semi"]}]},{"filePath":"D:\\___coding\\tools\\copilot_ppa\\src\\services\\ConversationHistory.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/semi","replacedBy":["@stylistic/ts/semi"]}]},{"filePath":"D:\\___coding\\tools\\copilot_ppa\\src\\services\\ServiceRegistry.ts","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":2,"message":"Missing return type on function.","line":2,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":2,"endColumn":35}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Minimal stub for missing file to fix import errors\nexport function initializeServices() {}\nexport class ServiceRegistry {}\nexport class Services {}\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/semi","replacedBy":["@stylistic/ts/semi"]}]},{"filePath":"D:\\___coding\\tools\\copilot_ppa\\src\\services\\UserConfirmationService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/semi","replacedBy":["@stylistic/ts/semi"]}]},{"filePath":"D:\\___coding\\tools\\copilot_ppa\\src\\services\\codeQuality\\index.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":27,"column":5,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":27,"endColumn":52},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe construction of an any type value.","line":27,"column":20,"nodeType":"NewExpression","messageId":"unsafeNew","endLine":27,"endColumn":52},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":28,"column":5,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":28,"endColumn":57},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe construction of an any type value.","line":28,"column":29,"nodeType":"NewExpression","messageId":"unsafeNew","endLine":28,"endColumn":57},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":29,"column":5,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":29,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe construction of an any type value.","line":29,"column":27,"nodeType":"NewExpression","messageId":"unsafeNew","endLine":29,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":30,"column":5,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":30,"endColumn":81},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe construction of an any type value.","line":30,"column":34,"nodeType":"NewExpression","messageId":"unsafeNew","endLine":30,"endColumn":81},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":31,"column":5,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":31,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe construction of an any type value.","line":31,"column":26,"nodeType":"NewExpression","messageId":"unsafeNew","endLine":31,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":32,"column":5,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":32,"endColumn":79},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe construction of an any type value.","line":32,"column":40,"nodeType":"NewExpression","messageId":"unsafeNew","endLine":32,"endColumn":79},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":73,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":77,"endColumn":9},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":74,"column":9,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":74,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .analyzeDocument on an `any` value.","line":74,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":74,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":75,"column":9,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":75,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .analyzeDocument on an `any` value.","line":75,"column":29,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":75,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":76,"column":9,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":76,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .analyzeDocument on an `any` value.","line":76,"column":36,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":76,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `QualityIssue[]`.","line":80,"column":37,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":80,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `QualityIssue[]`.","line":81,"column":37,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":81,"endColumn":55},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `QualityIssue[]`.","line":82,"column":37,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":82,"endColumn":51},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":112,"column":53,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":112,"endColumn":55,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[3837,3839],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":216,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":216,"endColumn":71},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":216,"column":26,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":216,"endColumn":61},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .analyzeDocument on an `any` value.","line":216,"column":46,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":216,"endColumn":61},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":217,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":217,"endColumn":77},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":217,"column":31,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":217,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .filter on an `any` value.","line":217,"column":38,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":217,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .type on an `any` value.","line":217,"column":54,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":217,"endColumn":58},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .length on an `any` value.","line":220,"column":48,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":220,"endColumn":54}],"suppressedMessages":[],"errorCount":31,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { BestPracticesChecker } from './bestPracticesChecker';\nimport { CodeOptimizer } from './codeOptimizer';\nimport { CodeReviewer } from './codeReviewer';\nimport { DesignImprovementSuggester } from './designImprovementSuggester';\nimport { SecurityScanner } from './securityScanner';\nimport { CodeMetrics, CodeQualityConfig, QualityIssue, QualitySnapshot } from './types';\n\nexport { BestPracticesChecker, CodeOptimizer, DesignImprovementSuggester, SecurityScanner };\n\nexport type { CodeMetrics, CodeQualityConfig, QualityIssue, QualitySnapshot };\n\nexport interface ICodeAnalyzer {\n  analyzeDocument(document: import('vscode').TextDocument): Promise<QualityIssue[]>;\n}\n\nexport class CodeQualityService {\n  private _securityScanner: SecurityScanner;\n  private _codeOptimizer: CodeOptimizer;\n  private _bestPracticesChecker: BestPracticesChecker;\n  private _codeReviewer: CodeReviewer;\n  private _designImprovementSuggester: DesignImprovementSuggester;\n  private _qualityHistory: Map<string, QualitySnapshot[]>;\n  private _config: CodeQualityConfig;\n  private readonly _logger: Logger;\n\n  constructor(context: import('vscode').ExtensionContext) {\n    this._logger = new Logger('CodeQualityService');\n    this._securityScanner = new SecurityScanner(context);\n    this._codeOptimizer = new CodeOptimizer(context);\n    this._bestPracticesChecker = new BestPracticesChecker(context, this._logger);\n    this._codeReviewer = new CodeReviewer(context);\n    this._designImprovementSuggester = new DesignImprovementSuggester(context);\n    this._qualityHistory = new Map();\n    this._config = {\n      severityLevels: {\n        security: 'error',\n        style: 'warning',\n        performance: 'info',\n      },\n      ignorePatterns: [],\n      excludeTypes: [],\n    };\n  }\n\n  public getSecurityScanner(): SecurityScanner {\n    return this._securityScanner;\n  }\n\n  public getCodeOptimizer(): CodeOptimizer {\n    return this._codeOptimizer;\n  }\n\n  public getBestPracticesChecker(): BestPracticesChecker {\n    return this._bestPracticesChecker;\n  }\n\n  public getCodeReviewer(): CodeReviewer {\n    return this._codeReviewer;\n  }\n\n  public getDesignImprovementSuggester(): DesignImprovementSuggester {\n    return this._designImprovementSuggester;\n  }\n\n  public configure(config: Partial<CodeQualityConfig>): void {\n    this._config = { ...this._config, ...config };\n  }\n\n  public async analyzeCode(document: import('vscode').TextDocument): Promise<QualityIssue[]> {\n    const allIssues: QualityIssue[] = [];\n\n    try {\n      const [securityIssues, optimizationIssues, practiceIssues] = await Promise.all([\n        this._securityScanner.analyzeDocument(document),\n        this._codeOptimizer.analyzeDocument(document),\n        this._bestPracticesChecker.analyzeDocument(document),\n      ]);\n\n      allIssues.push(\n        ...this.applySeverityLevels(securityIssues),\n        ...this.applySeverityLevels(optimizationIssues),\n        ...this.applySeverityLevels(practiceIssues),\n      );\n\n      // Filter based on configuration\n      return this.filterIssues(allIssues);\n    } catch (error) {\n      console.error('Error analyzing code:', error);\n      return [];\n    }\n  }\n\n  public async updateQualityHistory(document: import('vscode').TextDocument): Promise<void> {\n    const issues = await this.analyzeCode(document);\n    const metrics = await this.calculateMetrics(document);\n\n    const snapshot: QualitySnapshot = {\n      timestamp: new Date(),\n      issues,\n      metrics,\n      score: this.calculateQualityScore(issues, metrics),\n    };\n\n    const key = document.uri.toString();\n    if (!this._qualityHistory.has(key)) {\n      this._qualityHistory.set(key, []);\n    }\n    this._qualityHistory.get(key)!.push(snapshot);\n  }\n\n  public getQualityTrends(uri: import('vscode').Uri): QualitySnapshot[] {\n    return this._qualityHistory.get(uri.toString()) || [];\n  }\n\n  private applySeverityLevels(issues: QualityIssue[]): QualityIssue[] {\n    return issues.map((issue) => ({\n      ...issue,\n      severity: this._config.severityLevels[issue.type] || issue.severity,\n    }));\n  }\n\n  private filterIssues(issues: QualityIssue[]): QualityIssue[] {\n    return issues.filter(\n      (issue) =>\n        !this._config.excludeTypes.includes(issue.type) &&\n        !this._config.ignorePatterns.some((pattern) =>\n          issue.message.toLowerCase().includes(pattern.toLowerCase()),\n        ),\n    );\n  }\n\n  private calculateQualityScore(issues: QualityIssue[], metrics: CodeMetrics): number {\n    // Weight different factors to calculate a score from 0-100\n    const issueScore = Math.max(0, 100 - issues.length * 5);\n    const complexityScore = Math.max(0, 100 - metrics.complexity * 10);\n    const maintainabilityScore = metrics.maintainability;\n\n    return Math.round((issueScore + complexityScore + maintainabilityScore) / 3);\n  }\n\n  public async calculateMetrics(document: import('vscode').TextDocument): Promise<CodeMetrics> {\n    const text = document.getText();\n\n    // Calculate cyclomatic complexity\n    const complexity = this.calculateComplexity(text);\n\n    // Calculate maintainability index (0-100)\n    const maintainability = this.calculateMaintainability(text);\n\n    // Calculate performance score\n    const performance = await this.calculatePerformance(document);\n\n    return { complexity, maintainability, performance };\n  }\n\n  private calculateComplexity(text: string): number {\n    let complexity = 1; // Base complexity\n    const patterns = [\n      /\\bif\\b/g, // if statements\n      /\\belse\\s+if\\b/g, // else if\n      /\\bfor\\b/g, // for loops\n      /\\bwhile\\b/g, // while loops\n      /\\bdo\\b/g, // do-while loops\n      /\\bswitch\\b/g, // switch statements\n      /\\bcatch\\b/g, // try-catch blocks\n      /\\breturn\\b/g, // return statements\n      /\\band\\b/g, // logical AND\n      /\\bor\\b/g, // logical OR\n      /&&/g, // && operator\n      /\\|\\|/g, // || operator\n      /\\?/g, // ternary operator\n    ];\n\n    // Add complexity for each control flow statement and operator\n    patterns.forEach((pattern) => {\n      const matches = text.match(pattern);\n      if (matches) {\n        complexity += matches.length;\n      }\n    });\n\n    // Add complexity for function declarations/expressions\n    const functionMatches = text.match(/\\bfunction\\b|\\b=>\\b/g);\n    if (functionMatches) {\n      complexity += functionMatches.length;\n    }\n\n    return complexity;\n  }\n\n  private calculateMaintainability(text: string): number {\n    // Simplified maintainability calculation\n    const lines = text.split('\\n').length;\n    const commentLines = text\n      .split('\\n')\n      .filter((line) => line.trim().startsWith('//') || line.trim().startsWith('/*')).length;\n    const codeLines = lines - commentLines;\n\n    // Factors affecting maintainability:\n    // 1. Comment ratio (0-30 points)\n    const commentScore = Math.min(30, (commentLines / codeLines) * 100);\n\n    // 2. Average line length (0-30 points)\n    const avgLineLength = text.length / lines;\n    const lengthScore = Math.max(0, 30 - (avgLineLength - 80) * 0.5);\n\n    // 3. Code structure (0-40 points)\n    const complexity = this.calculateComplexity(text);\n    const complexityScore = Math.max(0, 40 - complexity * 2);\n\n    return Math.round(commentScore + lengthScore + complexityScore);\n  }\n\n  private async calculatePerformance(document: import('vscode').TextDocument): Promise<number> {\n    // Get performance issues from optimizer\n    const issues = await this._codeOptimizer.analyzeDocument(document);\n    const performanceIssues = issues.filter((i) => i.type === 'performance');\n\n    // Start with 100 and deduct points for each performance issue\n    return Math.max(0, 100 - performanceIssues.length * 10);\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/semi","replacedBy":["@stylistic/ts/semi"]}]},{"filePath":"D:\\___coding\\tools\\copilot_ppa\\src\\services\\codeQuality\\types.ts","messages":[{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Interface name `QualityIssue` must match the RegExp: /^I[A-Z]/u","line":4,"column":18,"nodeType":"Identifier","messageId":"satisfyCustom","endLine":4,"endColumn":30},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Interface name `CodeMetrics` must match the RegExp: /^I[A-Z]/u","line":12,"column":18,"nodeType":"Identifier","messageId":"satisfyCustom","endLine":12,"endColumn":29},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Interface name `QualitySnapshot` must match the RegExp: /^I[A-Z]/u","line":18,"column":18,"nodeType":"Identifier","messageId":"satisfyCustom","endLine":18,"endColumn":33},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Interface name `CodeQualityConfig` must match the RegExp: /^I[A-Z]/u","line":25,"column":18,"nodeType":"Identifier","messageId":"satisfyCustom","endLine":25,"endColumn":35},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Interface name `AnalysisResult` must match the RegExp: /^I[A-Z]/u","line":43,"column":18,"nodeType":"Identifier","messageId":"satisfyCustom","endLine":43,"endColumn":32},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Interface name `AnalysisMetrics` must match the RegExp: /^I[A-Z]/u","line":48,"column":18,"nodeType":"Identifier","messageId":"satisfyCustom","endLine":48,"endColumn":33},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Interface name `AnalysisHistory` must match the RegExp: /^I[A-Z]/u","line":56,"column":18,"nodeType":"Identifier","messageId":"satisfyCustom","endLine":56,"endColumn":33}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as vscode from 'vscode';\nimport { SecurityIssue } from '../../security/types';\n\nexport interface QualityIssue {\n  file: string;\n  line: number;\n  message: string;\n  severity: 'error' | 'warning' | 'info' | 'suggestion';\n  type: string;\n}\n\nexport interface CodeMetrics {\n  complexity: number;\n  maintainability: number;\n  performance: number;\n}\n\nexport interface QualitySnapshot {\n  timestamp: Date;\n  issues: QualityIssue[];\n  metrics: CodeMetrics;\n  score: number;\n}\n\nexport interface CodeQualityConfig {\n  severityLevels: {\n    [type: string]: 'error' | 'warning' | 'info' | 'suggestion';\n  };\n  ignorePatterns: string[];\n  excludeTypes: string[];\n  enableSecurity: boolean;\n  enablePerformance: boolean;\n  enableMaintainability: boolean;\n  maxHistoryEntries: number;\n  severityThresholds: {\n    critical: number;\n    high: number;\n    medium: number;\n    low: number;\n  };\n}\n\nexport interface AnalysisResult {\n  issues: SecurityIssue[];\n  diagnostics: vscode.Diagnostic[];\n}\n\nexport interface AnalysisMetrics {\n  complexity: number;\n  maintainability: number;\n  security: number;\n  performance: number;\n  timestamp: number;\n}\n\nexport interface AnalysisHistory {\n  metrics: AnalysisMetrics[];\n  maxEntries: number;\n}\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/semi","replacedBy":["@stylistic/ts/semi"]}]},{"filePath":"D:\\___coding\\tools\\copilot_ppa\\src\\services\\conversation\\types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/semi","replacedBy":["@stylistic/ts/semi"]}]},{"filePath":"D:\\___coding\\tools\\copilot_ppa\\src\\services\\dependencyGraph\\types.ts","messages":[{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Interface name `DependencyNode` must match the RegExp: /^I[A-Z]/u","line":1,"column":18,"nodeType":"Identifier","messageId":"satisfyCustom","endLine":1,"endColumn":32},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Interface name `DependencyLink` must match the RegExp: /^I[A-Z]/u","line":9,"column":18,"nodeType":"Identifier","messageId":"satisfyCustom","endLine":9,"endColumn":32},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Interface name `DependencyGraph` must match the RegExp: /^I[A-Z]/u","line":15,"column":18,"nodeType":"Identifier","messageId":"satisfyCustom","endLine":15,"endColumn":33}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export interface DependencyNode {\n  id: string;\n  path: string;\n  type: 'file' | 'package' | 'workspace';\n  dependencies: string[];\n  metadata?: Record<string, unknown>;\n}\n\nexport interface DependencyLink {\n  source: string;\n  target: string;\n  type: 'import' | 'devDependency' | 'dependency';\n}\n\nexport interface DependencyGraph {\n  nodes: DependencyNode[];\n  links: DependencyLink[];\n}\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/semi","replacedBy":["@stylistic/ts/semi"]}]},{"filePath":"D:\\___coding\\tools\\copilot_ppa\\src\\services\\llm\\LLMFactory.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'options' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":10,"column":29,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":50},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":10,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":10,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[262,265],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[262,265],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":14,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":14,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[398,401],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[398,401],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":18,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[509,512],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[509,512],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":22,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":22,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[623,626],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[623,626],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'endpoint' is defined but never used. Allowed unused args must match /^_/u.","line":26,"column":31,"nodeType":"Identifier","messageId":"unusedVar","endLine":26,"endColumn":48},{"ruleId":"@typescript-eslint/require-await","severity":2,"message":"Async method 'initialize' has no 'await' expression.","line":30,"column":3,"nodeType":"FunctionExpression","messageId":"missingAwait","endLine":30,"endColumn":26}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { LLMStreamProvider } from './LLMStreamProvider';\n// ...existing code...\n\n/**\n * Factory for accessing LLM services\n */\nexport class LLMFactory {\n  private static instance: LLMFactory;\n  // ...existing code...\n  public static getInstance(options: Partial<any> = {}): LLMFactory {\n    // Implementation placeholder\n    throw new Error('Not implemented');\n  }\n  public getConnectionManager(): any {\n    // Implementation placeholder\n    throw new Error('Not implemented');\n  }\n  public getHostManager(): any {\n    // Implementation placeholder\n    throw new Error('Not implemented');\n  }\n  public getSessionManager(): any {\n    // Implementation placeholder\n    throw new Error('Not implemented');\n  }\n  public createStreamProvider(endpoint?: string): LLMStreamProvider {\n    // Implementation placeholder\n    throw new Error('Not implemented');\n  }\n  public async initialize(): Promise<void> {\n    // Implementation placeholder\n    throw new Error('Not implemented');\n  }\n  public dispose(): void {\n    // Implementation placeholder\n    throw new Error('Not implemented');\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/semi","replacedBy":["@stylistic/ts/semi"]}]},{"filePath":"D:\\___coding\\tools\\copilot_ppa\\src\\services\\llm\\LLMStreamProvider.ts","messages":[{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Interface name `LLMStreamChunk` must match the RegExp: /^I[A-Z]/u","line":6,"column":18,"nodeType":"Identifier","messageId":"satisfyCustom","endLine":6,"endColumn":32},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":9,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":9,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[182,185],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[182,185],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Interface name `LLMStreamEvents` must match the RegExp: /^I[A-Z]/u","line":15,"column":18,"nodeType":"Identifier","messageId":"satisfyCustom","endLine":15,"endColumn":33},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":25,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":25,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[534,537],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[534,537],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":26,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":26,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[614,617],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[614,617],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":27,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":27,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[693,696],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[693,696],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":28,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":28,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[776,779],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[776,779],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/require-await","severity":2,"message":"Async method 'streamMessage' has no 'await' expression.","line":33,"column":3,"nodeType":"FunctionExpression","messageId":"missingAwait","endLine":33,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'payload' is defined but never used. Allowed unused args must match /^_/u.","line":34,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":34,"endColumn":17},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":34,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":34,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[951,954],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[951,954],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'config' is defined but never used. Allowed unused args must match /^_/u.","line":35,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":35,"endColumn":26},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":35,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":35,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1023,1026],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1023,1026],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":52,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":52,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1623,1626],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1623,1626],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":59,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":59,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1999,2002],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1999,2002],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":14,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { EventEmitter } from 'events';\n\n/**\n * Chunk of text from a streaming LLM response\n */\nexport interface LLMStreamChunk {\n  content: string;\n  done: boolean;\n  [key: string]: any;\n}\n\n/**\n * Events emitted by the stream provider\n */\nexport interface LLMStreamEvents {\n  data: (chunk: LLMStreamChunk) => void;\n  error: (error: Error) => void;\n  end: (finalText: string) => void;\n}\n\n/**\n * Provider for handling streaming LLM responses\n */\nexport class LLMStreamProvider extends EventEmitter {\n  private readonly streamProcessor: any; // TODO: Replace 'any' with actual type\n  private readonly chunkExtractor: any; // TODO: Replace 'any' with actual type\n  private readonly streamManager: any; // TODO: Replace 'any' with actual type\n  private readonly connectionManager: any; // TODO: Replace 'any' with actual type\n\n  /**\n   * Streams a message to the LLM and emits data events as chunks arrive.\n   */\n  public async streamMessage(\n    payload: any, // TODO: Replace 'any' with LLMMessagePayload\n    config?: Partial<any>, // TODO: Replace 'any' with LLMSessionConfig\n  ): Promise<void> {\n    // Implementation placeholder\n    throw new Error('Not implemented');\n  }\n\n  /**\n   * Aborts the current stream.\n   */\n  public abort(): void {\n    // Implementation placeholder\n    throw new Error('Not implemented');\n  }\n\n  public override on(event: 'data', listener: (chunk: LLMStreamChunk) => void): this;\n  public override on(event: 'error', listener: (error: Error) => void): this;\n  public override on(event: 'end', listener: (finalText: string) => void): this;\n  public override on(event: string, listener: (...args: any[]) => void): this {\n    return super.on(event, listener);\n  }\n\n  public override once(event: 'data', listener: (chunk: LLMStreamChunk) => void): this;\n  public override once(event: 'error', listener: (error: Error) => void): this;\n  public override once(event: 'end', listener: (finalText: string) => void): this;\n  public override once(event: string, listener: (...args: any[]) => void): this {\n    return super.once(event, listener);\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/semi","replacedBy":["@stylistic/ts/semi"]}]},{"filePath":"D:\\___coding\\tools\\copilot_ppa\\src\\services\\llm\\errors.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/semi","replacedBy":["@stylistic/ts/semi"]}]},{"filePath":"D:\\___coding\\tools\\copilot_ppa\\src\\services\\llm\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/semi","replacedBy":["@stylistic/ts/semi"]}]},{"filePath":"D:\\___coding\\tools\\copilot_ppa\\src\\services\\llm\\llmProvider.ts","messages":[{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Interface name `LLMProviderOptions` must match the RegExp: /^I[A-Z]/u","line":1,"column":18,"nodeType":"Identifier","messageId":"satisfyCustom","endLine":1,"endColumn":36},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":5,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":5,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[119,122],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[119,122],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Interface name `LLMProvider` must match the RegExp: /^I[A-Z]/u","line":8,"column":18,"nodeType":"Identifier","messageId":"satisfyCustom","endLine":8,"endColumn":29}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export interface LLMProviderOptions {\n  model?: string;\n  maxTokens?: number;\n  temperature?: number;\n  [key: string]: any;\n}\n\nexport interface LLMProvider {\n  id: string;\n  name: string;\n  isConnected(): boolean;\n  connect(): Promise<void>;\n  disconnect(): Promise<void>;\n  isAvailable(): Promise<boolean>;\n  listModels(): Promise<Array<{ name: string; modified_at: string; size: number }>>;\n  generateCompletion(\n    model: string,\n    prompt: string,\n    systemPrompt?: string,\n    options?: LLMProviderOptions,\n  ): Promise<{\n    content: string;\n    model: string;\n    usage?: { promptTokens: number; completionTokens: number; totalTokens: number };\n  }>;\n  streamCompletion(\n    model: string,\n    prompt: string,\n    systemPrompt?: string,\n    options?: LLMProviderOptions,\n    callback?: (event: { content: string; done: boolean }) => void,\n  ): Promise<void>;\n  getModelInfo?(modelId: string): Promise<{\n    id: string;\n    name: string;\n    provider: string;\n    parameters: number;\n    contextLength: number;\n  }>;\n}\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/semi","replacedBy":["@stylistic/ts/semi"]}]},{"filePath":"D:\\___coding\\tools\\copilot_ppa\\src\\services\\llm\\providers\\OllamaProvider.ts","messages":[{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Interface name `OllamaModelInfo` must match the RegExp: /^I[A-Z]/u","line":45,"column":11,"nodeType":"Identifier","messageId":"satisfyCustom","endLine":45,"endColumn":26},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Interface name `OllamaGenerateRequest` must match the RegExp: /^I[A-Z]/u","line":61,"column":11,"nodeType":"Identifier","messageId":"satisfyCustom","endLine":61,"endColumn":32},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Interface name `OllamaRequestOptions` must match the RegExp: /^I[A-Z]/u","line":77,"column":11,"nodeType":"Identifier","messageId":"satisfyCustom","endLine":77,"endColumn":31},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Interface name `OllamaStreamEvent` must match the RegExp: /^I[A-Z]/u","line":84,"column":11,"nodeType":"Identifier","messageId":"satisfyCustom","endLine":84,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'OllamaStreamEvent' is defined but never used. Allowed unused vars must match /^_/u.","line":84,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":84,"endColumn":28},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":90,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":90,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1916,1919],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1916,1919],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":92,"column":3,"nodeType":"PropertyDefinition","messageId":"anyAssignment","endLine":92,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":92,"column":20,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":92,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .getInstance on an `any` value.","line":92,"column":27,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":92,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":95,"column":5,"nodeType":"Super","messageId":"unsafeCall","endLine":95,"endColumn":10},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":97,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":97,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":98,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":98,"endColumn":46},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type cast is required.","line":98,"column":16,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":98,"endColumn":37,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[2186,2207],"text":"(Boolean(config.requestTimeout))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":105,"column":13,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":105,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .get on an `any` value.","line":105,"column":25,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":105,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":113,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":113,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .error on an `any` value.","line":113,"column":19,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":113,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":125,"column":13,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":125,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .get on an `any` value.","line":125,"column":25,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":125,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":128,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":128,"endColumn":23},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .warn on an `any` value.","line":128,"column":19,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":128,"endColumn":23},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":134,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":134,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":135,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":135,"endColumn":18},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .Initializing on an `any` value.","line":135,"column":33,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":135,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":140,"column":74,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":140,"endColumn":81},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":141,"column":9,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":141,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .error on an `any` value.","line":141,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":141,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":146,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":146,"endColumn":20},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .Active on an `any` value.","line":146,"column":35,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":146,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":147,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":147,"endColumn":23},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .info on an `any` value.","line":147,"column":19,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":147,"endColumn":23},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":149,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":149,"endColumn":20},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":150,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":150,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .error on an `any` value.","line":150,"column":19,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":150,"endColumn":24},{"ruleId":"@typescript-eslint/require-await","severity":2,"message":"Async method 'disconnect' has no 'await' expression.","line":155,"column":3,"nodeType":"FunctionExpression","messageId":"missingAwait","endLine":155,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":156,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":156,"endColumn":18},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .Deactivating on an `any` value.","line":156,"column":33,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":156,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":158,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":158,"endColumn":18},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .Inactive on an `any` value.","line":158,"column":33,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":158,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":159,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":159,"endColumn":21},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .info on an `any` value.","line":159,"column":17,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":159,"endColumn":21},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":164,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":164,"endColumn":58},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":164,"column":30,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":164,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .get on an `any` value.","line":164,"column":42,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":164,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":165,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":165,"endColumn":48},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type cast is required.","line":165,"column":22,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":165,"endColumn":42,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[4125,4145],"text":"(Boolean(response.data.models))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .data on an `any` value.","line":165,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":165,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":168,"column":31,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":168,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .name on an `any` value.","line":168,"column":37,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":168,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `OllamaModelInfo`.","line":168,"column":43,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":168,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":170,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":170,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .debug on an `any` value.","line":170,"column":19,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":170,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":170,"column":56,"nodeType":"Property","messageId":"anyAssignment","endLine":170,"endColumn":76},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .length on an `any` value.","line":170,"column":70,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":170,"endColumn":76},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":173,"column":63,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":173,"endColumn":70},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":174,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":174,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .error on an `any` value.","line":174,"column":19,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":174,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of an `any[]` typed value.","line":181,"column":5,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":183,"endColumn":7},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of an `any` typed value.","line":182,"column":7,"nodeType":"CallExpression","messageId":"unsafeReturn","endLine":182,"endColumn":38},{"ruleId":"@typescript-eslint/require-await","severity":2,"message":"Async method 'getModelInfo' has no 'await' expression.","line":186,"column":3,"nodeType":"FunctionExpression","messageId":"missingAwait","endLine":186,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":189,"column":53,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":189,"endColumn":60},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":190,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":190,"endColumn":23},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .warn on an `any` value.","line":190,"column":19,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":190,"endColumn":23},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of an `any` typed value.","line":193,"column":5,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":193,"endColumn":49},{"ruleId":"@typescript-eslint/require-await","severity":2,"message":"Async method 'getCapabilities' has no 'await' expression.","line":196,"column":3,"nodeType":"FunctionExpression","messageId":"missingAwait","endLine":196,"endColumn":31},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":216,"column":13,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":216,"endColumn":25,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[5786,5798],"text":"(systemPrompt != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[5786,5798],"text":"(systemPrompt ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[5786,5798],"text":"(Boolean(systemPrompt))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":235,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":235,"endColumn":72},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":235,"column":30,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":235,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .post on an `any` value.","line":235,"column":42,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":235,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":243,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":243,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .data on an `any` value.","line":243,"column":27,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":243,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":245,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":245,"endColumn":61},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type cast is required.","line":245,"column":25,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":245,"endColumn":56,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[6959,6990],"text":"(Boolean(response.data.prompt_eval_count))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .data on an `any` value.","line":245,"column":34,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":245,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":246,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":246,"endColumn":58},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type cast is required.","line":246,"column":29,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":246,"endColumn":53,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[7025,7049],"text":"(Boolean(response.data.eval_count))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .data on an `any` value.","line":246,"column":38,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":246,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":247,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":247,"endColumn":96},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type cast is required.","line":247,"column":25,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":247,"endColumn":56,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[7080,7111],"text":"(Boolean(response.data.prompt_eval_count))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .data on an `any` value.","line":247,"column":34,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":247,"endColumn":38},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type cast is required.","line":247,"column":66,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":247,"endColumn":90,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[7121,7145],"text":"(Boolean(response.data.eval_count))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .data on an `any` value.","line":247,"column":75,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":247,"endColumn":79},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":251,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":251,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .debug on an `any` value.","line":251,"column":19,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":251,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":256,"column":9,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":256,"endColumn":16},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":259,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":259,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .error on an `any` value.","line":259,"column":19,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":259,"endColumn":24},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":285,"column":13,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":285,"endColumn":25,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[8216,8228],"text":"(systemPrompt != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[8216,8228],"text":"(systemPrompt ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[8216,8228],"text":"(Boolean(systemPrompt))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":304,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":306,"endColumn":9},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":304,"column":30,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":304,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .post on an `any` value.","line":304,"column":42,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":304,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .data on an `any` value.","line":308,"column":42,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":308,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":309,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":309,"endColumn":50},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":309,"column":33,"nodeType":"CallExpression","messageId":"unsafeArgument","endLine":309,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":309,"column":33,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":309,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .toString on an `any` value.","line":309,"column":39,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":309,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":312,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":312,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .response on an `any` value.","line":312,"column":27,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":312,"endColumn":35},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type cast is required.","line":313,"column":21,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":313,"endColumn":30,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[9337,9346],"text":"(Boolean(data.done))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .done on an `any` value.","line":313,"column":26,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":313,"endColumn":30},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":320,"column":9,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":320,"endColumn":16},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":323,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":323,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .error on an `any` value.","line":323,"column":19,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":323,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":342,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":342,"endColumn":24},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":349,"column":43,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":349,"endColumn":45,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[10390,10392],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":358,"column":10,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":358,"endColumn":14,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[10596,10601],"text":"size == null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[10597,10601],"text":"(size ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[10596,10601],"text":"!Boolean(size)"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":106,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import axios from 'axios';\nimport { Logger } from '../../../utils/logger';\nimport { LLMMessage, LLMModelInfo, LLMRequestOptions, LLMResponse, LLMStreamEvent } from '../types';\nimport { ProviderConfig } from '../validators/ProviderConfigValidator';\nimport {\n  BaseLLMProvider,\n  HealthCheckResult,\n  ProviderCapabilities,\n  ProviderState,\n} from './BaseLLMProvider';\n\nclass ModelError extends Error {\n  constructor(\n    message: string,\n    public providerId: string,\n    public modelId: string,\n  ) {\n    super(message);\n    this.name = 'ModelError';\n  }\n}\n\nclass ProviderError extends Error {\n  constructor(\n    message: string,\n    public providerId: string,\n    public details?: string,\n  ) {\n    super(message);\n    this.name = 'ProviderError';\n  }\n}\n\nclass RequestError extends Error {\n  constructor(\n    message: string,\n    public providerId: string,\n    public originalError: Error,\n  ) {\n    super(message);\n    this.name = 'RequestError';\n  }\n}\n\ninterface OllamaModelInfo {\n  name: string;\n  id: string;\n  digest: string;\n  size: number;\n  details: {\n    format: string;\n    family: string;\n    families?: string[];\n    parameter_size?: string;\n    quantization_level?: string;\n    capabilities?: string[];\n  };\n  license?: string;\n}\n\ninterface OllamaGenerateRequest {\n  model: string;\n  prompt: string;\n  system?: string | undefined;\n  options?:\n    | {\n        temperature?: number | null;\n        num_predict?: number | null;\n        top_k?: number | null;\n        presence_penalty?: number | null;\n        frequency_penalty?: number | null;\n        stop?: string[] | null;\n      }\n    | undefined;\n}\n\ninterface OllamaRequestOptions extends LLMRequestOptions {\n  topK?: number;\n  presenceBonus?: number;\n  frequencyBonus?: number;\n  stopSequences?: string[];\n}\n\ninterface OllamaStreamEvent {\n  content: string;\n  done: boolean;\n}\n\nexport class OllamaProvider extends BaseLLMProvider {\n  private client: any;\n  private modelDetails = new Map<string, OllamaModelInfo>();\n  private logger = Logger.getInstance();\n\n  constructor(config: ProviderConfig) {\n    super('ollama', 'Ollama', config);\n    this.client = axios.create({\n      baseURL: config.apiEndpoint,\n      timeout: config.requestTimeout || 30000,\n    });\n  }\n\n  protected async performHealthCheck(): Promise<HealthCheckResult> {\n    try {\n      const startTime = Date.now();\n      await this.client.get('/api/health');\n      const endTime = Date.now();\n      return {\n        isHealthy: true,\n        latency: endTime - startTime,\n        timestamp: endTime,\n      };\n    } catch (error) {\n      this.logger.error('Ollama health check failed', { error });\n      return {\n        isHealthy: false,\n        error: error instanceof Error ? error : new Error(String(error)),\n        latency: 0,\n        timestamp: Date.now(),\n      };\n    }\n  }\n\n  public async isAvailable(): Promise<boolean> {\n    try {\n      await this.client.get('/api/health');\n      return true;\n    } catch (error) {\n      this.logger.warn?.('Ollama service unavailable', { error });\n      return false;\n    }\n  }\n\n  public async connect(): Promise<void> {\n    this.validateConfig();\n    this.setState(ProviderState.Initializing);\n\n    try {\n      const available = await this.isAvailable();\n      if (!available) {\n        const err = new ProviderError('Ollama service is not available', this.id);\n        this.logger.error('Ollama connect failed', { error: err });\n        throw err;\n      }\n\n      await this.refreshModels();\n      this.setState(ProviderState.Active);\n      this.logger.info?.('Ollama provider connected');\n    } catch (error) {\n      this.setError(error instanceof Error ? error : new Error(String(error)));\n      this.logger.error('Ollama connect error', { error });\n      throw error;\n    }\n  }\n\n  public async disconnect(): Promise<void> {\n    this.setState(ProviderState.Deactivating);\n    this.modelDetails.clear();\n    this.setState(ProviderState.Inactive);\n    this.logger.info?.('Ollama provider disconnected');\n  }\n\n  private async refreshModels(): Promise<void> {\n    try {\n      const response = await this.client.get('/api/tags');\n      const models = response.data.models || [];\n      this.modelDetails.clear();\n      for (const model of models) {\n        this.modelDetails.set(model.name, model);\n      }\n      this.logger.debug?.('Ollama models refreshed', { count: models.length });\n    } catch (error) {\n      const errorString = error instanceof Error ? error.message : String(error);\n      const err = new ProviderError('Failed to fetch models', this.id, errorString);\n      this.logger.error('Ollama refreshModels error', { error: err });\n      throw err;\n    }\n  }\n\n  public async getAvailableModels(): Promise<LLMModelInfo[]> {\n    await this.refreshModels();\n    return Array.from(this.modelDetails.entries()).map(([id, info]) =>\n      this.convertModelInfo(id, info),\n    );\n  }\n\n  public async getModelInfo(modelId: string): Promise<LLMModelInfo> {\n    const info = this.modelDetails.get(modelId);\n    if (!info) {\n      const err = new ModelError('Model not found', this.id, modelId);\n      this.logger.warn?.('Ollama getModelInfo: model not found', { modelId, error: err });\n      throw err;\n    }\n    return this.convertModelInfo(modelId, info);\n  }\n\n  public async getCapabilities(): Promise<ProviderCapabilities> {\n    return {\n      maxContextLength: 4096,\n      supportsChatCompletion: true,\n      supportsStreaming: true,\n      supportsSystemPrompts: true,\n    };\n  }\n\n  public async generateCompletion(\n    model: string,\n    prompt: string,\n    systemPrompt?: string,\n    options?: LLMRequestOptions,\n  ): Promise<LLMResponse> {\n    try {\n      const ollamaOptions = options as OllamaRequestOptions;\n      const request: OllamaGenerateRequest = {\n        model,\n        prompt,\n        ...(systemPrompt && { system: systemPrompt }),\n        ...(options && {\n          options: {\n            ...(options.temperature !== undefined && { temperature: options.temperature }),\n            ...(options.maxTokens !== undefined && { num_predict: options.maxTokens }),\n            ...(ollamaOptions?.topK !== undefined && { top_k: ollamaOptions.topK }),\n            ...(ollamaOptions?.presenceBonus !== undefined && {\n              presence_penalty: ollamaOptions.presenceBonus,\n            }),\n            ...(ollamaOptions?.frequencyBonus !== undefined && {\n              frequency_penalty: ollamaOptions.frequencyBonus,\n            }),\n            ...(ollamaOptions?.stopSequences !== undefined && {\n              stop: ollamaOptions.stopSequences,\n            }),\n          },\n        }),\n      };\n\n      const response = await this.client.post('/api/generate', request);\n\n      const result: LLMResponse = {\n        id: `ollama-${Date.now()}`,\n        requestId: crypto.randomUUID?.() || `req-${Date.now()}`,\n        model: model,\n        prompt: prompt,\n        timestamp: Date.now(),\n        content: response.data.response,\n        usage: {\n          promptTokens: response.data.prompt_eval_count || 0,\n          completionTokens: response.data.eval_count || 0,\n          totalTokens: (response.data.prompt_eval_count || 0) + (response.data.eval_count || 0),\n        },\n      };\n\n      this.logger.debug?.('Ollama completion generated', { model, promptLength: prompt.length });\n      return result;\n    } catch (error) {\n      const err = new RequestError(\n        'Generation failed',\n        this.id,\n        error instanceof Error ? error : new Error(String(error)),\n      );\n      this.logger.error('Ollama generateCompletion error', { error: err });\n      throw err;\n    }\n  }\n\n  public async generateChatCompletion(\n    model: string,\n    messages: LLMMessage[],\n    options?: LLMRequestOptions,\n  ): Promise<LLMResponse> {\n    const prompt = this.formatChatMessages(messages);\n    return this.generateCompletion(model, prompt, undefined, options);\n  }\n\n  public async streamCompletion(\n    model: string,\n    prompt: string,\n    systemPrompt?: string,\n    options?: LLMRequestOptions,\n    callback?: (event: LLMStreamEvent) => void,\n  ): Promise<void> {\n    try {\n      const ollamaOptions = options as OllamaRequestOptions;\n      const request: OllamaGenerateRequest = {\n        model,\n        prompt,\n        ...(systemPrompt && { system: systemPrompt }),\n        ...(options && {\n          options: {\n            ...(options.temperature !== undefined && { temperature: options.temperature }),\n            ...(options.maxTokens !== undefined && { num_predict: options.maxTokens }),\n            ...(ollamaOptions?.topK !== undefined && { top_k: ollamaOptions.topK }),\n            ...(ollamaOptions?.presenceBonus !== undefined && {\n              presence_penalty: ollamaOptions.presenceBonus,\n            }),\n            ...(ollamaOptions?.frequencyBonus !== undefined && {\n              frequency_penalty: ollamaOptions.frequencyBonus,\n            }),\n            ...(ollamaOptions?.stopSequences !== undefined && {\n              stop: ollamaOptions.stopSequences,\n            }),\n          },\n        }),\n      };\n\n      const response = await this.client.post('/api/generate', request, {\n        responseType: 'stream',\n      });\n\n      for await (const chunk of response.data) {\n        const data = JSON.parse(chunk.toString());\n        if (callback) {\n          callback({\n            content: data.response,\n            done: !!data.done,\n          });\n        }\n      }\n    } catch (error) {\n      const err = new RequestError(\n        'Streaming failed',\n        this.id,\n        error instanceof Error ? error : new Error(String(error)),\n      );\n      this.logger.error('Ollama streamCompletion error', { error: err });\n      throw err;\n    }\n  }\n\n  public async streamChatCompletion(\n    model: string,\n    messages: LLMMessage[],\n    options?: LLMRequestOptions,\n    callback?: (event: LLMStreamEvent) => void,\n  ): Promise<void> {\n    const prompt = this.formatChatMessages(messages);\n    await this.streamCompletion(model, prompt, undefined, options, callback);\n  }\n\n  private convertModelInfo(modelId: string, info: OllamaModelInfo): LLMModelInfo {\n    return {\n      id: modelId,\n      name: info.name,\n      provider: this.id,\n      maxContextLength: 4096,\n      parameters: {\n        format: info.details.format,\n        family: info.details.family,\n        size: this.parseParameterSize(info.details.parameter_size),\n      },\n      features: info.details.capabilities || [],\n      metadata: {\n        quantization: info.details.quantization_level,\n        license: info.license,\n      },\n    };\n  }\n\n  private parseParameterSize(size?: string): number | undefined {\n    if (!size) {\n      return undefined;\n    }\n    const match = size.match(/(\\d+)([BM])/);\n    if (!match) {\n      return undefined;\n    }\n    const [, num, unit] = match;\n    if (!num) {\n      return undefined;\n    }\n    return unit === 'B' ? parseInt(num, 10) : parseInt(num, 10) / 1000;\n  }\n\n  private formatChatMessages(messages: LLMMessage[]): string {\n    return messages\n      .map((msg) => `${msg.role === 'assistant' ? 'Assistant' : 'User'}: ${msg.content}`)\n      .join('\\n');\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/semi","replacedBy":["@stylistic/ts/semi"]}]},{"filePath":"D:\\___coding\\tools\\copilot_ppa\\src\\services\\llm\\services\\ConnectionPoolManager.ts","messages":[{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Interface name `PoolConnection` must match the RegExp: /^I[A-Z]/u","line":7,"column":11,"nodeType":"Identifier","messageId":"satisfyCustom","endLine":7,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":33,"column":5,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":33,"endColumn":43},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type cast is required.","line":33,"column":19,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":33,"endColumn":25,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[877,883],"text":"(Boolean(logger))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/require-await","severity":2,"message":"Async method 'initializeProvider' has no 'await' expression.","line":42,"column":3,"nodeType":"FunctionExpression","messageId":"missingAwait","endLine":42,"endColumn":34},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'config' is defined but never used. Allowed unused args must match /^_/u.","line":42,"column":55,"nodeType":"Identifier","messageId":"unusedVar","endLine":42,"endColumn":77},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":45,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":45,"endColumn":23},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .info on an `any` value.","line":45,"column":19,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":45,"endColumn":23},{"ruleId":"@typescript-eslint/require-await","severity":2,"message":"Async method 'acquireConnection' has no 'await' expression.","line":55,"column":3,"nodeType":"FunctionExpression","messageId":"missingAwait","endLine":55,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":58,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":58,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .error on an `any` value.","line":58,"column":19,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":58,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":67,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":67,"endColumn":23},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .info on an `any` value.","line":67,"column":19,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":67,"endColumn":23},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":74,"column":12,"nodeType":"Identifier","messageId":"conditionErrorObject","endLine":74,"endColumn":20},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":75,"column":9,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":75,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .error on an `any` value.","line":75,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":75,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":88,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":88,"endColumn":23},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .info on an `any` value.","line":88,"column":19,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":88,"endColumn":23},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":92,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":92,"endColumn":22},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .error on an `any` value.","line":92,"column":17,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":92,"endColumn":22},{"ruleId":"@typescript-eslint/require-await","severity":2,"message":"Async method 'releaseConnection' has no 'await' expression.","line":101,"column":3,"nodeType":"FunctionExpression","messageId":"missingAwait","endLine":101,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":104,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":104,"endColumn":23},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .warn on an `any` value.","line":104,"column":19,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":104,"endColumn":23},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":111,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":111,"endColumn":23},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .info on an `any` value.","line":111,"column":19,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":111,"endColumn":23},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":113,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":113,"endColumn":23},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .warn on an `any` value.","line":113,"column":19,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":113,"endColumn":23},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":128,"column":13,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":128,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .info on an `any` value.","line":128,"column":25,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":128,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":148,"column":11,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":148,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .error on an `any` value.","line":148,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":148,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":157,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":157,"endColumn":21},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .info on an `any` value.","line":157,"column":17,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":157,"endColumn":21}],"suppressedMessages":[],"errorCount":32,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { EventEmitter } from 'events';\nimport { ILogger } from '../../../types';\nimport { LLMConnectionError } from '../errors';\nimport { LLMProvider } from '../llmProvider';\nimport { ProviderConfig } from '../validators/ProviderConfigValidator';\n\ninterface PoolConnection {\n  provider: LLMProvider;\n  inUse: boolean;\n  lastUsed: number;\n}\n\nconst fallbackLogger: ILogger = {\n  trace: () => {},\n  debug: () => {},\n  info: () => {},\n  warn: () => {},\n  error: () => {},\n  critical: () => {},\n};\n\n/**\n * Manages a pool of LLMProvider connections for efficient reuse and resource management.\n */\nexport class ConnectionPoolManager extends EventEmitter {\n  private pools = new Map<string, PoolConnection[]>();\n  private maxPoolSize = 5;\n  private idleTimeout = 5 * 60 * 1000; // 5 minutes\n  private logger: ILogger;\n\n  constructor(logger?: ILogger) {\n    super();\n    this.logger = logger || fallbackLogger;\n    this.startIdleCleanup();\n  }\n\n  /**\n   * Initializes a provider pool for the given providerId.\n   * @param providerId The unique provider identifier.\n   * @param config Provider configuration.\n   */\n  public async initializeProvider(providerId: string, config: ProviderConfig): Promise<void> {\n    if (!this.pools.has(providerId)) {\n      this.pools.set(providerId, []);\n      this.logger.info(`Initialized provider pool: ${providerId}`);\n    }\n  }\n\n  /**\n   * Acquires a connection from the pool, or creates a new one if possible.\n   * @param providerId The provider identifier.\n   * @returns The acquired LLMProvider instance.\n   * @throws LLMConnectionError if the provider is not initialized or pool is exhausted.\n   */\n  public async acquireConnection(providerId: string): Promise<LLMProvider> {\n    const pool = this.pools.get(providerId);\n    if (!pool) {\n      this.logger.error(`Provider not initialized: ${providerId}`);\n      throw new LLMConnectionError('NOT_INITIALIZED', 'Provider not initialized', { providerId });\n    }\n\n    // Try to find an available connection\n    const availableConnection = pool.find((conn) => !conn.inUse);\n    if (availableConnection) {\n      availableConnection.inUse = true;\n      availableConnection.lastUsed = Date.now();\n      this.logger.info(`Reusing existing connection: ${providerId}`);\n      return availableConnection.provider;\n    }\n\n    // Check if we can create a new connection\n    if (pool.length < this.maxPoolSize) {\n      const provider = pool[0]?.provider;\n      if (!provider) {\n        this.logger.error(`No provider template available: ${providerId}`);\n        throw new LLMConnectionError('NO_PROVIDER_TEMPLATE', 'No provider template available', {\n          providerId,\n        });\n      }\n      // Shallow clone for demonstration; real implementation may require deep clone or factory\n      const newProvider = { ...provider } as LLMProvider;\n      const connection: PoolConnection = {\n        provider: newProvider,\n        inUse: true,\n        lastUsed: Date.now(),\n      };\n      pool.push(connection);\n      this.logger.info(`Created new provider connection: ${providerId}`);\n      return newProvider;\n    }\n\n    this.logger.error(`Connection pool exhausted: ${providerId}`);\n    throw new LLMConnectionError('POOL_EXHAUSTED', 'Connection pool exhausted', { providerId });\n  }\n\n  /**\n   * Releases a connection back to the pool.\n   * @param providerId The provider identifier.\n   * @param provider The LLMProvider instance to release.\n   */\n  public async releaseConnection(providerId: string, provider: LLMProvider): Promise<void> {\n    const pool = this.pools.get(providerId);\n    if (!pool) {\n      this.logger.warn(`Attempted to release connection for uninitialized provider: ${providerId}`);\n      return;\n    }\n    const connection = pool.find((conn) => conn.provider === provider);\n    if (connection) {\n      connection.inUse = false;\n      connection.lastUsed = Date.now();\n      this.logger.info(`Released connection: ${providerId}`);\n    } else {\n      this.logger.warn(`Attempted to release unknown connection: ${providerId}`);\n    }\n  }\n\n  /**\n   * Starts periodic cleanup of idle connections.\n   */\n  private startIdleCleanup(): void {\n    setInterval(() => {\n      const now = Date.now();\n      for (const [providerId, pool] of this.pools) {\n        const activeConnections = pool.filter((conn) => {\n          const isIdle = !conn.inUse && now - conn.lastUsed > this.idleTimeout;\n          if (isIdle) {\n            // No dispose method on LLMProvider interface; just log\n            this.logger.info(`Idle connection would be disposed: ${providerId}`);\n          }\n          return !isIdle;\n        });\n        if (activeConnections.length !== pool.length) {\n          this.pools.set(providerId, activeConnections);\n        }\n      }\n    }, this.idleTimeout);\n  }\n\n  /**\n   * Disposes all connections and clears the pool.\n   */\n  public async dispose(): Promise<void> {\n    for (const pool of this.pools.values()) {\n      for (const conn of pool) {\n        try {\n          await conn.provider.disconnect?.();\n        } catch (err) {\n          this.logger.error(\n            `Error disconnecting provider: ${err instanceof Error ? err.message : String(err)}`,\n          );\n        }\n        // No dispose method on LLMProvider interface\n      }\n    }\n    this.pools.clear();\n    this.removeAllListeners();\n    this.logger.info('Disposed all connections and cleared pool');\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/semi","replacedBy":["@stylistic/ts/semi"]}]},{"filePath":"D:\\___coding\\tools\\copilot_ppa\\src\\services\\llm\\services\\LLMConnectionHandlerService.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":16,"column":3,"nodeType":"PropertyDefinition","messageId":"anyAssignment","endLine":16,"endColumn":73},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .DISCONNECTED on an `any` value.","line":16,"column":60,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":16,"endColumn":72},{"ruleId":"@typescript-eslint/no-redundant-type-constituents","severity":2,"message":"'any' overrides all other types in this union type.","line":17,"column":28,"nodeType":"TSTypeReference","messageId":"overrides","endLine":17,"endColumn":39},{"ruleId":"@typescript-eslint/no-redundant-type-constituents","severity":2,"message":"'any' overrides all other types in this union type.","line":18,"column":30,"nodeType":"TSTypeReference","messageId":"overrides","endLine":18,"endColumn":52},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":21,"column":3,"nodeType":"PropertyDefinition","messageId":"anyAssignment","endLine":21,"endColumn":58},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":21,"column":37,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":21,"endColumn":55},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .getInstance on an `any` value.","line":21,"column":44,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":21,"endColumn":55},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":26,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":26,"endColumn":42},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type cast is required.","line":26,"column":19,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":26,"endColumn":37,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[914,932],"text":"(Boolean(options.maxRetries))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .maxRetries on an `any` value.","line":26,"column":27,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":26,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":27,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":27,"endColumn":59},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type cast is required.","line":27,"column":26,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":27,"endColumn":51,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[964,989],"text":"(Boolean(options.initialRetryDelay))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .initialRetryDelay on an `any` value.","line":27,"column":34,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":27,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":28,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":28,"endColumn":52},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type cast is required.","line":28,"column":22,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":28,"endColumn":43,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1020,1041],"text":"(Boolean(options.maxRetryDelay))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .maxRetryDelay on an `any` value.","line":28,"column":30,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":28,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":29,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":29,"endColumn":58},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type cast is required.","line":29,"column":27,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":29,"endColumn":53,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1078,1104],"text":"(Boolean(options.retryBackoffFactor))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .retryBackoffFactor on an `any` value.","line":29,"column":35,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":29,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":30,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":30,"endColumn":60},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type cast is required.","line":30,"column":26,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":30,"endColumn":51,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1136,1161],"text":"(Boolean(options.connectionTimeout))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .connectionTimeout on an `any` value.","line":30,"column":34,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":30,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":31,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":31,"endColumn":57},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .reconnectOnError on an `any` value.","line":31,"column":33,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":31,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":32,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":32,"endColumn":64},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type cast is required.","line":32,"column":28,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":32,"endColumn":55,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1257,1284],"text":"(Boolean(options.healthCheckInterval))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .healthCheckInterval on an `any` value.","line":32,"column":36,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":32,"endColumn":55},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of an `any` typed value.","line":37,"column":5,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":37,"endColumn":31},{"ruleId":"@typescript-eslint/no-redundant-type-constituents","severity":2,"message":"'any' overrides all other types in this union type.","line":40,"column":32,"nodeType":"TSTypeReference","messageId":"overrides","endLine":40,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of an `any` typed value.","line":41,"column":5,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":41,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of an `any` typed value.","line":45,"column":5,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":45,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .name on an `any` value.","line":45,"column":34,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":45,"endColumn":38},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type cast is required.","line":56,"column":9,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":56,"endColumn":31,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1825,1847],"text":"Boolean(this._activeConnection)"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":59,"column":5,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":59,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":60,"column":5,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":60,"endColumn":54},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .DISCONNECTED on an `any` value.","line":60,"column":42,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":60,"endColumn":54},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type cast is required.","line":69,"column":10,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":69,"endColumn":30,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[2242,2262],"text":"(Boolean(this._activeProvider))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":75,"column":7,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":75,"endColumn":54},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .CONNECTING on an `any` value.","line":75,"column":44,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":75,"endColumn":54},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":78,"column":13,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":78,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .connect on an `any` value.","line":78,"column":24,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":78,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":80,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":80,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":83,"column":7,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":83,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":84,"column":7,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":84,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .CONNECTED on an `any` value.","line":84,"column":44,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":84,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .name on an `any` value.","line":96,"column":68,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":96,"endColumn":72},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":99,"column":7,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":99,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .ERROR on an `any` value.","line":99,"column":44,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":99,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":100,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":100,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .error on an `any` value.","line":100,"column":19,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":100,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":102,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":102,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .name on an `any` value.","line":102,"column":41,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":102,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":103,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":103,"endColumn":34},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type cast is required.","line":116,"column":9,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":116,"endColumn":31,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[3714,3736],"text":"Boolean(this._activeConnection)"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":118,"column":15,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":118,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .disconnect on an `any` value.","line":118,"column":38,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":118,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .name on an `any` value.","line":126,"column":73,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":126,"endColumn":77},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":128,"column":9,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":128,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .error on an `any` value.","line":128,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":128,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":130,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":130,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .name on an `any` value.","line":130,"column":43,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":130,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":135,"column":5,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":135,"endColumn":54},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .DISCONNECTED on an `any` value.","line":135,"column":42,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":135,"endColumn":54},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":145,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":145,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":146,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":146,"endColumn":56},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type cast is required.","line":146,"column":17,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":146,"endColumn":43,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[4698,4724],"text":"(Boolean((this._activeProvider?.name)))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .name on an `any` value.","line":146,"column":39,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":146,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":147,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":147,"endColumn":98},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type cast is required.","line":147,"column":18,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":147,"endColumn":40,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[4756,4778],"text":"(Boolean(this._activeConnection))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":147,"column":49,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":147,"endColumn":84},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .getModelInfo on an `any` value.","line":147,"column":72,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":147,"endColumn":84},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .name on an `any` value.","line":163,"column":68,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":163,"endColumn":72},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":165,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":165,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .error on an `any` value.","line":165,"column":19,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":165,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":167,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":167,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .name on an `any` value.","line":167,"column":41,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":167,"endColumn":45}],"suppressedMessages":[],"errorCount":76,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { EventEmitter } from 'events';\nimport { Logger } from '../../../utils/logger';\nimport { LLMProvider } from '../../llm/llm-provider';\nimport { LLMConnectionError } from '../errors';\nimport {\n  ConnectionState,\n  ConnectionStatus,\n  ILLMConnectionProvider,\n  LLMConnectionOptions,\n} from '../types';\n\n/**\n * Handles LLM provider connection lifecycle with structured error handling and logging.\n */\nexport class LLMConnectionHandlerService extends EventEmitter {\n  private _currentState: ConnectionState = ConnectionState.DISCONNECTED;\n  private _activeProvider: LLMProvider | null = null;\n  private _activeConnection: ILLMConnectionProvider | null = null;\n  private _lastError?: Error;\n  private readonly options: LLMConnectionOptions;\n  private readonly logger: Logger = Logger.getInstance();\n\n  constructor(options: Partial<LLMConnectionOptions> = {}) {\n    super();\n    this.options = {\n      maxRetries: options.maxRetries || 3,\n      initialRetryDelay: options.initialRetryDelay || 1000,\n      maxRetryDelay: options.maxRetryDelay || 30000,\n      retryBackoffFactor: options.retryBackoffFactor || 2,\n      connectionTimeout: options.connectionTimeout || 30000,\n      reconnectOnError: options.reconnectOnError ?? true,\n      healthCheckInterval: options.healthCheckInterval || 30000,\n    };\n  }\n\n  public get currentState(): ConnectionState {\n    return this._currentState;\n  }\n\n  public get activeProvider(): LLMProvider | null {\n    return this._activeProvider;\n  }\n\n  public get activeProviderName(): string | undefined {\n    return this._activeProvider?.name;\n  }\n\n  public get lastError(): Error | undefined {\n    return this._lastError;\n  }\n\n  /**\n   * Set the active LLM provider, disconnecting any existing connection.\n   */\n  public async setActiveProvider(provider: LLMProvider): Promise<void> {\n    if (this._activeConnection) {\n      await this.disconnect();\n    }\n    this._activeProvider = provider;\n    this._currentState = ConnectionState.DISCONNECTED;\n    this.emit('providerChanged', provider);\n  }\n\n  /**\n   * Connect to the active provider using the given connection instance.\n   * Throws LLMConnectionError on failure.\n   */\n  public async connect(connection: ILLMConnectionProvider): Promise<void> {\n    if (!this._activeProvider) {\n      throw new LLMConnectionError('ProviderNotFound', 'No active provider set', {\n        method: 'connect',\n      });\n    }\n    try {\n      this._currentState = ConnectionState.CONNECTING;\n      this.emit('stateChanged', this._currentState);\n\n      await connection.connect({\n        ...this.options,\n        provider: this._activeProvider,\n      });\n\n      this._activeConnection = connection;\n      this._currentState = ConnectionState.CONNECTED;\n      this._lastError = undefined;\n\n      this.emit('connected', await this.getConnectionStatus());\n      this.emit('stateChanged', this._currentState);\n    } catch (error) {\n      const err =\n        error instanceof LLMConnectionError\n          ? error\n          : new LLMConnectionError(\n              'Unknown',\n              error instanceof Error ? error.message : String(error),\n              { method: 'connect', provider: this._activeProvider?.name },\n            );\n      this._lastError = err;\n      this._currentState = ConnectionState.ERROR;\n      this.logger.error('Connection error', {\n        error: err,\n        provider: this._activeProvider?.name,\n        state: this._currentState,\n      });\n      this.emit('error', err);\n      this.emit('stateChanged', this._currentState);\n      throw err;\n    }\n  }\n\n  /**\n   * Disconnect from the active provider, if connected.\n   * Logs and emits errors using structured logger.\n   */\n  public async disconnect(): Promise<void> {\n    if (this._activeConnection) {\n      try {\n        await this._activeConnection.disconnect();\n      } catch (error) {\n        const err =\n          error instanceof LLMConnectionError\n            ? error\n            : new LLMConnectionError(\n                'DisconnectError',\n                error instanceof Error ? error.message : String(error),\n                { method: 'disconnect', provider: this._activeProvider?.name },\n              );\n        this.logger.error('Error disconnecting', {\n          error: err,\n          provider: this._activeProvider?.name,\n        });\n      }\n      this._activeConnection = null;\n    }\n    this._currentState = ConnectionState.DISCONNECTED;\n    this.emit('disconnected');\n    this.emit('stateChanged', this._currentState);\n  }\n\n  /**\n   * Get the current connection status, including error context if present.\n   */\n  private async getConnectionStatus(): Promise<ConnectionStatus> {\n    return {\n      state: this._currentState,\n      provider: this._activeProvider?.name || 'unknown',\n      modelInfo: this._activeConnection ? await this._activeConnection.getModelInfo() : undefined,\n      error: this._lastError?.message,\n    };\n  }\n\n  /**\n   * Dispose the handler, disconnecting and cleaning up listeners.\n   */\n  public dispose(): void {\n    this.disconnect().catch((error) => {\n      const err =\n        error instanceof LLMConnectionError\n          ? error\n          : new LLMConnectionError(\n              'DisposeError',\n              error instanceof Error ? error.message : String(error),\n              { method: 'dispose', provider: this._activeProvider?.name },\n            );\n      this.logger.error('Error during dispose disconnect', {\n        error: err,\n        provider: this._activeProvider?.name,\n      });\n    });\n    this.removeAllListeners();\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/semi","replacedBy":["@stylistic/ts/semi"]}]},{"filePath":"D:\\___coding\\tools\\copilot_ppa\\src\\services\\llm\\services\\LLMModelValidator.ts","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":25,"column":9,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":25,"endColumn":32,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[599,622],"text":"(requirements.minVersion != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[599,622],"text":"(requirements.minVersion ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[599,622],"text":"(Boolean(requirements.minVersion))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe construction of an any type value.","line":27,"column":9,"nodeType":"NewExpression","messageId":"unsafeNew","endLine":30,"endColumn":10},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe spread of an `any` array type.","line":40,"column":26,"nodeType":"SpreadElement","messageId":"unsafeArraySpread","endLine":40,"endColumn":50},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe construction of an any type value.","line":52,"column":11,"nodeType":"NewExpression","messageId":"unsafeNew","endLine":55,"endColumn":12},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe construction of an any type value.","line":66,"column":9,"nodeType":"NewExpression","messageId":"unsafeNew","endLine":69,"endColumn":10},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe spread of an `any` array type.","line":76,"column":26,"nodeType":"SpreadElement","messageId":"unsafeArraySpread","endLine":76,"endColumn":51},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":143,"column":7,"nodeType":"MemberExpression","messageId":"conditionErrorNullableNumber","endLine":143,"endColumn":27,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[4241,4261],"text":"(required.minMemoryGB != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[4241,4261],"text":"(required.minMemoryGB ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[4241,4261],"text":"(Boolean(required.minMemoryGB))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":144,"column":9,"nodeType":"MemberExpression","messageId":"conditionErrorNullableNumber","endLine":144,"endColumn":27,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[4272,4291],"text":"(actual.minMemoryGB == null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[4273,4291],"text":"(actual.minMemoryGB ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[4272,4291],"text":"(!Boolean(actual.minMemoryGB))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe construction of an any type value.","line":147,"column":9,"nodeType":"NewExpression","messageId":"unsafeNew","endLine":150,"endColumn":10},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":155,"column":7,"nodeType":"MemberExpression","messageId":"conditionErrorNullableNumber","endLine":155,"endColumn":27,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[4554,4574],"text":"(required.minCPUCores != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[4554,4574],"text":"(required.minCPUCores ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[4554,4574],"text":"(Boolean(required.minCPUCores))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":156,"column":9,"nodeType":"MemberExpression","messageId":"conditionErrorNullableNumber","endLine":156,"endColumn":27,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[4585,4604],"text":"(actual.minCPUCores == null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[4586,4604],"text":"(actual.minCPUCores ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[4585,4604],"text":"(!Boolean(actual.minCPUCores))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe construction of an any type value.","line":159,"column":9,"nodeType":"NewExpression","messageId":"unsafeNew","endLine":162,"endColumn":10},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable boolean value in conditional. Please handle the nullish case explicitly.","line":166,"column":9,"nodeType":"MemberExpression","messageId":"conditionErrorNullableBoolean","endLine":166,"endColumn":29,"suggestions":[{"messageId":"conditionFixDefaultFalse","fix":{"range":[4856,4876],"text":"(required.gpuRequired ?? false)"},"desc":"Explicitly treat nullish value the same as false (`value ?? false`)"},{"messageId":"conditionFixCompareTrue","fix":{"range":[4856,4876],"text":"(required.gpuRequired === true)"},"desc":"Change condition to check if true (`value === true`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable boolean value in conditional. Please handle the nullish case explicitly.","line":166,"column":34,"nodeType":"MemberExpression","messageId":"conditionErrorNullableBoolean","endLine":166,"endColumn":52,"suggestions":[{"messageId":"conditionFixDefaultFalse","fix":{"range":[4881,4899],"text":"(actual.gpuRequired ?? false)"},"desc":"Explicitly treat nullish value the same as false (`value ?? false`)"},{"messageId":"conditionFixCompareFalse","fix":{"range":[4880,4899],"text":"(actual.gpuRequired === false)"},"desc":"Change condition to check if false (`value === false`)"}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe construction of an any type value.","line":167,"column":26,"nodeType":"NewExpression","messageId":"unsafeNew","endLine":167,"endColumn":91},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe construction of an any type value.","line":208,"column":11,"nodeType":"NewExpression","messageId":"unsafeNew","endLine":208,"endColumn":86},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe construction of an any type value.","line":215,"column":11,"nodeType":"NewExpression","messageId":"unsafeNew","endLine":218,"endColumn":12},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":230,"column":10,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":230,"endColumn":16,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[6592,6599],"text":"actual == null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[6593,6599],"text":"(actual ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[6592,6599],"text":"!Boolean(actual)"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":267,"column":32,"nodeType":"MemberExpression","messageId":"conditionErrorNullableNumber","endLine":267,"endColumn":47,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[7644,7659],"text":"(hwA.minMemoryGB != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[7644,7659],"text":"(hwA.minMemoryGB ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[7644,7659],"text":"(Boolean(hwA.minMemoryGB))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":267,"column":48,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":267,"endColumn":50,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[7660,7662],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":267,"column":54,"nodeType":"MemberExpression","messageId":"conditionErrorNullableNumber","endLine":267,"endColumn":69,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[7666,7681],"text":"(hwB.minMemoryGB != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[7666,7681],"text":"(hwB.minMemoryGB ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[7666,7681],"text":"(Boolean(hwB.minMemoryGB))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":267,"column":70,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":267,"endColumn":72,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[7682,7684],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":268,"column":32,"nodeType":"MemberExpression","messageId":"conditionErrorNullableNumber","endLine":268,"endColumn":47,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[7720,7735],"text":"(hwA.minMemoryGB != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[7720,7735],"text":"(hwA.minMemoryGB ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[7720,7735],"text":"(Boolean(hwA.minMemoryGB))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":268,"column":48,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":268,"endColumn":50,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[7736,7738],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":268,"column":61,"nodeType":"MemberExpression","messageId":"conditionErrorNullableNumber","endLine":268,"endColumn":76,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[7749,7764],"text":"(hwB.minMemoryGB != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[7749,7764],"text":"(hwB.minMemoryGB ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[7749,7764],"text":"(Boolean(hwB.minMemoryGB))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":268,"column":77,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":268,"endColumn":79,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[7765,7767],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":274,"column":29,"nodeType":"MemberExpression","messageId":"conditionErrorNullableNumber","endLine":274,"endColumn":44,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[7975,7990],"text":"(hwA.minCPUCores != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[7975,7990],"text":"(hwA.minCPUCores ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[7975,7990],"text":"(Boolean(hwA.minCPUCores))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":274,"column":45,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":274,"endColumn":47,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[7991,7993],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":274,"column":51,"nodeType":"MemberExpression","messageId":"conditionErrorNullableNumber","endLine":274,"endColumn":66,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[7997,8012],"text":"(hwB.minCPUCores != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[7997,8012],"text":"(hwB.minCPUCores ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[7997,8012],"text":"(Boolean(hwB.minCPUCores))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":274,"column":67,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":274,"endColumn":69,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[8013,8015],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":275,"column":29,"nodeType":"MemberExpression","messageId":"conditionErrorNullableNumber","endLine":275,"endColumn":44,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[8048,8063],"text":"(hwA.minCPUCores != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[8048,8063],"text":"(hwA.minCPUCores ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[8048,8063],"text":"(Boolean(hwA.minCPUCores))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":275,"column":45,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":275,"endColumn":47,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[8064,8066],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":275,"column":58,"nodeType":"MemberExpression","messageId":"conditionErrorNullableNumber","endLine":275,"endColumn":73,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[8077,8092],"text":"(hwB.minCPUCores != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[8077,8092],"text":"(hwB.minCPUCores ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[8077,8092],"text":"(Boolean(hwB.minCPUCores))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":275,"column":74,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":275,"endColumn":76,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[8093,8095],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[],"errorCount":34,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { ModelValidationError } from '../errors';\nimport {\n  HardwareRequirements,\n  ModelCompatibilityResult,\n  ModelInfo,\n  ModelRequirements,\n  ModelValidationResult,\n} from '../types';\n\n/**\n * Service for validating models and checking compatibility\n */\nexport class LLMModelValidator {\n  /**\n   * Validate a model against requirements\n   */\n  public validateModel(model: ModelInfo, requirements: ModelRequirements): ModelValidationResult {\n    const result: ModelValidationResult = {\n      isValid: true,\n      errors: [],\n      warnings: [],\n    };\n\n    // Check version compatibility\n    if (requirements.minVersion && !this.checkVersion(model.version, requirements.minVersion)) {\n      result.errors.push(\n        new ModelValidationError(\n          'version',\n          `Model version ${model.version} is below minimum required version ${requirements.minVersion}`,\n        ),\n      );\n    }\n\n    // Check hardware requirements\n    if (requirements.hardware) {\n      const hardwareIssues = this.validateHardwareRequirements(\n        requirements.hardware,\n        model.hardwareRequirements,\n      );\n      result.errors.push(...hardwareIssues.errors);\n      result.warnings.push(...hardwareIssues.warnings);\n    }\n\n    // Check capabilities\n    if (requirements.capabilities) {\n      const missingCapabilities = this.validateCapabilities(\n        requirements.capabilities,\n        model.capabilities,\n      );\n      if (missingCapabilities.length > 0) {\n        result.errors.push(\n          new ModelValidationError(\n            'capabilities',\n            `Model is missing required capabilities: ${missingCapabilities.join(', ')}`,\n          ),\n        );\n      }\n    }\n\n    // Check format compatibility\n    if (\n      requirements.formats &&\n      !this.validateFormats(model.supportedFormats, requirements.formats)\n    ) {\n      result.errors.push(\n        new ModelValidationError(\n          'formats',\n          `Model does not support required formats: ${requirements.formats.join(', ')}`,\n        ),\n      );\n    }\n\n    // Check additional parameters\n    if (requirements.parameters) {\n      const parameterIssues = this.validateParameters(model.parameters, requirements.parameters);\n      result.errors.push(...parameterIssues.errors);\n      result.warnings.push(...parameterIssues.warnings);\n    }\n\n    result.isValid = result.errors.length === 0;\n    return result;\n  }\n\n  /**\n   * Check model compatibility\n   */\n  public checkCompatibility(modelA: ModelInfo, modelB: ModelInfo): ModelCompatibilityResult {\n    const result: ModelCompatibilityResult = {\n      isCompatible: true,\n      errors: [],\n      warnings: [],\n    };\n\n    // Check provider compatibility\n    if (modelA.provider !== modelB.provider) {\n      result.warnings.push(\n        `Models use different providers: ${modelA.provider} vs ${modelB.provider}`,\n      );\n    }\n\n    // Check version compatibility\n    if (modelA.version && modelB.version) {\n      const versionCompatible = this.checkVersionCompatibility(modelA.version, modelB.version);\n      if (!versionCompatible) {\n        result.warnings.push(`Version mismatch: ${modelA.version} vs ${modelB.version}`);\n      }\n    }\n\n    // Check hardware requirements compatibility\n    const hardwareCompatible = this.checkHardwareCompatibility(\n      modelA.hardwareRequirements,\n      modelB.hardwareRequirements,\n    );\n    if (!hardwareCompatible.isCompatible) {\n      result.errors.push(...hardwareCompatible.conflicts);\n    }\n\n    // Check capability overlap\n    const capabilityOverlap = this.getCapabilityOverlap(modelA.capabilities, modelB.capabilities);\n    if (capabilityOverlap.length === 0) {\n      result.errors.push('No overlapping capabilities between models');\n    }\n\n    result.isCompatible = result.errors.length === 0;\n    return result;\n  }\n\n  /**\n   * Validate hardware requirements\n   */\n  private validateHardwareRequirements(\n    required: HardwareRequirements,\n    actual?: HardwareRequirements,\n  ): { errors: ModelValidationError[]; warnings: string[] } {\n    const result = { errors: [] as ModelValidationError[], warnings: [] as string[] };\n\n    if (!actual) {\n      result.warnings.push('Hardware requirements not specified');\n      return result;\n    }\n\n    if (\n      required.minMemoryGB &&\n      (!actual.minMemoryGB || actual.minMemoryGB < required.minMemoryGB)\n    ) {\n      result.errors.push(\n        new ModelValidationError(\n          'memory',\n          `Insufficient memory: ${actual.minMemoryGB}GB < ${required.minMemoryGB}GB`,\n        ),\n      );\n    }\n\n    if (\n      required.minCPUCores &&\n      (!actual.minCPUCores || actual.minCPUCores < required.minCPUCores)\n    ) {\n      result.errors.push(\n        new ModelValidationError(\n          'cpu',\n          `Insufficient CPU cores: ${actual.minCPUCores} < ${required.minCPUCores}`,\n        ),\n      );\n    }\n\n    if (required.gpuRequired && !actual.gpuRequired) {\n      result.errors.push(new ModelValidationError('gpu', 'GPU required but not available'));\n    }\n\n    return result;\n  }\n\n  /**\n   * Validate model capabilities\n   */\n  private validateCapabilities(required: string[], actual: string[]): string[] {\n    const missingCapabilities = required.filter((cap) => !actual.includes(cap));\n    return missingCapabilities;\n  }\n\n  /**\n   * Validate supported formats\n   */\n  private validateFormats(actual?: string[], required: string[]): boolean {\n    if (!actual) {\n      return false;\n    }\n    return required.every((format) => actual.includes(format));\n  }\n\n  /**\n   * Validate model parameters\n   */\n  private validateParameters(\n    actual: Record<string, unknown> | undefined,\n    required: Record<string, unknown>,\n  ): { errors: ModelValidationError[]; warnings: string[] } {\n    const result = { errors: [] as ModelValidationError[], warnings: [] as string[] };\n\n    if (!actual) {\n      result.warnings.push('Model parameters not specified');\n      return result;\n    }\n\n    for (const [key, value] of Object.entries(required)) {\n      if (!(key in actual)) {\n        result.errors.push(\n          new ModelValidationError('parameter', `Missing required parameter: ${key}`),\n        );\n        continue;\n      }\n\n      if (typeof actual[key] !== typeof value) {\n        result.errors.push(\n          new ModelValidationError(\n            'parameter',\n            `Invalid type for parameter ${key}: expected ${typeof value}, got ${typeof actual[key]}`,\n          ),\n        );\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * Check version compatibility\n   */\n  private checkVersion(required: string, actual?: string): boolean {\n    if (!actual) {\n      return false;\n    }\n\n    const [actualMajor, actualMinor = 0] = actual.split('.').map(Number);\n    const [requiredMajor, requiredMinor = 0] = required.split('.').map(Number);\n\n    if (actualMajor !== requiredMajor) {\n      return actualMajor > requiredMajor;\n    }\n    return actualMinor >= requiredMinor;\n  }\n\n  /**\n   * Check version compatibility between models\n   */\n  private checkVersionCompatibility(versionA: string, versionB: string): boolean {\n    const [majorA] = versionA.split('.').map(Number);\n    const [majorB] = versionB.split('.').map(Number);\n    return majorA === majorB;\n  }\n\n  /**\n   * Check hardware compatibility between models\n   */\n  private checkHardwareCompatibility(\n    hwA?: HardwareRequirements,\n    hwB?: HardwareRequirements,\n  ): { isCompatible: boolean; conflicts: string[] } {\n    const result = { isCompatible: true, conflicts: [] as string[] };\n\n    if (!hwA || !hwB) {\n      result.isCompatible = true;\n      return result;\n    }\n\n    // Check memory requirements\n    const minMemory = Math.max(hwA.minMemoryGB || 0, hwB.minMemoryGB || 0);\n    const maxMemory = Math.min(hwA.minMemoryGB || Infinity, hwB.minMemoryGB || Infinity);\n    if (minMemory > maxMemory) {\n      result.conflicts.push(`Incompatible memory requirements: ${minMemory}GB > ${maxMemory}GB`);\n    }\n\n    // Check CPU requirements\n    const minCPU = Math.max(hwA.minCPUCores || 0, hwB.minCPUCores || 0);\n    const maxCPU = Math.min(hwA.minCPUCores || Infinity, hwB.minCPUCores || Infinity);\n    if (minCPU > maxCPU) {\n      result.conflicts.push(`Incompatible CPU requirements: ${minCPU} > ${maxCPU} cores`);\n    }\n\n    // Check GPU requirements\n    if (hwA.gpuRequired !== hwB.gpuRequired) {\n      result.conflicts.push('Inconsistent GPU requirements');\n    }\n\n    result.isCompatible = result.conflicts.length === 0;\n    return result;\n  }\n\n  /**\n   * Get overlapping capabilities between models\n   */\n  private getCapabilityOverlap(capabilitiesA: string[], capabilitiesB: string[]): string[] {\n    return capabilitiesA.filter((cap) => capabilitiesB.includes(cap));\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/semi","replacedBy":["@stylistic/ts/semi"]}]},{"filePath":"D:\\___coding\\tools\\copilot_ppa\\src\\services\\llm\\services\\ModelMetricsService.ts","messages":[{"ruleId":"@typescript-eslint/require-await","severity":2,"message":"Async method 'getMetrics' has no 'await' expression.","line":5,"column":3,"nodeType":"FunctionExpression","messageId":"missingAwait","endLine":5,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'modelId' is defined but never used. Allowed unused args must match /^_/u.","line":5,"column":20,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":35},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":5,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":5,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[135,138],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[135,138],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { injectable } from 'inversify';\n\n@injectable()\nexport class ModelMetricsService {\n  async getMetrics(modelId: string): Promise<any> {\n    // Dummy implementation for coverage\n    return { accuracy: 0.95, loss: 0.05 };\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/semi","replacedBy":["@stylistic/ts/semi"]}]},{"filePath":"D:\\___coding\\tools\\copilot_ppa\\src\\services\\llm\\services\\ModelOptimizationService.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `ServiceIdentifier | LazyServiceIdentifier<unknown>`.","line":14,"column":13,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":14,"endColumn":20},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":20,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":20,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[779,782],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[779,782],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":20,"column":70,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":20,"endColumn":73,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[793,796],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[793,796],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":27,"column":51,"nodeType":"Property","messageId":"anyAssignment","endLine":27,"endColumn":58},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":28,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":28,"endColumn":68},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type cast is required.","line":29,"column":12,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":29,"endColumn":19,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1226,1233],"text":"(Boolean(metrics))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":33,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":33,"endColumn":75},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":34,"column":61,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":34,"endColumn":63,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[1545,1547],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string | symbol`.","line":37,"column":17,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":37,"endColumn":50},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .OptimizationCompleted on an `any` value.","line":37,"column":29,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":37,"endColumn":50},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":37,"column":63,"nodeType":"Property","messageId":"anyAssignment","endLine":37,"endColumn":69},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of an `any` typed value.","line":38,"column":7,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":38,"endColumn":21},{"ruleId":"@typescript-eslint/require-await","severity":2,"message":"Async method 'runOptimization' has no 'await' expression.","line":47,"column":3,"nodeType":"FunctionExpression","messageId":"missingAwait","endLine":47,"endColumn":32},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":50,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":50,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1999,2002],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1999,2002],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":57,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":57,"endColumn":23},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":2,"message":"Missing return type on function.","line":61,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":61,"endColumn":22},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":61,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":61,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2252,2255],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2252,2255],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":62,"column":9,"nodeType":"MemberExpression","messageId":"conditionErrorObject","endLine":62,"endColumn":20},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":68,"column":50,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":68,"endColumn":52,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[2499,2501],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[],"errorCount":19,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { EventEmitter } from 'events';\nimport { inject, injectable } from 'inversify';\nimport { ILogger } from '../../../utils/logger';\nimport { LLMResourceError } from '../errors';\nimport { ModelEvents, OptimizationRequest, OptimizationResult } from '../types';\nimport { ModelMetricsService } from './ModelMetricsService';\n\n@injectable()\nexport class ModelOptimizationService extends EventEmitter {\n  private readonly optimizationHistory = new Map<string, OptimizationResult[]>();\n  private readonly activeOptimizations = new Set<string>();\n\n  constructor(\n    @inject(ILogger) private readonly logger: ILogger,\n    @inject(ModelMetricsService) private readonly metricsService: ModelMetricsService,\n  ) {\n    super();\n  }\n\n  public async optimizeModel(modelId: string, request: any): Promise<any> {\n    if (this.activeOptimizations.has(modelId)) {\n      this.logger.error('Optimization already in progress', { modelId });\n      throw new LLMResourceError(modelId, `Optimization already in progress for model ${modelId}`);\n    }\n    try {\n      this.activeOptimizations.add(modelId);\n      this.emit('OptimizationStarted', { modelId, request });\n      const metrics = await this.metricsService.getMetrics(modelId);\n      if (!metrics) {\n        this.logger.error('No metrics available for model', { modelId });\n        throw new LLMResourceError(modelId, `No metrics available for model ${modelId}`);\n      }\n      const result = await this.runOptimization(modelId, request, metrics);\n      const history = this.optimizationHistory.get(modelId) || [];\n      history.push(result);\n      this.optimizationHistory.set(modelId, history);\n      this.emit(ModelEvents.OptimizationCompleted, { modelId, result });\n      return result;\n    } catch (error) {\n      this.handleError('Optimization failed', error);\n      throw error;\n    } finally {\n      this.activeOptimizations.delete(modelId);\n    }\n  }\n\n  private async runOptimization(\n    modelId: string,\n    request: OptimizationRequest,\n    metrics: any,\n  ): Promise<OptimizationResult> {\n    // Dummy implementation for coverage\n    return {\n      modelId,\n      success: true,\n      details: 'Optimization completed',\n      metrics: metrics,\n    };\n  }\n\n  private handleError(message: string, error: any) {\n    if (this.logger && typeof this.logger.error === 'function') {\n      this.logger.error(message, error);\n    }\n  }\n\n  public getOptimizationHistory(modelId: string): OptimizationResult[] {\n    return this.optimizationHistory.get(modelId) || [];\n  }\n\n  public isOptimizing(modelId: string): boolean {\n    return this.activeOptimizations.has(modelId);\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/semi","replacedBy":["@stylistic/ts/semi"]}]},{"filePath":"D:\\___coding\\tools\\copilot_ppa\\src\\services\\llm\\types.ts","messages":[{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Interface name `LLMMessage` must match the RegExp: /^I[A-Z]/u","line":3,"column":18,"nodeType":"Identifier","messageId":"satisfyCustom","endLine":3,"endColumn":28},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Interface name `LLMRequestOptions` must match the RegExp: /^I[A-Z]/u","line":8,"column":18,"nodeType":"Identifier","messageId":"satisfyCustom","endLine":8,"endColumn":35},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Interface name `LLMResponse` must match the RegExp: /^I[A-Z]/u","line":17,"column":18,"nodeType":"Identifier","messageId":"satisfyCustom","endLine":17,"endColumn":29},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Interface name `LLMStreamEvent` must match the RegExp: /^I[A-Z]/u","line":26,"column":18,"nodeType":"Identifier","messageId":"satisfyCustom","endLine":26,"endColumn":32},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Interface name `ProviderCapabilities` must match the RegExp: /^I[A-Z]/u","line":31,"column":18,"nodeType":"Identifier","messageId":"satisfyCustom","endLine":31,"endColumn":38},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Interface name `ProviderConfig` must match the RegExp: /^I[A-Z]/u","line":38,"column":18,"nodeType":"Identifier","messageId":"satisfyCustom","endLine":38,"endColumn":32},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":51,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":51,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[990,993],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[990,993],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":59,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":59,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1139,1142],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1139,1142],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":61,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":61,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1195,1198],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1195,1198],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Interface name `LLMProvider` must match the RegExp: /^I[A-Z]/u","line":81,"column":18,"nodeType":"Identifier","messageId":"satisfyCustom","endLine":81,"endColumn":29},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Interface name `ModelInfo` must match the RegExp: /^I[A-Z]/u","line":122,"column":18,"nodeType":"Identifier","messageId":"satisfyCustom","endLine":122,"endColumn":27},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":128,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":128,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2794,2797],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2794,2797],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Interface name `ModelRequirements` must match the RegExp: /^I[A-Z]/u","line":131,"column":18,"nodeType":"Identifier","messageId":"satisfyCustom","endLine":131,"endColumn":35},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":136,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":136,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2977,2980],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2977,2980],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Interface name `ModelValidationResult` must match the RegExp: /^I[A-Z]/u","line":139,"column":18,"nodeType":"Identifier","messageId":"satisfyCustom","endLine":139,"endColumn":39},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":141,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":141,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3057,3060],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3057,3060],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Interface name `ModelCompatibilityResult` must match the RegExp: /^I[A-Z]/u","line":145,"column":18,"nodeType":"Identifier","messageId":"satisfyCustom","endLine":145,"endColumn":42},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":147,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":147,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3168,3171],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3168,3171],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Interface name `HardwareRequirements` must match the RegExp: /^I[A-Z]/u","line":151,"column":18,"nodeType":"Identifier","messageId":"satisfyCustom","endLine":151,"endColumn":38}],"suppressedMessages":[],"errorCount":19,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { EventEmitter } from 'events';\n\nexport interface LLMMessage {\n  role: 'system' | 'user' | 'assistant';\n  content: string;\n}\n\nexport interface LLMRequestOptions {\n  temperature?: number;\n  maxTokens?: number;\n  topK?: number;\n  presenceBonus?: number;\n  frequencyBonus?: number;\n  stopSequences?: string[];\n}\n\nexport interface LLMResponse {\n  content: string;\n  usage: {\n    promptTokens: number;\n    completionTokens: number;\n    totalTokens: number;\n  };\n}\n\nexport interface LLMStreamEvent {\n  content: string;\n  done: boolean;\n}\n\nexport interface ProviderCapabilities {\n  maxContextLength: number;\n  supportsChatCompletion: boolean;\n  supportsStreaming: boolean;\n  supportsSystemPrompts: boolean;\n}\n\nexport interface ProviderConfig {\n  apiEndpoint: string;\n  apiKey?: string;\n  requestTimeout?: number;\n  healthCheck?: {\n    interval: number;\n    timeout: number;\n  };\n}\n\nexport interface IHealthCheckResult {\n  isHealthy: boolean;\n  timestamp: number;\n  details?: Record<string, any>;\n}\n\nexport interface ILLMModelInfo {\n  id: string;\n  name: string;\n  provider: string;\n  maxContextLength: number;\n  parameters: Record<string, any>;\n  features: string[];\n  metadata?: Record<string, any>;\n}\n\nexport enum ProviderState {\n  Unknown = 'unknown',\n  Registered = 'registered',\n  Initializing = 'initializing',\n  Active = 'active',\n  Deactivating = 'deactivating',\n  Inactive = 'inactive',\n  Error = 'error',\n}\n\nexport interface IProviderStatus {\n  state: ProviderState;\n  activeModel?: string;\n  error?: Error;\n  lastHealthCheck?: IHealthCheckResult;\n}\n\nexport interface LLMProvider extends EventEmitter {\n  readonly id: string;\n  readonly name: string;\n\n  isAvailable(): Promise<boolean>;\n  connect(): Promise<void>;\n  disconnect(): Promise<void>;\n  getStatus(): IProviderStatus;\n  getAvailableModels(): Promise<ILLMModelInfo[]>;\n  getModelInfo(modelId: string): Promise<ILLMModelInfo>;\n  getCapabilities(): Promise<ProviderCapabilities>;\n\n  generateCompletion(\n    model: string,\n    prompt: string,\n    systemPrompt?: string,\n    options?: LLMRequestOptions,\n  ): Promise<LLMResponse>;\n\n  generateChatCompletion(\n    model: string,\n    messages: LLMMessage[],\n    options?: LLMRequestOptions,\n  ): Promise<LLMResponse>;\n\n  streamCompletion(\n    model: string,\n    prompt: string,\n    systemPrompt?: string,\n    options?: LLMRequestOptions,\n    callback?: (event: LLMStreamEvent) => void,\n  ): Promise<void>;\n\n  streamChatCompletion(\n    model: string,\n    messages: LLMMessage[],\n    options?: LLMRequestOptions,\n    callback?: (event: LLMStreamEvent) => void,\n  ): Promise<void>;\n}\n\nexport interface ModelInfo {\n  version: string;\n  provider: string;\n  hardwareRequirements?: HardwareRequirements;\n  capabilities: string[];\n  supportedFormats: string[];\n  parameters: Record<string, any>;\n}\n\nexport interface ModelRequirements {\n  minVersion?: string;\n  hardware?: HardwareRequirements;\n  capabilities?: string[];\n  formats?: string[];\n  parameters?: Record<string, any>;\n}\n\nexport interface ModelValidationResult {\n  isValid: boolean;\n  errors: any[];\n  warnings: string[];\n}\n\nexport interface ModelCompatibilityResult {\n  isCompatible: boolean;\n  errors: any[];\n  warnings: string[];\n}\n\nexport interface HardwareRequirements {\n  minMemoryGB?: number;\n  minCPUCores?: number;\n  gpuRequired?: boolean;\n}\n\nexport type ModelCapabilities = string[];\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/semi","replacedBy":["@stylistic/ts/semi"]}]},{"filePath":"D:\\___coding\\tools\\copilot_ppa\\src\\services\\llm\\validation\\LLMProviderValidator.ts","messages":[{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Interface name `ValidationResult` must match the RegExp: /^I[A-Z]/u","line":3,"column":18,"nodeType":"Identifier","messageId":"satisfyCustom","endLine":3,"endColumn":34},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":60,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":60,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1743,1746],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1743,1746],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [method] on an `any` value.","line":60,"column":36,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":60,"endColumn":42},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":68,"column":10,"nodeType":"Identifier","messageId":"conditionErrorObject","endLine":68,"endColumn":22}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { IHealthCheckResult, LLMProvider, ProviderCapabilities, ProviderConfig } from '../types';\n\nexport interface ValidationResult {\n  isValid: boolean;\n  errors: string[];\n}\n\nexport class LLMProviderValidator {\n  private static readonly REQUIRED_CONFIG_FIELDS = ['apiEndpoint', 'healthCheck'];\n\n  public validateConfig(config: ProviderConfig): ValidationResult {\n    const errors: string[] = [];\n    for (const field of LLMProviderValidator.REQUIRED_CONFIG_FIELDS) {\n      if (!(field in config)) {\n        errors.push(`Missing required field: ${field}`);\n      }\n    }\n    if (config.apiEndpoint) {\n      try {\n        new URL(config.apiEndpoint);\n      } catch {\n        errors.push('Invalid API endpoint URL');\n      }\n    }\n    return {\n      isValid: errors.length === 0,\n      errors,\n    };\n  }\n\n  public validateHealth(result: IHealthCheckResult): ValidationResult {\n    const errors: string[] = [];\n    if (typeof result.isHealthy !== 'boolean') {\n      errors.push('Health check must return a boolean isHealthy status');\n    }\n    if (typeof result.timestamp !== 'number' || result.timestamp < 0) {\n      errors.push('Health check timestamp must be a non-negative number');\n    }\n    return {\n      isValid: errors.length === 0,\n      errors,\n    };\n  }\n\n  public async validateProvider(provider: LLMProvider): Promise<ValidationResult> {\n    const errors: string[] = [];\n    const requiredMethods = [\n      'connect',\n      'disconnect',\n      'getStatus',\n      'getAvailableModels',\n      'getModelInfo',\n      'getCapabilities',\n      'generateCompletion',\n      'generateChatCompletion',\n      'streamCompletion',\n      'streamChatCompletion',\n    ];\n    for (const method of requiredMethods) {\n      if (typeof (provider as any)[method] !== 'function') {\n        errors.push(`Provider must implement ${method} method`);\n      }\n    }\n    if (!provider.id || typeof provider.id !== 'string') {\n      errors.push('Provider must have a valid string ID');\n    }\n    const capabilities: ProviderCapabilities = await provider.getCapabilities();\n    if (!capabilities) {\n      errors.push('Provider must return capabilities');\n    }\n    return {\n      isValid: errors.length === 0,\n      errors,\n    };\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/semi","replacedBy":["@stylistic/ts/semi"]}]},{"filePath":"D:\\___coding\\tools\\copilot_ppa\\src\\services\\llm\\validators\\ProviderConfigValidator.ts","messages":[{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Interface name `ProviderConfig` must match the RegExp: /^I[A-Z]/u","line":1,"column":18,"nodeType":"Identifier","messageId":"satisfyCustom","endLine":1,"endColumn":32}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export interface ProviderConfig {\n  endpoint?: string;\n  apiKey?: string;\n  modelId?: string;\n  maxTokens?: number;\n  temperature?: number;\n  topP?: number;\n  presencePenalty?: number;\n  frequencyPenalty?: number;\n  stopSequences?: string[];\n  timeoutMs?: number;\n  maxRetries?: number;\n  capabilities?: {\n    streaming?: boolean;\n    modelSelection?: boolean;\n    systemPrompts?: boolean;\n  };\n}\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/semi","replacedBy":["@stylistic/ts/semi"]}]},{"filePath":"D:\\___coding\\tools\\copilot_ppa\\src\\services\\types.ts","messages":[{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Interface name `ChatMessage` must match the RegExp: /^I[A-Z]/u","line":1,"column":18,"nodeType":"Identifier","messageId":"satisfyCustom","endLine":1,"endColumn":29},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Interface name `Conversation` must match the RegExp: /^I[A-Z]/u","line":9,"column":18,"nodeType":"Identifier","messageId":"satisfyCustom","endLine":9,"endColumn":30},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Interface name `Chapter` must match the RegExp: /^I[A-Z]/u","line":17,"column":18,"nodeType":"Identifier","messageId":"satisfyCustom","endLine":17,"endColumn":25}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export interface ChatMessage {\n  id: string;\n  role: 'user' | 'assistant' | 'system';\n  content: string;\n  timestamp: number;\n  references?: string[]; // IDs of referenced messages\n}\n\nexport interface Conversation {\n  id: string;\n  title: string;\n  messages: ChatMessage[];\n  created: number;\n  updated: number;\n}\n\nexport interface Chapter {\n  id: string;\n  title: string;\n  description?: string;\n  created: number;\n  updated: number;\n  conversationIds: string[];\n}\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/semi","replacedBy":["@stylistic/ts/semi"]}]},{"filePath":"D:\\___coding\\tools\\copilot_ppa\\src\\services\\vectordb\\LoggerService.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'message' is defined but never used. Allowed unused args must match /^_/u.","line":2,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'args' is defined but never used. Allowed unused args must match /^_/u.","line":2,"column":28,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":32},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":2,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":2,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[62,65],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[62,65],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'message' is defined but never used. Allowed unused args must match /^_/u.","line":3,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'args' is defined but never used. Allowed unused args must match /^_/u.","line":3,"column":28,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":32},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":3,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":3,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[111,114],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[111,114],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'message' is defined but never used. Allowed unused args must match /^_/u.","line":4,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'args' is defined but never used. Allowed unused args must match /^_/u.","line":4,"column":29,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":33},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":4,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":4,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[161,164],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[161,164],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export class LoggerService {\n  info(message: string, ...args: any[]): void {}\n  warn(message: string, ...args: any[]): void {}\n  error(message: string, ...args: any[]): void {}\n}\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/semi","replacedBy":["@stylistic/ts/semi"]}]},{"filePath":"D:\\___coding\\tools\\copilot_ppa\\src\\services\\vectordb\\manager.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":7,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":7,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[335,338],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[335,338],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":8,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":8,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[379,382],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[379,382],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-redundant-type-constituents","severity":2,"message":"'any' overrides all other types in this union type.","line":8,"column":27,"nodeType":"TSAnyKeyword","messageId":"overrides","endLine":8,"endColumn":30},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":18,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[676,679],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[676,679],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":19,"column":24,"nodeType":"CallExpression","messageId":"unsafeArgument","endLine":19,"endColumn":63},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":19,"column":24,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":19,"endColumn":61},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .constructor on an `any` value.","line":19,"column":33,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":19,"endColumn":44},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":22,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":22,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[794,797],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[794,797],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":26,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":26,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[891,894],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[891,894],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-redundant-type-constituents","severity":2,"message":"'any' overrides all other types in this union type.","line":26,"column":37,"nodeType":"TSAnyKeyword","messageId":"overrides","endLine":26,"endColumn":40},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":30,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":30,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[995,998],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[995,998],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-redundant-type-constituents","severity":2,"message":"'any' overrides all other types in this union type.","line":30,"column":31,"nodeType":"TSAnyKeyword","messageId":"overrides","endLine":30,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":35,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":35,"endColumn":44},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type cast is required.","line":36,"column":9,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":36,"endColumn":17,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1147,1155],"text":"Boolean(provider)"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":37,"column":7,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":37,"endColumn":37}],"suppressedMessages":[],"errorCount":15,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Restored from orphaned code. Updated for current workspace structure.\nimport { LoggerService } from './LoggerService';\nimport { ChromaClientService } from './services/ChromaClientService';\nimport { FaissProviderService } from './services/FaissProviderService';\n\nexport class VectorDatabaseManager {\n  private providers: Map<string, any> = new Map();\n  private activeProvider: any | null = null;\n  private isEnabled = false;\n  private logger: LoggerService;\n\n  constructor(logger: LoggerService) {\n    this.logger = logger;\n    this.registerProvider(new ChromaClientService());\n    this.registerProvider(new FaissProviderService());\n  }\n\n  public registerProvider(provider: any): void {\n    this.providers.set(provider.constructor.name.toLowerCase(), provider);\n  }\n\n  public getProviders(): any[] {\n    return Array.from(this.providers.values());\n  }\n\n  public getProvider(name: string): any | undefined {\n    return this.providers.get(name.toLowerCase());\n  }\n\n  public getActiveProvider(): any | null {\n    return this.activeProvider;\n  }\n\n  public setActiveProvider(name: string): void {\n    const provider = this.getProvider(name);\n    if (provider) {\n      this.activeProvider = provider;\n      this.isEnabled = true;\n    } else {\n      this.logger.error(`Provider ${name} not found.`);\n    }\n  }\n\n  public isProviderEnabled(): boolean {\n    return this.isEnabled;\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/semi","replacedBy":["@stylistic/ts/semi"]}]},{"filePath":"D:\\___coding\\tools\\copilot_ppa\\src\\services\\vectordb\\services\\ChromaClientService.ts","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":2,"message":"Missing return type on function.","line":4,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":4,"endColumn":10}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export class ChromaClientService {\n  constructor() {}\n  // Dummy method for test coverage\n  connect() {\n    return true;\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/semi","replacedBy":["@stylistic/ts/semi"]}]},{"filePath":"D:\\___coding\\tools\\copilot_ppa\\src\\services\\vectordb\\services\\ChromaDocumentService.ts","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":2,"message":"Missing return type on function.","line":4,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":4,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'doc' is defined but never used. Allowed unused args must match /^_/u.","line":4,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":23},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":4,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":4,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[111,114],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[111,114],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export class ChromaDocumentService {\n  constructor() {}\n  // Dummy method for test coverage\n  addDocument(doc: any) {\n    return true;\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/semi","replacedBy":["@stylistic/ts/semi"]}]},{"filePath":"D:\\___coding\\tools\\copilot_ppa\\src\\services\\vectordb\\services\\ChromaEmbeddingService.ts","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":2,"message":"Missing return type on function.","line":4,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":4,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'text' is defined but never used. Allowed unused args must match /^_/u.","line":4,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":21}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export class ChromaEmbeddingService {\n  constructor() {}\n  // Dummy method for test coverage\n  embed(text: string) {\n    return [0.1, 0.2, 0.3];\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/semi","replacedBy":["@stylistic/ts/semi"]}]},{"filePath":"D:\\___coding\\tools\\copilot_ppa\\src\\services\\vectordb\\services\\FaissProviderService.ts","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":2,"message":"Missing return type on function.","line":4,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":4,"endColumn":10}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export class FaissProviderService {\n  constructor() {}\n  // Dummy method for test coverage\n  connect() {\n    return true;\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/semi","replacedBy":["@stylistic/ts/semi"]}]},{"filePath":"D:\\___coding\\tools\\copilot_ppa\\src\\statusBar\\index.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":8,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":8,"endColumn":67},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":8,"column":28,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":8,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":9,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":9,"endColumn":68},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":9,"column":27,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":9,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":10,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":10,"endColumn":59},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":10,"column":24,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":10,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":11,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":11,"endColumn":65},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":11,"column":27,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":11,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":14,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":18,"endColumn":4},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe construction of an any type value.","line":14,"column":31,"nodeType":"NewExpression","messageId":"unsafeNew","endLine":18,"endColumn":4},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":20,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":20,"endColumn":98},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe construction of an any type value.","line":20,"column":29,"nodeType":"NewExpression","messageId":"unsafeNew","endLine":20,"endColumn":98},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `{ dispose(): any; }`.","line":22,"column":30,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":22,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `{ dispose(): any; }`.","line":22,"column":51,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":22,"endColumn":68}],"suppressedMessages":[],"errorCount":14,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as vscode from 'vscode';\nimport { ServiceRegistry, Services } from '../services/ServiceRegistry';\nimport { ConnectionStatusBar } from './connectionStatus';\nimport { ProviderStatusBar } from './providerStatus';\n\nexport function setupStatusBar(context: vscode.ExtensionContext, registry: ServiceRegistry): void {\n  // Get required services\n  const connectionStatus = registry.get(Services.ConnectionStatus);\n  const providerManager = registry.get(Services.LLMProviderManager);\n  const themeManager = registry.get(Services.ThemeManager);\n  const displaySettings = registry.get(Services.DisplaySettings);\n\n  // Create and register status bar items\n  const connectionStatusBar = new ConnectionStatusBar(\n    connectionStatus,\n    themeManager,\n    displaySettings,\n  );\n\n  const providerStatusBar = new ProviderStatusBar(providerManager, themeManager, displaySettings);\n\n  context.subscriptions.push(connectionStatusBar, providerStatusBar);\n}\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/semi","replacedBy":["@stylistic/ts/semi"]}]},{"filePath":"D:\\___coding\\tools\\copilot_ppa\\src\\terminal\\index.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":22,"column":6,"nodeType":"Identifier","messageId":"unsafeCall","endLine":22,"endColumn":12},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `ServiceIdentifier<ILogger>`.","line":31,"column":34,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":31,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `ServiceIdentifier<TerminalManager>`.","line":32,"column":42,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":32,"endColumn":57},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `ServiceIdentifier<InteractiveShell>`.","line":33,"column":43,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":33,"endColumn":59},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `ServiceIdentifier<TerminalConfigurationService>`.","line":35,"column":43,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":35,"endColumn":71},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `ServiceIdentifier<TerminalCommandRegistrar>`.","line":39,"column":39,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":39,"endColumn":63},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `ServiceIdentifier<Disposable>`.","line":46,"column":26,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":46,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `ServiceIdentifier<Disposable>`.","line":47,"column":26,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":47,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `ServiceIdentifier<Disposable>`.","line":48,"column":26,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":48,"endColumn":50},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":52,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":52,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1873,1876],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1873,1876],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":54,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":58,"endColumn":8},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe construction of an any type value.","line":54,"column":24,"nodeType":"NewExpression","messageId":"unsafeNew","endLine":58,"endColumn":8},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `ServiceIdentifier<any>`.","line":56,"column":28,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":56,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of an `any` typed value.","line":64,"column":11,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":68,"endColumn":13},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe construction of an any type value.","line":64,"column":18,"nodeType":"NewExpression","messageId":"unsafeNew","endLine":68,"endColumn":12},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `ServiceIdentifier<any>`.","line":67,"column":32,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":67,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":71,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":71,"endColumn":23},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .info on an `any` value.","line":71,"column":19,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":71,"endColumn":23},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":73,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":73,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .error on an `any` value.","line":73,"column":19,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":73,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":80,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":80,"endColumn":60},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `ServiceIdentifier<unknown>`.","line":80,"column":26,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":80,"endColumn":50},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":81,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":81,"endColumn":23},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .info on an `any` value.","line":81,"column":19,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":81,"endColumn":23},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":83,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":83,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .error on an `any` value.","line":83,"column":19,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":83,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `ServiceIdentifier<TerminalManager>`.","line":89,"column":31,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":89,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `ServiceIdentifier<InteractiveShell>`.","line":93,"column":31,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":93,"endColumn":47},{"ruleId":"@typescript-eslint/no-redundant-type-constituents","severity":2,"message":"'any' overrides all other types in this union type.","line":96,"column":25,"nodeType":"TSTypeReference","messageId":"overrides","endLine":96,"endColumn":41}],"suppressedMessages":[],"errorCount":29,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as vscode from 'vscode';\nimport { Container, injectable } from 'inversify';\nimport { TerminalManager } from './terminalManager';\nimport { InteractiveShell } from './interactiveShell';\nimport { AITerminalHelper } from './aiTerminalHelper';\nimport { CommandGenerationWebview } from './commandGenerationWebview';\nimport { ILogger } from '../logging/ILogger';\nimport { TerminalConfigurationService } from './services/TerminalConfigurationService';\nimport { TerminalCommandRegistrar } from './commands/TerminalCommandRegistrar';\n\nexport * from './types';\nexport * from './terminalManager';\nexport * from './interactiveShell';\nexport * from './aiTerminalHelper';\n\n@injectable()\nexport class TerminalModule implements vscode.Disposable {\n  private readonly disposables: vscode.Disposable[] = [];\n  private container: Container;\n\n  constructor(\n    @inject(ILogger) private readonly logger: ILogger,\n    private readonly context: vscode.ExtensionContext,\n  ) {\n    this.container = new Container();\n    this.configureContainer();\n    this.registerDisposables();\n  }\n\n  private configureContainer(): void {\n    this.container.bind<ILogger>(ILogger).toConstantValue(this.logger);\n    this.container.bind<TerminalManager>(TerminalManager).toSelf().inSingletonScope();\n    this.container.bind<InteractiveShell>(InteractiveShell).toSelf().inSingletonScope();\n    this.container\n      .bind<TerminalConfigurationService>(TerminalConfigurationService)\n      .toSelf()\n      .inSingletonScope();\n    this.container\n      .bind<TerminalCommandRegistrar>(TerminalCommandRegistrar)\n      .toSelf()\n      .inSingletonScope();\n  }\n\n  private registerDisposables(): void {\n    this.disposables.push(\n      this.container.get(TerminalManager),\n      this.container.get(InteractiveShell),\n      this.container.get(TerminalCommandRegistrar),\n    );\n  }\n\n  public setLLMManager(llmManager: any): void {\n    try {\n      const aiHelper = new AITerminalHelper(\n        llmManager,\n        this.container.get(InteractiveShell),\n        this.context,\n      );\n\n      this.container.bind<AITerminalHelper>('AITerminalHelper').toConstantValue(aiHelper);\n      this.container\n        .bind<CommandGenerationWebview>('CommandGenerationWebview')\n        .toDynamicValue(() => {\n          return new CommandGenerationWebview(\n            this.context,\n            aiHelper,\n            this.container.get(InteractiveShell),\n          );\n        });\n\n      this.logger.info('LLM manager configured successfully');\n    } catch (error) {\n      this.logger.error('Failed to configure LLM manager:', error);\n      throw error;\n    }\n  }\n\n  public initialize(): void {\n    try {\n      this.container.get(TerminalCommandRegistrar).register(this.context);\n      this.logger.info('Terminal module initialized successfully');\n    } catch (error) {\n      this.logger.error('Failed to initialize terminal module:', error);\n      throw error;\n    }\n  }\n\n  public getTerminalManager(): TerminalManager {\n    return this.container.get(TerminalManager);\n  }\n\n  public getInteractiveShell(): InteractiveShell {\n    return this.container.get(InteractiveShell);\n  }\n\n  public getAIHelper(): AITerminalHelper | null {\n    return this.container.isBound('AITerminalHelper')\n      ? this.container.get('AITerminalHelper')\n      : null;\n  }\n\n  public dispose(): void {\n    for (const disposable of this.disposables) {\n      disposable.dispose();\n    }\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/semi","replacedBy":["@stylistic/ts/semi"]}]},{"filePath":"D:\\___coding\\tools\\copilot_ppa\\src\\terminal\\types.ts","messages":[{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Interface name `CommandResult` must match the RegExp: /^I[A-Z]/u","line":14,"column":18,"nodeType":"Identifier","messageId":"satisfyCustom","endLine":14,"endColumn":31},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Interface name `CommandHistoryEntry` must match the RegExp: /^I[A-Z]/u","line":24,"column":18,"nodeType":"Identifier","messageId":"satisfyCustom","endLine":24,"endColumn":37},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Interface name `TerminalSession` must match the RegExp: /^I[A-Z]/u","line":34,"column":18,"nodeType":"Identifier","messageId":"satisfyCustom","endLine":34,"endColumn":33},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Interface name `CommandGenerationResult` must match the RegExp: /^I[A-Z]/u","line":42,"column":18,"nodeType":"Identifier","messageId":"satisfyCustom","endLine":42,"endColumn":41},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Interface name `CommandAnalysis` must match the RegExp: /^I[A-Z]/u","line":48,"column":18,"nodeType":"Identifier","messageId":"satisfyCustom","endLine":48,"endColumn":33}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Supported shell types for terminals\n */\nexport enum TerminalShellType {\n  VSCodeDefault = 'vscode-default',\n  PowerShell = 'powershell',\n  GitBash = 'git-bash',\n  WSLBash = 'wsl-bash',\n}\n\n/**\n * Command execution result\n */\nexport interface CommandResult {\n  stdout: string;\n  stderr: string;\n  exitCode: number;\n  success: boolean;\n}\n\n/**\n * Command history entry\n */\nexport interface CommandHistoryEntry {\n  command: string;\n  timestamp: Date;\n  shellType: TerminalShellType;\n  result?: CommandResult;\n}\n\n/**\n * Terminal session information\n */\nexport interface TerminalSession {\n  id: string;\n  name: string;\n  shellType: TerminalShellType;\n  createdAt: Date;\n  commandHistory: CommandHistoryEntry[];\n}\n\nexport interface CommandGenerationResult {\n  command: string;\n  explanation?: string;\n  isValid: boolean;\n}\n\nexport interface CommandAnalysis {\n  command: string;\n  analysis: string;\n  riskLevel?: 'low' | 'medium' | 'high';\n  safeToExecute: boolean;\n}\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/semi","replacedBy":["@stylistic/ts/semi"]}]},{"filePath":"D:\\___coding\\tools\\copilot_ppa\\src\\testRunner\\index.ts","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":2,"message":"Missing return type on function.","line":11,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":11,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":13,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":13,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe construction of an any type value.","line":13,"column":24,"nodeType":"NewExpression","messageId":"unsafeNew","endLine":13,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":18,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":18,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .showHistoricalTrends on an `any` value.","line":18,"column":20,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":18,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":27,"column":9,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":27,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .exportTestResults on an `any` value.","line":27,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":27,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of an `any` typed value.","line":32,"column":3,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":32,"endColumn":23}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as vscode from 'vscode';\nimport { TestReporter } from './testReporting';\nimport { TestResult } from './testTypes';\n\nexport * from './testTypes';\nexport * from './testReporting';\n\n/**\n * Register commands for test reporting and trend analysis\n */\nexport function registerTestReportingCommands(context: vscode.ExtensionContext) {\n  // Create test reporter instance\n  const testReporter = new TestReporter(context);\n\n  // Register command to show test trends\n  context.subscriptions.push(\n    vscode.commands.registerCommand('localLlmAgent.showTestTrends', () => {\n      testReporter.showHistoricalTrends();\n    }),\n  );\n\n  // Register command to export test results\n  context.subscriptions.push(\n    vscode.commands.registerCommand(\n      'localLlmAgent.exportTestResults',\n      (testResults: TestResult) => {\n        testReporter.exportTestResults(testResults);\n      },\n    ),\n  );\n\n  return testReporter;\n}\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/semi","replacedBy":["@stylistic/ts/semi"]}]},{"filePath":"D:\\___coding\\tools\\copilot_ppa\\src\\types.ts","messages":[{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Interface name `Logger` must match the RegExp: /^I[A-Z]/u","line":11,"column":18,"nodeType":"Identifier","messageId":"satisfyCustom","endLine":11,"endColumn":24},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Interface name `Disposable` must match the RegExp: /^I[A-Z]/u","line":20,"column":18,"nodeType":"Identifier","messageId":"satisfyCustom","endLine":20,"endColumn":28},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Interface name `ExtensionContext` must match the RegExp: /^I[A-Z]/u","line":24,"column":18,"nodeType":"Identifier","messageId":"satisfyCustom","endLine":24,"endColumn":34},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":33,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":33,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[745,748],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[745,748],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":37,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":37,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[877,880],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[877,880],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export enum LogLevel {\n  Trace = 0,\n  Debug = 1,\n  Info = 2,\n  Warning = 3,\n  Error = 4,\n  Critical = 5,\n  None = 6,\n}\n\nexport interface Logger {\n  trace(message: string): void;\n  debug(message: string): void;\n  info(message: string): void;\n  warn(message: string): void;\n  error(message: string, error?: Error): void;\n  critical(message: string, error?: Error): void;\n}\n\nexport interface Disposable {\n  dispose(): void;\n}\n\nexport interface ExtensionContext {\n  subscriptions: Disposable[];\n  extensionPath: string;\n  storagePath?: string;\n  globalStoragePath: string;\n  logPath: string;\n  asAbsolutePath(relativePath: string): string;\n  workspaceState: {\n    get<T>(key: string, defaultValue?: T): T | undefined;\n    update(key: string, value: any): Promise<void>;\n  };\n  globalState: {\n    get<T>(key: string, defaultValue?: T): T | undefined;\n    update(key: string, value: any): Promise<void>;\n  };\n}\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/semi","replacedBy":["@stylistic/ts/semi"]}]},{"filePath":"D:\\___coding\\tools\\copilot_ppa\\src\\types\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/semi","replacedBy":["@stylistic/ts/semi"]}]},{"filePath":"D:\\___coding\\tools\\copilot_ppa\\src\\types\\types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/semi","replacedBy":["@stylistic/ts/semi"]}]},{"filePath":"D:\\___coding\\tools\\copilot_ppa\\src\\ui\\components\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/semi","replacedBy":["@stylistic/ts/semi"]}]},{"filePath":"D:\\___coding\\tools\\copilot_ppa\\src\\ui\\types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/semi","replacedBy":["@stylistic/ts/semi"]}]},{"filePath":"D:\\___coding\\tools\\copilot_ppa\\src\\ui\\vectorDatabasePanel.ts","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":2,"message":"Missing return type on function.","line":10,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":10,"endColumn":29},{"ruleId":"eqeqeq","severity":2,"message":"Expected '!==' and instead saw '!='.","line":20,"column":14,"nodeType":"BinaryExpression","messageId":"unexpected","endLine":20,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'extensionUri' is defined but never used. Allowed unused args must match /^_/u.","line":30,"column":51,"nodeType":"Identifier","messageId":"unusedVar","endLine":30,"endColumn":75},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'e' is defined but never used. Allowed unused args must match /^_/u.","line":42,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":42,"endColumn":9},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":54,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":54,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":54,"column":25,"nodeType":"Identifier","messageId":"unsafeCall","endLine":54,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":55,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":55,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":55,"column":31,"nodeType":"Identifier","messageId":"unsafeCall","endLine":55,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .command on an `any` value.","line":57,"column":25,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":57,"endColumn":32},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":59,"column":13,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":67,"endColumn":16,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[1906,1906],"text":"void "},"desc":"Add void operator to ignore."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":61,"column":15,"nodeType":"Property","messageId":"anyAssignment","endLine":64,"endColumn":18},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":61,"column":26,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":61,"endColumn":52},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":61,"column":26,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":61,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .getProviders on an `any` value.","line":61,"column":34,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":61,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .map on an `any` value.","line":61,"column":49,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":61,"endColumn":52},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":62,"column":17,"nodeType":"Property","messageId":"anyAssignment","endLine":62,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .name on an `any` value.","line":62,"column":25,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":62,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":63,"column":17,"nodeType":"Property","messageId":"anyAssignment","endLine":63,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .isAvailable on an `any` value.","line":63,"column":32,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":63,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":65,"column":15,"nodeType":"Property","messageId":"anyAssignment","endLine":65,"endColumn":72},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type cast is required.","line":65,"column":31,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":65,"endColumn":64,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[2167,2200],"text":"(Boolean((manager.getActiveProvider()?.name)))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":65,"column":31,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":65,"endColumn":56},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .getActiveProvider on an `any` value.","line":65,"column":39,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":65,"endColumn":56},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .name on an `any` value.","line":65,"column":60,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":65,"endColumn":64},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":66,"column":15,"nodeType":"Property","messageId":"anyAssignment","endLine":66,"endColumn":59},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":66,"column":26,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":66,"endColumn":57},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .isVectorDatabaseEnabled on an `any` value.","line":66,"column":34,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":66,"endColumn":57},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":71,"column":13,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":71,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .setEnabled on an `any` value.","line":71,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":71,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .enabled on an `any` value.","line":71,"column":40,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":71,"endColumn":47},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":72,"column":13,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":75,"endColumn":16,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[2397,2397],"text":"void "},"desc":"Add void operator to ignore."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":74,"column":15,"nodeType":"Property","messageId":"anyAssignment","endLine":74,"endColumn":59},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":74,"column":26,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":74,"endColumn":57},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .isVectorDatabaseEnabled on an `any` value.","line":74,"column":34,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":74,"endColumn":57},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":80,"column":21,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":80,"endColumn":80},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":80,"column":37,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":80,"endColumn":62},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .setActiveProvider on an `any` value.","line":80,"column":45,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":80,"endColumn":62},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .provider on an `any` value.","line":80,"column":71,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":80,"endColumn":79},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type cast is required.","line":81,"column":19,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":81,"endColumn":26,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[2721,2728],"text":"Boolean(success)"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":82,"column":17,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":85,"endColumn":20,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[2748,2748],"text":"void "},"desc":"Add void operator to ignore."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":84,"column":19,"nodeType":"Property","messageId":"anyAssignment","endLine":84,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .provider on an `any` value.","line":84,"column":43,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":84,"endColumn":51},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":86,"column":17,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":88,"endColumn":19,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[2916,2916],"text":"void "},"desc":"Add void operator to ignore."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .provider on an `any` value.","line":87,"column":30,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":87,"endColumn":38},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":90,"column":17,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":92,"endColumn":19,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[3080,3080],"text":"void "},"desc":"Add void operator to ignore."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .provider on an `any` value.","line":91,"column":44,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":91,"endColumn":52},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":95,"column":15,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":97,"endColumn":17,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[3265,3265],"text":"void "},"desc":"Add void operator to ignore."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":103,"column":21,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":103,"endColumn":95},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":103,"column":37,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":103,"endColumn":65},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .semanticSearch on an `any` value.","line":103,"column":51,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":103,"endColumn":65},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .query on an `any` value.","line":103,"column":74,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":103,"endColumn":79},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .limit on an `any` value.","line":103,"column":89,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":103,"endColumn":94},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":104,"column":15,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":107,"endColumn":18,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[3590,3590],"text":"void "},"desc":"Add void operator to ignore."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":106,"column":17,"nodeType":"Property","messageId":"anyAssignment","endLine":106,"endColumn":24},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":109,"column":15,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":111,"endColumn":17,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[3753,3753],"text":"void "},"desc":"Add void operator to ignore."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":117,"column":21,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":120,"endColumn":16},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":117,"column":35,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":117,"endColumn":63},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .indexWorkspace on an `any` value.","line":117,"column":49,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":117,"endColumn":63},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .includePattern on an `any` value.","line":118,"column":25,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":118,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .excludePattern on an `any` value.","line":119,"column":25,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":119,"endColumn":39},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":121,"column":15,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":121,"endColumn":91,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[4155,4155],"text":"void "},"desc":"Add void operator to ignore."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":122,"column":15,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":125,"endColumn":18,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[4246,4246],"text":"void "},"desc":"Add void operator to ignore."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":124,"column":17,"nodeType":"Property","messageId":"anyAssignment","endLine":124,"endColumn":22},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":127,"column":15,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":129,"endColumn":17,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[4410,4410],"text":"void "},"desc":"Add void operator to ignore."}]},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":135,"column":44,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":135,"endColumn":59},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .fileUri on an `any` value.","line":135,"column":52,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":135,"endColumn":59},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":139,"column":15,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":141,"endColumn":17,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[4877,4877],"text":"void "},"desc":"Add void operator to ignore."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":2,"message":"Missing return type on function.","line":151,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":151,"endColumn":18},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":2,"message":"Missing return type on function.","line":156,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":156,"endColumn":29},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":2,"message":"Missing return type on function.","line":614,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":614,"endColumn":17}],"suppressedMessages":[],"errorCount":70,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as vscode from 'vscode';\nimport { getCodeSearchService } from '../services/vectordb/codeSearch';\nimport { getVectorDatabaseManager } from '../services/vectordb/manager';\n\nexport class VectorDatabasePanel {\n  public static readonly viewType = 'copilotPPA.vectorDatabasePanel';\n  private readonly _panel: vscode.WebviewPanel;\n  private _disposables: vscode.Disposable[] = [];\n\n  public static createOrShow(extensionUri: vscode.Uri) {\n    const column = vscode.window.activeTextEditor\n      ? vscode.window.activeTextEditor.viewColumn\n      : undefined;\n\n    // If we already have a panel, show it.\n    // Otherwise, create a new panel.\n    const panel = vscode.window.createWebviewPanel(\n      VectorDatabasePanel.viewType,\n      'Vector Database',\n      column != null || vscode.ViewColumn.One,\n      {\n        enableScripts: true,\n        localResourceRoots: [vscode.Uri.joinPath(extensionUri, 'media')],\n      },\n    );\n\n    return new VectorDatabasePanel(panel, extensionUri);\n  }\n\n  private constructor(panel: vscode.WebviewPanel, extensionUri: vscode.Uri) {\n    this._panel = panel;\n\n    // Set the webview's initial html content\n    this._update();\n\n    // Listen for when the panel is disposed\n    // This happens when the user closes the panel or when the panel is closed programmatically\n    this._panel.onDidDispose(() => this.dispose(), null, this._disposables);\n\n    // Update the content based on view changes\n    this._panel.onDidChangeViewState(\n      (e) => {\n        if (this._panel.visible) {\n          this._update();\n        }\n      },\n      null,\n      this._disposables,\n    );\n\n    // Handle messages from the webview\n    this._panel.webview.onDidReceiveMessage(\n      async (message) => {\n        const manager = getVectorDatabaseManager();\n        const searchService = getCodeSearchService();\n\n        switch (message.command) {\n          case 'getProviders':\n            this._panel.webview.postMessage({\n              command: 'providersLoaded',\n              providers: manager.getProviders().map((p) => ({\n                name: p.name,\n                isAvailable: p.isAvailable,\n              })),\n              activeProvider: manager.getActiveProvider()?.name || null,\n              isEnabled: manager.isVectorDatabaseEnabled(),\n            });\n            return;\n\n          case 'setEnabled':\n            manager.setEnabled(message.enabled);\n            this._panel.webview.postMessage({\n              command: 'statusChanged',\n              isEnabled: manager.isVectorDatabaseEnabled(),\n            });\n            return;\n\n          case 'setActiveProvider':\n            try {\n              const success = await manager.setActiveProvider(message.provider);\n              if (success) {\n                this._panel.webview.postMessage({\n                  command: 'providerChanged',\n                  activeProvider: message.provider,\n                });\n                vscode.window.showInformationMessage(\n                  `${message.provider} is now the active provider`,\n                );\n              } else {\n                vscode.window.showErrorMessage(\n                  `Failed to set ${message.provider} as active provider`,\n                );\n              }\n            } catch (error) {\n              vscode.window.showErrorMessage(\n                `Error: ${error instanceof Error ? error.message : String(error)}`,\n              );\n            }\n            return;\n\n          case 'searchCode':\n            try {\n              const results = await searchService.semanticSearch(message.query, message.limit);\n              this._panel.webview.postMessage({\n                command: 'searchResults',\n                results,\n              });\n            } catch (error) {\n              vscode.window.showErrorMessage(\n                `Search failed: ${error instanceof Error ? error.message : String(error)}`,\n              );\n            }\n            return;\n\n          case 'indexWorkspace':\n            try {\n              const count = await searchService.indexWorkspace(\n                message.includePattern,\n                message.excludePattern,\n              );\n              vscode.window.showInformationMessage(`Successfully indexed ${count} files`);\n              this._panel.webview.postMessage({\n                command: 'indexingComplete',\n                count,\n              });\n            } catch (error) {\n              vscode.window.showErrorMessage(\n                `Indexing failed: ${error instanceof Error ? error.message : String(error)}`,\n              );\n            }\n            return;\n\n          case 'openFile':\n            try {\n              const uri = vscode.Uri.parse(message.fileUri);\n              const document = await vscode.workspace.openTextDocument(uri);\n              await vscode.window.showTextDocument(document);\n            } catch (error) {\n              vscode.window.showErrorMessage(\n                `Failed to open file: ${error instanceof Error ? error.message : String(error)}`,\n              );\n            }\n            return;\n        }\n      },\n      null,\n      this._disposables,\n    );\n  }\n\n  private _update() {\n    this._panel.title = 'Vector Database';\n    this._panel.webview.html = this._getHtmlForWebview();\n  }\n\n  private _getHtmlForWebview() {\n    return `<!DOCTYPE html>\n        <html lang=\"en\">\n        <head>\n            <meta charset=\"UTF-8\">\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n            <title>Vector Database</title>\n            <style>\n                body {\n                    font-family: var(--vscode-font-family);\n                    padding: 20px;\n                    color: var(--vscode-foreground);\n                }\n                .container {\n                    display: flex;\n                    flex-direction: column;\n                    height: calc(100vh - 40px);\n                }\n                .settings {\n                    margin-bottom: 20px;\n                    padding-bottom: 20px;\n                    border-bottom: 1px solid var(--vscode-panel-border);\n                }\n                .search-section {\n                    margin-bottom: 20px;\n                }\n                .index-section {\n                    margin-bottom: 20px;\n                }\n                .results-section {\n                    flex: 1;\n                    overflow-y: auto;\n                }\n                .toggle-container {\n                    margin-bottom: 15px;\n                    display: flex;\n                    align-items: center;\n                }\n                .toggle-switch {\n                    position: relative;\n                    display: inline-block;\n                    width: 60px;\n                    height: 34px;\n                    margin-right: 10px;\n                }\n                .toggle-switch input {\n                    opacity: 0;\n                    width: 0;\n                    height: 0;\n                }\n                .slider {\n                    position: absolute;\n                    cursor: pointer;\n                    top: 0;\n                    left: 0;\n                    right: 0;\n                    bottom: 0;\n                    background-color: #ccc;\n                    transition: .4s;\n                    border-radius: 34px;\n                }\n                .slider:before {\n                    position: absolute;\n                    content: \"\";\n                    height: 26px;\n                    width: 26px;\n                    left: 4px;\n                    bottom: 4px;\n                    background-color: white;\n                    transition: .4s;\n                    border-radius: 50%;\n                }\n                input:checked + .slider {\n                    background-color: #2196F3;\n                }\n                input:checked + .slider:before {\n                    transform: translateX(26px);\n                }\n                select, input[type=\"text\"], input[type=\"number\"] {\n                    padding: 8px;\n                    margin-bottom: 10px;\n                    width: 100%;\n                    background-color: var(--vscode-input-background);\n                    color: var(--vscode-input-foreground);\n                    border: 1px solid var(--vscode-input-border);\n                    border-radius: 2px;\n                }\n                button {\n                    padding: 8px 16px;\n                    background-color: var(--vscode-button-background);\n                    color: var(--vscode-button-foreground);\n                    border: none;\n                    border-radius: 2px;\n                    cursor: pointer;\n                }\n                button:hover {\n                    background-color: var(--vscode-button-hoverBackground);\n                }\n                button:disabled {\n                    opacity: 0.5;\n                    cursor: not-allowed;\n                }\n                .form-group {\n                    margin-bottom: 15px;\n                }\n                label {\n                    display: block;\n                    margin-bottom: 5px;\n                }\n                .result-item {\n                    margin-bottom: 20px;\n                    padding: 10px;\n                    border: 1px solid var(--vscode-panel-border);\n                    border-radius: 4px;\n                }\n                .result-header {\n                    display: flex;\n                    justify-content: space-between;\n                    align-items: center;\n                    margin-bottom: 10px;\n                }\n                .result-path {\n                    font-size: 0.9em;\n                    color: var(--vscode-descriptionForeground);\n                    margin-bottom: 5px;\n                    cursor: pointer;\n                }\n                .result-path:hover {\n                    text-decoration: underline;\n                }\n                .result-score {\n                    font-size: 0.9em;\n                    background-color: var(--vscode-badge-background);\n                    color: var(--vscode-badge-foreground);\n                    padding: 2px 6px;\n                    border-radius: 10px;\n                }\n                .result-content {\n                    white-space: pre-wrap;\n                    overflow-x: auto;\n                    background-color: var(--vscode-editor-background);\n                    padding: 10px;\n                    border-radius: 2px;\n                    font-family: var(--vscode-editor-font-family);\n                    font-size: var(--vscode-editor-font-size);\n                }\n                .hidden {\n                    display: none;\n                }\n            </style>\n        </head>\n        <body>\n            <div class=\"container\">\n                <div class=\"settings\">\n                    <h2>Vector Database Settings</h2>\n\n                    <div class=\"toggle-container\">\n                        <label class=\"toggle-switch\">\n                            <input type=\"checkbox\" id=\"enabledToggle\">\n                            <span class=\"slider\"></span>\n                        </label>\n                        <span id=\"statusText\">Vector Database: Disabled</span>\n                    </div>\n\n                    <div id=\"providerSettings\" class=\"hidden\">\n                        <div class=\"form-group\">\n                            <label for=\"providerSelect\">Select Provider:</label>\n                            <select id=\"providerSelect\">\n                                <!-- Providers will be loaded here -->\n                            </select>\n                        </div>\n                    </div>\n                </div>\n\n                <div id=\"functionalitySection\" class=\"hidden\">\n                    <div class=\"search-section\">\n                        <h2>Semantic Code Search</h2>\n                        <div class=\"form-group\">\n                            <label for=\"searchQuery\">Search Query:</label>\n                            <input type=\"text\" id=\"searchQuery\" placeholder=\"Describe what you're looking for...\">\n                        </div>\n                        <div class=\"form-group\">\n                            <label for=\"resultLimit\">Result Limit:</label>\n                            <input type=\"number\" id=\"resultLimit\" value=\"5\" min=\"1\" max=\"20\">\n                        </div>\n                        <button id=\"searchButton\">Search</button>\n                    </div>\n\n                    <div class=\"index-section\">\n                        <h2>Index Workspace</h2>\n                        <div class=\"form-group\">\n                            <label for=\"includePattern\">Include Pattern:</label>\n                            <input type=\"text\" id=\"includePattern\" value=\"**/*.{js,ts,jsx,tsx,py,java,c,cpp,h,hpp,cs,go,rust}\" placeholder=\"Glob pattern for files to include\">\n                        </div>\n                        <div class=\"form-group\">\n                            <label for=\"excludePattern\">Exclude Pattern:</label>\n                            <input type=\"text\" id=\"excludePattern\" value=\"**/node_modules/**,**/dist/**,**/build/**,**/.git/**\" placeholder=\"Glob pattern for files to exclude\">\n                        </div>\n                        <button id=\"indexButton\">Index Workspace</button>\n                    </div>\n                </div>\n\n                <div class=\"results-section\">\n                    <h2>Search Results</h2>\n                    <div id=\"resultsContainer\">\n                        <!-- Results will be displayed here -->\n                        <div id=\"emptyResults\">No results to display. Try searching for something.</div>\n                    </div>\n                </div>\n            </div>\n\n            <script>\n                (function() {\n                    const vscode = acquireVsCodeApi();\n\n                    // DOM elements\n                    const enabledToggle = document.getElementById('enabledToggle');\n                    const statusText = document.getElementById('statusText');\n                    const providerSettings = document.getElementById('providerSettings');\n                    const providerSelect = document.getElementById('providerSelect');\n                    const functionalitySection = document.getElementById('functionalitySection');\n                    const searchQuery = document.getElementById('searchQuery');\n                    const resultLimit = document.getElementById('resultLimit');\n                    const searchButton = document.getElementById('searchButton');\n                    const includePattern = document.getElementById('includePattern');\n                    const excludePattern = document.getElementById('excludePattern');\n                    const indexButton = document.getElementById('indexButton');\n                    const resultsContainer = document.getElementById('resultsContainer');\n                    const emptyResults = document.getElementById('emptyResults');\n\n                    // State\n                    let isEnabled = false;\n                    let activeProvider = null;\n                    let providers = [];\n\n                    // Initialize\n                    function initialize() {\n                        // Get provider information\n                        vscode.postMessage({ command: 'getProviders' });\n\n                        // Attach event listeners\n                        enabledToggle.addEventListener('change', onToggleChanged);\n                        providerSelect.addEventListener('change', onProviderChanged);\n                        searchButton.addEventListener('click', onSearch);\n                        indexButton.addEventListener('click', onIndexWorkspace);\n                    }\n\n                    // Handle toggle change\n                    function onToggleChanged() {\n                        isEnabled = enabledToggle.checked;\n                        vscode.postMessage({\n                            command: 'setEnabled',\n                            enabled: isEnabled\n                        });\n\n                        updateUI();\n                    }\n\n                    // Handle provider change\n                    function onProviderChanged() {\n                        const selectedProvider = providerSelect.value;\n                        if (selectedProvider && selectedProvider !== activeProvider) {\n                            vscode.postMessage({\n                                command: 'setActiveProvider',\n                                provider: selectedProvider\n                            });\n                        }\n                    }\n\n                    // Handle search button click\n                    function onSearch() {\n                        const query = searchQuery.value.trim();\n                        const limit = parseInt(resultLimit.value, 10) || 5;\n\n                        if (!query) {\n                            vscode.postMessage({\n                                type: 'error',\n                                message: 'Please enter a search query'\n                            });\n                            return;\n                        }\n\n                        vscode.postMessage({\n                            command: 'searchCode',\n                            query,\n                            limit\n                        });\n\n                        // Clear previous results\n                        while (resultsContainer.firstChild) {\n                            resultsContainer.removeChild(resultsContainer.firstChild);\n                        }\n\n                        // Show loading indicator\n                        const loadingEl = document.createElement('div');\n                        loadingEl.textContent = 'Searching...';\n                        loadingEl.id = 'loadingIndicator';\n                        resultsContainer.appendChild(loadingEl);\n\n                        emptyResults.classList.add('hidden');\n                    }\n\n                    // Handle index workspace button click\n                    function onIndexWorkspace() {\n                        const includePatternValue = includePattern.value.trim();\n                        const excludePatternValue = excludePattern.value.trim();\n\n                        vscode.postMessage({\n                            command: 'indexWorkspace',\n                            includePattern: includePatternValue,\n                            excludePattern: excludePatternValue\n                        });\n\n                        // Disable button while indexing\n                        indexButton.disabled = true;\n                        indexButton.textContent = 'Indexing...';\n                    }\n\n                    // Update UI based on current state\n                    function updateUI() {\n                        statusText.textContent = 'Vector Database: ' + (isEnabled ? 'Enabled' : 'Disabled');\n\n                        if (isEnabled) {\n                            providerSettings.classList.remove('hidden');\n                            functionalitySection.classList.remove('hidden');\n                        } else {\n                            providerSettings.classList.add('hidden');\n                            functionalitySection.classList.add('hidden');\n                        }\n                    }\n\n                    // Populate provider dropdown\n                    function populateProviders() {\n                        providerSelect.innerHTML = '';\n\n                        providers.forEach(provider => {\n                            const option = document.createElement('option');\n                            option.value = provider.name;\n                            option.textContent = provider.name;\n                            option.disabled = !provider.isAvailable;\n\n                            if (provider.name === activeProvider) {\n                                option.selected = true;\n                            }\n\n                            providerSelect.appendChild(option);\n                        });\n                    }\n\n                    // Display search results\n                    function displayResults(results) {\n                        // Remove loading indicator\n                        const loadingIndicator = document.getElementById('loadingIndicator');\n                        if (loadingIndicator) {\n                            loadingIndicator.remove();\n                        }\n\n                        // Clear previous results\n                        while (resultsContainer.firstChild) {\n                            resultsContainer.removeChild(resultsContainer.firstChild);\n                        }\n\n                        if (results.length === 0) {\n                            emptyResults.classList.remove('hidden');\n                            emptyResults.textContent = 'No results found for your query.';\n                            resultsContainer.appendChild(emptyResults);\n                            return;\n                        }\n\n                        emptyResults.classList.add('hidden');\n\n                        // Add results\n                        results.forEach(result => {\n                            const resultItem = document.createElement('div');\n                            resultItem.className = 'result-item';\n\n                            const resultHeader = document.createElement('div');\n                            resultHeader.className = 'result-header';\n\n                            const resultPath = document.createElement('div');\n                            resultPath.className = 'result-path';\n                            resultPath.textContent = result.document.metadata.path || 'Unknown path';\n                            resultPath.addEventListener('click', () => {\n                                vscode.postMessage({\n                                    command: 'openFile',\n                                    fileUri: result.document.id\n                                });\n                            });\n\n                            const resultScore = document.createElement('div');\n                            resultScore.className = 'result-score';\n                            resultScore.textContent = 'Score: ' + result.score.toFixed(2);\n\n                            resultHeader.appendChild(resultPath);\n                            resultHeader.appendChild(resultScore);\n\n                            const resultContent = document.createElement('pre');\n                            resultContent.className = 'result-content';\n\n                            // Limit content length to avoid huge blocks\n                            let content = result.document.content;\n                            if (content.length > 1000) {\n                                content = content.substring(0, 1000) + '...';\n                            }\n\n                            resultContent.textContent = content;\n\n                            resultItem.appendChild(resultHeader);\n                            resultItem.appendChild(resultContent);\n\n                            resultsContainer.appendChild(resultItem);\n                        });\n                    }\n\n                    // Handle messages from extension\n                    window.addEventListener('message', event => {\n                        const message = event.data;\n\n                        switch (message.command) {\n                            case 'providersLoaded':\n                                providers = message.providers;\n                                activeProvider = message.activeProvider;\n                                isEnabled = message.isEnabled;\n\n                                enabledToggle.checked = isEnabled;\n                                populateProviders();\n                                updateUI();\n                                break;\n\n                            case 'statusChanged':\n                                isEnabled = message.isEnabled;\n                                updateUI();\n                                break;\n\n                            case 'providerChanged':\n                                activeProvider = message.activeProvider;\n                                populateProviders();\n                                break;\n\n                            case 'searchResults':\n                                displayResults(message.results);\n                                break;\n\n                            case 'indexingComplete':\n                                indexButton.disabled = false;\n                                indexButton.textContent = 'Index Workspace';\n                                break;\n                        }\n                    });\n\n                    // Initialize on load\n                    initialize();\n                })();\n            </script>\n        </body>\n        </html>`;\n  }\n\n  public dispose() {\n    // Clean up resources\n    this._panel.dispose();\n\n    while (this._disposables.length) {\n      const x = this._disposables.pop();\n      if (x) {\n        x.dispose();\n      }\n    }\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/semi","replacedBy":["@stylistic/ts/semi"]}]},{"filePath":"D:\\___coding\\tools\\copilot_ppa\\src\\utils\\logger.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":2,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":2,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[61,64],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[61,64],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":3,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":3,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[109,112],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[109,112],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":4,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":4,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[157,160],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[157,160],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'message' is defined but never used. Allowed unused args must match /^_/u.","line":8,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":8,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'args' is defined but never used. Allowed unused args must match /^_/u.","line":8,"column":29,"nodeType":"Identifier","messageId":"unusedVar","endLine":8,"endColumn":33},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":8,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":8,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[254,257],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[254,257],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'message' is defined but never used. Allowed unused args must match /^_/u.","line":11,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":11,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'args' is defined but never used. Allowed unused args must match /^_/u.","line":11,"column":28,"nodeType":"Identifier","messageId":"unusedVar","endLine":11,"endColumn":32},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":11,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":11,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[328,331],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[328,331],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'message' is defined but never used. Allowed unused args must match /^_/u.","line":14,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":14,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'args' is defined but never used. Allowed unused args must match /^_/u.","line":14,"column":28,"nodeType":"Identifier","messageId":"unusedVar","endLine":14,"endColumn":32},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":14,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":14,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[402,405],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[402,405],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":12,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export interface ILogger {\n  error(message: string, ...args: any[]): void;\n  info?(message: string, ...args: any[]): void;\n  warn?(message: string, ...args: any[]): void;\n}\n\nexport class DummyLogger implements ILogger {\n  error(message: string, ...args: any[]): void {\n    // no-op for test\n  }\n  info(message: string, ...args: any[]): void {\n    // no-op for test\n  }\n  warn(message: string, ...args: any[]): void {\n    // no-op for test\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/semi","replacedBy":["@stylistic/ts/semi"]}]},{"filePath":"D:\\___coding\\tools\\copilot_ppa\\src\\webview\\index.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":7,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":7,"endColumn":71},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":7,"column":30,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":7,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":8,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":8,"endColumn":66},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":8,"column":26,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":8,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":9,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":9,"endColumn":63},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":9,"column":26,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":9,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":10,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":10,"endColumn":67},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":10,"column":28,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":10,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":13,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":19,"endColumn":4},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe construction of an any type value.","line":13,"column":28,"nodeType":"NewExpression","messageId":"unsafeNew","endLine":19,"endColumn":4},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":22,"column":5,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":22,"endColumn":30},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .viewType on an `any` value.","line":22,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":22,"endColumn":30},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `WebviewViewProvider`.","line":23,"column":5,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":23,"endColumn":21}],"suppressedMessages":[],"errorCount":13,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as vscode from 'vscode';\nimport { ChatViewProvider } from './chatView';\nimport { ServiceRegistry, Services } from '../services/ServiceRegistry';\n\nexport function setupWebviews(context: vscode.ExtensionContext, registry: ServiceRegistry): void {\n  // Get required services\n  const llmProviderManager = registry.get(Services.LLMProviderManager);\n  const sessionManager = registry.get(Services.LLMSessionManager);\n  const contextManager = registry.get(Services.ContextManager);\n  const connectionStatus = registry.get(Services.ConnectionStatus);\n\n  // Register chat view provider\n  const chatViewProvider = new ChatViewProvider(\n    context.extensionUri,\n    llmProviderManager,\n    sessionManager,\n    contextManager,\n    connectionStatus,\n  );\n\n  const chatView = vscode.window.registerWebviewViewProvider(\n    ChatViewProvider.viewType,\n    chatViewProvider,\n  );\n\n  context.subscriptions.push(chatView);\n}\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/semi","replacedBy":["@stylistic/ts/semi"]}]}]
